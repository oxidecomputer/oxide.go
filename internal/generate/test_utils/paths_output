// Code generated by `generate.test`. DO NOT EDIT.

package oxide

// IpPoolList
//
// To iterate over all pages, use the `IpPoolListAllPages` method, instead.
//
// Parameters:
//	- `limit`
//	- `pageToken`
func (c *Client) IpPoolList(limit int, pageToken string, ) (*IpPoolResultsPage, error) {
// Create the url.
path := "/ip-pools"
uri := resolveRelative(c.server, path)
// Create the request.
req, err := http.NewRequest("GET", uri, nil)
if err != nil {
return nil, fmt.Errorf("error creating request: %v", err)
}
// Add the parameters to the url.
if err := expandURL(req.URL, map[string]string{
	"limit": strconv.Itoa(limit),
	"page_token": pageToken,
}); err != nil {
return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
}
// Send the request.
resp, err := c.client.Do(req)
if err != nil {
return nil, fmt.Errorf("error sending request: %v", err)
}
defer resp.Body.Close()
// Check the response.
if err := checkResponse(resp); err != nil {
return nil, err
}
// Decode the body from the response.
if resp.Body == nil {
return nil, errors.New("request returned an empty body in the response")
}
var body IpPoolResultsPage
if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
return nil, fmt.Errorf("error decoding response body: %v", err)
}
// Return the response.
return &body, nil
}

// IpPoolList
//
// Parameters:
//	- `limit`
//	- `pageToken`
func (c *Client) IpPoolList(limit int, pageToken string, ) (*IpPoolResultsPage, error) {
// Create the url.
path := "/ip-pools"
uri := resolveRelative(c.server, path)
// Create the request.
req, err := http.NewRequest("GET", uri, nil)
if err != nil {
return nil, fmt.Errorf("error creating request: %v", err)
}
// Add the parameters to the url.
if err := expandURL(req.URL, map[string]string{
	"limit": strconv.Itoa(limit),
	"page_token": pageToken,
}); err != nil {
return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
}
// Send the request.
resp, err := c.client.Do(req)
if err != nil {
return nil, fmt.Errorf("error sending request: %v", err)
}
defer resp.Body.Close()
// Check the response.
if err := checkResponse(resp); err != nil {
return nil, err
}
// Decode the body from the response.
if resp.Body == nil {
return nil, errors.New("request returned an empty body in the response")
}
var body IpPoolResultsPage
if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
return nil, fmt.Errorf("error decoding response body: %v", err)
}
// Return the response.
return &body, nil
}

// IpPoolCreate
func (c *Client) IpPoolCreate(j *IpPoolCreate) (*IpPool, error) {
// Create the url.
path := "/ip-pools"
uri := resolveRelative(c.server, path)
// Encode the request body as json.
b := new(bytes.Buffer)
if err := json.NewEncoder(b).Encode(j); err != nil {
return nil, fmt.Errorf("encoding json body request failed: %v", err)
}
// Create the request.
req, err := http.NewRequest("POST", uri, b)
if err != nil {
return nil, fmt.Errorf("error creating request: %v", err)
}
// Send the request.
resp, err := c.client.Do(req)
if err != nil {
return nil, fmt.Errorf("error sending request: %v", err)
}
defer resp.Body.Close()
// Check the response.
if err := checkResponse(resp); err != nil {
return nil, err
}
// Decode the body from the response.
if resp.Body == nil {
return nil, errors.New("request returned an empty body in the response")
}
var body IpPool
if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
return nil, fmt.Errorf("error decoding response body: %v", err)
}
// Return the response.
return &body, nil
}

// IpPoolView
//
// Parameters:
//	- `poolName`
func (c *Client) IpPoolView(poolName Name, ) (*IpPool, error) {
// Create the url.
path := "/ip-pools{{.pool_name}}"
uri := resolveRelative(c.server, path)
// Create the request.
req, err := http.NewRequest("GET", uri, nil)
if err != nil {
return nil, fmt.Errorf("error creating request: %v", err)
}
// Add the parameters to the url.
if err := expandURL(req.URL, map[string]string{
	"pool_name": string(poolName),
}); err != nil {
return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
}
// Send the request.
resp, err := c.client.Do(req)
if err != nil {
return nil, fmt.Errorf("error sending request: %v", err)
}
defer resp.Body.Close()
// Check the response.
if err := checkResponse(resp); err != nil {
return nil, err
}
// Decode the body from the response.
if resp.Body == nil {
return nil, errors.New("request returned an empty body in the response")
}
var body IpPool
if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
return nil, fmt.Errorf("error decoding response body: %v", err)
}
// Return the response.
return &body, nil
}

// IpPoolUpdate
//
// Parameters:
//	- `poolName`
func (c *Client) IpPoolUpdate(poolName Name, j *IpPoolUpdate) (*IpPool, error) {
// Create the url.
path := "/ip-pools{{.pool_name}}"
uri := resolveRelative(c.server, path)
// Encode the request body as json.
b := new(bytes.Buffer)
if err := json.NewEncoder(b).Encode(j); err != nil {
return nil, fmt.Errorf("encoding json body request failed: %v", err)
}
// Create the request.
req, err := http.NewRequest("PUT", uri, b)
if err != nil {
return nil, fmt.Errorf("error creating request: %v", err)
}
// Add the parameters to the url.
if err := expandURL(req.URL, map[string]string{
	"pool_name": string(poolName),
}); err != nil {
return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
}
// Send the request.
resp, err := c.client.Do(req)
if err != nil {
return nil, fmt.Errorf("error sending request: %v", err)
}
defer resp.Body.Close()
// Check the response.
if err := checkResponse(resp); err != nil {
return nil, err
}
// Decode the body from the response.
if resp.Body == nil {
return nil, errors.New("request returned an empty body in the response")
}
var body IpPool
if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
return nil, fmt.Errorf("error decoding response body: %v", err)
}
// Return the response.
return &body, nil
}

// IpPoolDelete
//
// Parameters:
//	- `poolName`
func (c *Client) IpPoolDelete(poolName Name, ) (error) {
// Create the url.
path := "/ip-pools{{.pool_name}}"
uri := resolveRelative(c.server, path)
// Create the request.
req, err := http.NewRequest("DELETE", uri, nil)
if err != nil {
return fmt.Errorf("error creating request: %v", err)
}
// Add the parameters to the url.
if err := expandURL(req.URL, map[string]string{
	"pool_name": string(poolName),
}); err != nil {
return fmt.Errorf("expanding URL with parameters failed: %v", err)
}
// Send the request.
resp, err := c.client.Do(req)
if err != nil {
return fmt.Errorf("error sending request: %v", err)
}
defer resp.Body.Close()
// Check the response.
if err := checkResponse(resp); err != nil {
return err
}
// Return.
return nil
}

