// Code generated by `generate.test`. DO NOT EDIT.

// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

package oxide

// IpPoolList
//
// To iterate over all pages, use the `IpPoolListAllPages` method, instead.
func (c *Client) IpPoolList(ctx context.Context, params IpPoolListParams, ) (*IpPoolResultsPage, error) { 
    if err := params.Validate(); err != nil {
		return nil, err
	}
    // Create the request
    req, err := buildRequest(
        ctx,
        nil, 
        "GET", 
        resolveRelative(c.server, "/v1/ip-pools"), 
        map[string]string{ 
        }, 
        map[string]string{ 
            "limit": strconv.Itoa(params.Limit),
            "page_token": params.PageToken,
        },
    )
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}

    // Send the request.
    resp, err := c.client.Do(req)
    if err != nil {
        return nil, fmt.Errorf("error sending request: %v", err)
    }
    defer resp.Body.Close()

    // Check the response.
    if err := checkResponse(resp); err != nil {
        return nil, err
    }

    // Decode the body from the response.
    if resp.Body == nil {
        return nil, errors.New("request returned an empty body in the response")
    }

    var body IpPoolResultsPage
    if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
        return nil, fmt.Errorf("error decoding response body: %v", err)
    }

    // Return the response.
    return &body, nil
}

// IpPoolListAllPages
//
// This method is a wrapper around the `IpPoolList` method.
// This method returns all the pages at once.
func (c *Client) IpPoolListAllPages(ctx context.Context, params IpPoolListParams, ) (*IpPoolResultsPage, error) { 
	if err := params.Validate(); err != nil {
		return nil, err
	}
	var allPages IpPoolResultsPage
	params.PageToken = ""
	params.Limit = 100
	for {
		page, err := c.IpPoolList(ctx, params)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == params.PageToken {
			break
		}
		params.PageToken = page.NextPage
	}

	return &allPages, nil
}

// IpPoolCreate
func (c *Client) IpPoolCreate(ctx context.Context, params IpPoolCreateParams, ) (*IpPool, error) { 
    if err := params.Validate(); err != nil {
		return nil, err
	}
    // Encode the request body as json.
    b := new(bytes.Buffer)
    if err := json.NewEncoder(b).Encode(params.Body); err != nil {
        return nil, fmt.Errorf("encoding json body request failed: %v", err)
    }

    // Create the request
    req, err := buildRequest(
        ctx,
        b, 
        "POST", 
        resolveRelative(c.server, "/v1/ip-pools"), 
        map[string]string{ 
        }, 
        map[string]string{ 
        },
    )
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}

    // Send the request.
    resp, err := c.client.Do(req)
    if err != nil {
        return nil, fmt.Errorf("error sending request: %v", err)
    }
    defer resp.Body.Close()

    // Check the response.
    if err := checkResponse(resp); err != nil {
        return nil, err
    }

    // Decode the body from the response.
    if resp.Body == nil {
        return nil, errors.New("request returned an empty body in the response")
    }

    var body IpPool
    if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
        return nil, fmt.Errorf("error decoding response body: %v", err)
    }

    // Return the response.
    return &body, nil
}

// IpPoolView
func (c *Client) IpPoolView(ctx context.Context, params IpPoolViewParams, ) (*IpPool, error) { 
    if err := params.Validate(); err != nil {
		return nil, err
	}
    // Create the request
    req, err := buildRequest(
        ctx,
        nil, 
        "GET", 
        resolveRelative(c.server, "/v1/ip-pools{{.pool_name}}"), 
        map[string]string{ 
            "pool_name": string(params.PoolName),
        }, 
        map[string]string{ 
        },
    )
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}

    // Send the request.
    resp, err := c.client.Do(req)
    if err != nil {
        return nil, fmt.Errorf("error sending request: %v", err)
    }
    defer resp.Body.Close()

    // Check the response.
    if err := checkResponse(resp); err != nil {
        return nil, err
    }

    // Decode the body from the response.
    if resp.Body == nil {
        return nil, errors.New("request returned an empty body in the response")
    }

    var body IpPool
    if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
        return nil, fmt.Errorf("error decoding response body: %v", err)
    }

    // Return the response.
    return &body, nil
}

// IpPoolUpdate
func (c *Client) IpPoolUpdate(ctx context.Context, params IpPoolUpdateParams, ) (*IpPool, error) { 
    if err := params.Validate(); err != nil {
		return nil, err
	}
    // Encode the request body as json.
    b := new(bytes.Buffer)
    if err := json.NewEncoder(b).Encode(params.Body); err != nil {
        return nil, fmt.Errorf("encoding json body request failed: %v", err)
    }

    // Create the request
    req, err := buildRequest(
        ctx,
        b, 
        "PUT", 
        resolveRelative(c.server, "/v1/ip-pools{{.pool_name}}"), 
        map[string]string{ 
            "pool_name": string(params.PoolName),
        }, 
        map[string]string{ 
        },
    )
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}

    // Send the request.
    resp, err := c.client.Do(req)
    if err != nil {
        return nil, fmt.Errorf("error sending request: %v", err)
    }
    defer resp.Body.Close()

    // Check the response.
    if err := checkResponse(resp); err != nil {
        return nil, err
    }

    // Decode the body from the response.
    if resp.Body == nil {
        return nil, errors.New("request returned an empty body in the response")
    }

    var body IpPool
    if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
        return nil, fmt.Errorf("error decoding response body: %v", err)
    }

    // Return the response.
    return &body, nil
}

// IpPoolDelete
func (c *Client) IpPoolDelete(ctx context.Context, params IpPoolDeleteParams, ) error { 
    if err := params.Validate(); err != nil {
		return err
	}
    // Create the request
    req, err := buildRequest(
        ctx,
        nil, 
        "DELETE", 
        resolveRelative(c.server, "/v1/ip-pools{{.pool_name}}"), 
        map[string]string{ 
            "pool_name": string(params.PoolName),
        }, 
        map[string]string{ 
        },
    )
	if err != nil {
		return fmt.Errorf("error building request: %v", err)
	}

    // Send the request.
    resp, err := c.client.Do(req)
    if err != nil {
        return fmt.Errorf("error sending request: %v", err)
    }
    defer resp.Body.Close()

    // Check the response.
    if err := checkResponse(resp); err != nil {
        return err
    }

    return nil
}

