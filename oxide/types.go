// Code generated by `generate`. DO NOT EDIT.

package oxide

import "time"

// Baseboard is properties that should uniquely identify a Sled.
type Baseboard struct {
	Part     string `json:"part,omitempty" yaml:"part,omitempty"`
	Revision int    `json:"revision,omitempty" yaml:"revision,omitempty"`
	Serial   string `json:"serial,omitempty" yaml:"serial,omitempty"`
}

// BinRangedoubleType is the type definition for a BinRangedoubleType.
type BinRangedoubleType string

// BinRangedoubleRangeTo is a range unbounded below and exclusively above, `..end`.
type BinRangedoubleRangeTo struct {
	End  float64            `json:"end,omitempty" yaml:"end,omitempty"`
	Type BinRangedoubleType `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangedoubleRange is a range bounded inclusively below and exclusively above, `start..end`.
type BinRangedoubleRange struct {
	End   float64            `json:"end,omitempty" yaml:"end,omitempty"`
	Start float64            `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangedoubleType `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangedoubleRangeFrom is a range bounded inclusively below and unbounded above, `start..`.
type BinRangedoubleRangeFrom struct {
	Start float64            `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangedoubleType `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangedouble is a type storing a range over `T`.
//
// This type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.
type BinRangedouble struct {
	// End is the type definition for a End.
	End float64 `json:"end,omitempty" yaml:"end,omitempty"`
	// Type is the type definition for a Type.
	Type BinRangedoubleType `json:"type,omitempty" yaml:"type,omitempty"`
	// Start is the type definition for a Start.
	Start float64 `json:"start,omitempty" yaml:"start,omitempty"`
}

// BinRangeint64Type is the type definition for a BinRangeint64Type.
type BinRangeint64Type string

// BinRangeint64RangeTo is a range unbounded below and exclusively above, `..end`.
type BinRangeint64RangeTo struct {
	End  int               `json:"end,omitempty" yaml:"end,omitempty"`
	Type BinRangeint64Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeint64Range is a range bounded inclusively below and exclusively above, `start..end`.
type BinRangeint64Range struct {
	End   int               `json:"end,omitempty" yaml:"end,omitempty"`
	Start int               `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangeint64Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeint64RangeFrom is a range bounded inclusively below and unbounded above, `start..`.
type BinRangeint64RangeFrom struct {
	Start int               `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangeint64Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeint64 is a type storing a range over `T`.
//
// This type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.
type BinRangeint64 struct {
	// End is the type definition for a End.
	End int `json:"end,omitempty" yaml:"end,omitempty"`
	// Type is the type definition for a Type.
	Type BinRangeint64Type `json:"type,omitempty" yaml:"type,omitempty"`
	// Start is the type definition for a Start.
	Start int `json:"start,omitempty" yaml:"start,omitempty"`
}

// Bindouble is type storing bin edges and a count of samples within it.
type Bindouble struct {
	// Count is the total count of samples in this bin.
	Count int `json:"count,omitempty" yaml:"count,omitempty"`
	// Range is the range of the support covered by this bin.
	Range BinRangedouble `json:"range,omitempty" yaml:"range,omitempty"`
}

// Binint64 is type storing bin edges and a count of samples within it.
type Binint64 struct {
	// Count is the total count of samples in this bin.
	Count int `json:"count,omitempty" yaml:"count,omitempty"`
	// Range is the range of the support covered by this bin.
	Range BinRangeint64 `json:"range,omitempty" yaml:"range,omitempty"`
}

// BlockSize is the type definition for a BlockSize.
type BlockSize int64

// ByteCount is a count of bytes, typically used either for memory or storage capacity
//
// The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.
type ByteCount int64

// Certificate is client view of a [`Certificate`]
type Certificate struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Service is the service intended to use this certificate.
	Service ServiceUsingCertificate `json:"service,omitempty" yaml:"service,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// CertificateCreate is create-time parameters for a [`Certificate`](crate::external_api::views::Certificate)
type CertificateCreate struct {
	// Cert is pEM file containing public certificate chain
	Cert        []string `json:"cert,omitempty" yaml:"cert,omitempty"`
	Description string   `json:"description,omitempty" yaml:"description,omitempty"`
	// Key is pEM file containing private key
	Key []string `json:"key,omitempty" yaml:"key,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Service is the service using this certificate
	Service ServiceUsingCertificate `json:"service,omitempty" yaml:"service,omitempty"`
}

// CertificateResultsPage is a single page of results
type CertificateResultsPage struct {
	// Items is list of items on this page of results
	Items []Certificate `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// ComponentUpdate is identity-related metadata that's included in "asset" public API objects (which generally have no name or description)
type ComponentUpdate struct {
	ComponentType UpdateableComponentType `json:"component_type,omitempty" yaml:"component_type,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time    `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	Version      SemverVersion `json:"version,omitempty" yaml:"version,omitempty"`
}

// ComponentUpdateResultsPage is a single page of results
type ComponentUpdateResultsPage struct {
	// Items is list of items on this page of results
	Items []ComponentUpdate `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Cumulativedouble is a cumulative or counter data type.
type Cumulativedouble struct {
	StartTime *time.Time `json:"start_time,omitempty" yaml:"start_time,omitempty"`
	Value     float64    `json:"value,omitempty" yaml:"value,omitempty"`
}

// Cumulativeint64 is a cumulative or counter data type.
type Cumulativeint64 struct {
	StartTime *time.Time `json:"start_time,omitempty" yaml:"start_time,omitempty"`
	Value     int        `json:"value,omitempty" yaml:"value,omitempty"`
}

// DatumType is the type definition for a DatumType.
type DatumType string

// DatumBool is the type definition for a DatumBool.
type DatumBool struct {
	Datum bool      `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumI64 is the type definition for a DatumI64.
type DatumI64 struct {
	Datum int       `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumF64 is the type definition for a DatumF64.
type DatumF64 struct {
	Datum float64   `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumString is the type definition for a DatumString.
type DatumString struct {
	Datum string    `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumBytes is the type definition for a DatumBytes.
type DatumBytes struct {
	Datum []string  `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumCumulativeI64 is the type definition for a DatumCumulativeI64.
type DatumCumulativeI64 struct {
	// Datum is a cumulative or counter data type.
	Datum Cumulativeint64 `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType       `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumCumulativeF64 is the type definition for a DatumCumulativeF64.
type DatumCumulativeF64 struct {
	// Datum is a cumulative or counter data type.
	Datum Cumulativedouble `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType        `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumHistogramI64 is the type definition for a DatumHistogramI64.
type DatumHistogramI64 struct {
	// Datum is a simple type for managing a histogram metric.
	//
	// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
	//
	// Note that any gaps, unsorted bins, or non-finite values will result in an error.
	//
	// Example ------- ```rust use oximeter::histogram::{BinRange, Histogram};
	//
	// let edges = [0i64, 10, 20]; let mut hist = Histogram::new(&edges).unwrap(); assert_eq!(hist.n_bins(), 4); // One additional bin for the range (20..) assert_eq!(hist.n_samples(), 0); hist.sample(4); hist.sample(100); assert_eq!(hist.n_samples(), 2);
	//
	// let data = hist.iter().collect::<Vec<_>>(); assert_eq!(data[0].range, BinRange::range(i64::MIN, 0)); // An additional bin for `..0` assert_eq!(data[0].count, 0); // Nothing is in this bin
	//
	// assert_eq!(data[1].range, BinRange::range(0, 10)); // The range `0..10` assert_eq!(data[1].count, 1); // 4 is sampled into this bin ```
	//
	// Notes -----
	//
	// Histograms may be constructed either from their left bin edges, or from a sequence of ranges. In either case, the left-most bin may be converted upon construction. In particular, if the left-most value is not equal to the minimum of the support, a new bin will be added from the minimum to that provided value. If the left-most value _is_ the support's minimum, because the provided bin was unbounded below, such as `(..0)`, then that bin will be converted into one bounded below, `(MIN..0)` in this case.
	//
	// The short of this is that, most of the time, it shouldn't matter. If one specifies the extremes of the support as their bins, be aware that the left-most may be converted from a `BinRange::RangeTo` into a `BinRange::Range`. In other words, the first bin of a histogram is _always_ a `Bin::Range` or a `Bin::RangeFrom` after construction. In fact, every bin is one of those variants, the `BinRange::RangeTo` is only provided as a convenience during construction.
	Datum Histogramint64 `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType      `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumHistogramF64 is the type definition for a DatumHistogramF64.
type DatumHistogramF64 struct {
	// Datum is a simple type for managing a histogram metric.
	//
	// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
	//
	// Note that any gaps, unsorted bins, or non-finite values will result in an error.
	//
	// Example ------- ```rust use oximeter::histogram::{BinRange, Histogram};
	//
	// let edges = [0i64, 10, 20]; let mut hist = Histogram::new(&edges).unwrap(); assert_eq!(hist.n_bins(), 4); // One additional bin for the range (20..) assert_eq!(hist.n_samples(), 0); hist.sample(4); hist.sample(100); assert_eq!(hist.n_samples(), 2);
	//
	// let data = hist.iter().collect::<Vec<_>>(); assert_eq!(data[0].range, BinRange::range(i64::MIN, 0)); // An additional bin for `..0` assert_eq!(data[0].count, 0); // Nothing is in this bin
	//
	// assert_eq!(data[1].range, BinRange::range(0, 10)); // The range `0..10` assert_eq!(data[1].count, 1); // 4 is sampled into this bin ```
	//
	// Notes -----
	//
	// Histograms may be constructed either from their left bin edges, or from a sequence of ranges. In either case, the left-most bin may be converted upon construction. In particular, if the left-most value is not equal to the minimum of the support, a new bin will be added from the minimum to that provided value. If the left-most value _is_ the support's minimum, because the provided bin was unbounded below, such as `(..0)`, then that bin will be converted into one bounded below, `(MIN..0)` in this case.
	//
	// The short of this is that, most of the time, it shouldn't matter. If one specifies the extremes of the support as their bins, be aware that the left-most may be converted from a `BinRange::RangeTo` into a `BinRange::Range`. In other words, the first bin of a histogram is _always_ a `Bin::Range` or a `Bin::RangeFrom` after construction. In fact, every bin is one of those variants, the `BinRange::RangeTo` is only provided as a convenience during construction.
	Datum Histogramdouble `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType       `json:"type,omitempty" yaml:"type,omitempty"`
}

// Datum is a `Datum` is a single sampled data point from a metric.
type Datum struct {
	// Datum is the type definition for a Datum.
	Datum bool `json:"datum,omitempty" yaml:"datum,omitempty"`
	// Type is the type definition for a Type.
	Type DatumType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DerEncodedKeyPair is the type definition for a DerEncodedKeyPair.
type DerEncodedKeyPair struct {
	// PrivateKey is request signing private key (base64 encoded der file)
	PrivateKey string `json:"private_key,omitempty" yaml:"private_key,omitempty"`
	// PublicCert is request signing public certificate (base64 encoded der file)
	PublicCert string `json:"public_cert,omitempty" yaml:"public_cert,omitempty"`
}

// DeviceAccessTokenRequest is the type definition for a DeviceAccessTokenRequest.
type DeviceAccessTokenRequest struct {
	ClientId   string `json:"client_id,omitempty" yaml:"client_id,omitempty"`
	DeviceCode string `json:"device_code,omitempty" yaml:"device_code,omitempty"`
	GrantType  string `json:"grant_type,omitempty" yaml:"grant_type,omitempty"`
}

// DeviceAuthRequest is the type definition for a DeviceAuthRequest.
type DeviceAuthRequest struct {
	ClientId string `json:"client_id,omitempty" yaml:"client_id,omitempty"`
}

// DeviceAuthVerify is the type definition for a DeviceAuthVerify.
type DeviceAuthVerify struct {
	UserCode string `json:"user_code,omitempty" yaml:"user_code,omitempty"`
}

// DigestType is the type definition for a DigestType.
type DigestType string

// DigestSha256 is the type definition for a DigestSha256.
type DigestSha256 struct {
	Type  DigestType `json:"type,omitempty" yaml:"type,omitempty"`
	Value string     `json:"value,omitempty" yaml:"value,omitempty"`
}

// Digest is the type definition for a Digest.
type Digest struct {
	// Type is the type definition for a Type.
	Type DigestType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is the type definition for a Value.
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

// Disk is client view of a [`Disk`]
type Disk struct {
	// BlockSize is a count of bytes, typically used either for memory or storage capacity
	//
	// The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.
	BlockSize ByteCount `json:"block_size,omitempty" yaml:"block_size,omitempty"`
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	DevicePath  string `json:"device_path,omitempty" yaml:"device_path,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id      string `json:"id,omitempty" yaml:"id,omitempty"`
	ImageId string `json:"image_id,omitempty" yaml:"image_id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name      Name   `json:"name,omitempty" yaml:"name,omitempty"`
	ProjectId string `json:"project_id,omitempty" yaml:"project_id,omitempty"`
	// Size is a count of bytes, typically used either for memory or storage capacity
	//
	// The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.
	Size       ByteCount `json:"size,omitempty" yaml:"size,omitempty"`
	SnapshotId string    `json:"snapshot_id,omitempty" yaml:"snapshot_id,omitempty"`
	// State is state of a Disk (primarily: attached or not)
	State DiskState `json:"state,omitempty" yaml:"state,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// DiskCreate is create-time parameters for a [`Disk`](omicron_common::api::external::Disk)
type DiskCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// DiskSource is initial source for this disk
	DiskSource DiskSource `json:"disk_source,omitempty" yaml:"disk_source,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Size is total size of the Disk in bytes
	Size ByteCount `json:"size,omitempty" yaml:"size,omitempty"`
}

// DiskMetricName is the type definition for a DiskMetricName.
type DiskMetricName string

// DiskPath is the type definition for a DiskPath.
type DiskPath struct {
	Disk NameOrId `json:"disk,omitempty" yaml:"disk,omitempty"`
}

// DiskResultsPage is a single page of results
type DiskResultsPage struct {
	// Items is list of items on this page of results
	Items []Disk `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// DiskSourceType is the type definition for a DiskSourceType.
type DiskSourceType string

// DiskSourceBlank is create a blank disk
type DiskSourceBlank struct {
	// BlockSize is size of blocks for this Disk. valid values are: 512, 2048, or 4096
	BlockSize BlockSize      `json:"block_size,omitempty" yaml:"block_size,omitempty"`
	Type      DiskSourceType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DiskSourceSnapshot is create a disk from a disk snapshot
type DiskSourceSnapshot struct {
	SnapshotId string         `json:"snapshot_id,omitempty" yaml:"snapshot_id,omitempty"`
	Type       DiskSourceType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DiskSourceImage is create a disk from a project image
type DiskSourceImage struct {
	ImageId string         `json:"image_id,omitempty" yaml:"image_id,omitempty"`
	Type    DiskSourceType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DiskSourceGlobalImage is create a disk from a global image
type DiskSourceGlobalImage struct {
	ImageId string         `json:"image_id,omitempty" yaml:"image_id,omitempty"`
	Type    DiskSourceType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DiskSource is different sources for a disk
type DiskSource struct {
	// BlockSize is size of blocks for this Disk. valid values are: 512, 2048, or 4096
	BlockSize BlockSize `json:"block_size,omitempty" yaml:"block_size,omitempty"`
	// Type is the type definition for a Type.
	Type DiskSourceType `json:"type,omitempty" yaml:"type,omitempty"`
	// SnapshotId is the type definition for a SnapshotId.
	SnapshotId string `json:"snapshot_id,omitempty" yaml:"snapshot_id,omitempty"`
	// ImageId is the type definition for a ImageId.
	ImageId string `json:"image_id,omitempty" yaml:"image_id,omitempty"`
}

// DiskStateState is the type definition for a DiskStateState.
type DiskStateState string

// DiskStateCreating is disk is being initialized
type DiskStateCreating struct {
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// DiskStateDetached is disk is ready but detached from any Instance
type DiskStateDetached struct {
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// DiskStateMaintenance is disk is undergoing maintenance
type DiskStateMaintenance struct {
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// DiskStateAttaching is disk is being attached to the given Instance
type DiskStateAttaching struct {
	Instance string         `json:"instance,omitempty" yaml:"instance,omitempty"`
	State    DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// DiskStateAttached is disk is attached to the given Instance
type DiskStateAttached struct {
	Instance string         `json:"instance,omitempty" yaml:"instance,omitempty"`
	State    DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// DiskStateDetaching is disk is being detached from the given Instance
type DiskStateDetaching struct {
	Instance string         `json:"instance,omitempty" yaml:"instance,omitempty"`
	State    DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// DiskStateDestroyed is disk has been destroyed
type DiskStateDestroyed struct {
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// DiskStateFaulted is disk is unavailable
type DiskStateFaulted struct {
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// DiskState is state of a Disk (primarily: attached or not)
type DiskState struct {
	// State is the type definition for a State.
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
	// Instance is the type definition for a Instance.
	Instance string `json:"instance,omitempty" yaml:"instance,omitempty"`
}

// Distribution is oS image distribution
type Distribution struct {
	// Name is the name of the distribution (e.g. "alpine" or "ubuntu")
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Version is the version of the distribution (e.g. "3.10" or "18.04")
	Version string `json:"version,omitempty" yaml:"version,omitempty"`
}

// Error is error information from a response.
type Error struct {
	ErrorCode string `json:"error_code,omitempty" yaml:"error_code,omitempty"`
	Message   string `json:"message,omitempty" yaml:"message,omitempty"`
	RequestId string `json:"request_id,omitempty" yaml:"request_id,omitempty"`
}

// ExternalIp is the type definition for a ExternalIp.
type ExternalIp struct {
	Ip string `json:"ip,omitempty" yaml:"ip,omitempty"`
	// Kind is the kind of an external IP address for an instance
	Kind IpKind `json:"kind,omitempty" yaml:"kind,omitempty"`
}

// ExternalIpCreateType is the type definition for a ExternalIpCreateType.
type ExternalIpCreateType string

// ExternalIpCreateEphemeral is an IP address providing both inbound and outbound access. The address is automatically-assigned from the provided IP Pool, or all available pools if not specified.
type ExternalIpCreateEphemeral struct {
	PoolName Name                 `json:"pool_name,omitempty" yaml:"pool_name,omitempty"`
	Type     ExternalIpCreateType `json:"type,omitempty" yaml:"type,omitempty"`
}

// ExternalIpCreate is parameters for creating an external IP address for instances.
type ExternalIpCreate struct {
	// PoolName is the type definition for a PoolName.
	PoolName Name `json:"pool_name,omitempty" yaml:"pool_name,omitempty"`
	// Type is the type definition for a Type.
	Type ExternalIpCreateType `json:"type,omitempty" yaml:"type,omitempty"`
}

// ExternalIpResultsPage is a single page of results
type ExternalIpResultsPage struct {
	// Items is list of items on this page of results
	Items []ExternalIp `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// FleetRole is the type definition for a FleetRole.
type FleetRole string

// FleetRolePolicy is client view of a [`Policy`], which describes how this resource may be accessed
//
// Note that the Policy only describes access granted explicitly for this resource.  The policies of parent resources can also cause a user to have access to this resource.
type FleetRolePolicy struct {
	// RoleAssignments is roles directly assigned on this resource
	RoleAssignments []FleetRoleRoleAssignment `json:"role_assignments,omitempty" yaml:"role_assignments,omitempty"`
}

// FleetRoleRoleAssignment is describes the assignment of a particular role on a particular resource to a particular identity (user, group, etc.)
//
// The resource is not part of this structure.  Rather, [`RoleAssignment`]s are put into a [`Policy`] and that Policy is applied to a particular resource.
type FleetRoleRoleAssignment struct {
	IdentityId string `json:"identity_id,omitempty" yaml:"identity_id,omitempty"`
	// IdentityType is describes what kind of identity is described by an id
	IdentityType IdentityType `json:"identity_type,omitempty" yaml:"identity_type,omitempty"`
	RoleName     FleetRole    `json:"role_name,omitempty" yaml:"role_name,omitempty"`
}

// GlobalImage is client view of global Images
type GlobalImage struct {
	// BlockSize is size of blocks in bytes
	BlockSize ByteCount `json:"block_size,omitempty" yaml:"block_size,omitempty"`
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Digest is hash of the image contents, if applicable
	Digest Digest `json:"digest,omitempty" yaml:"digest,omitempty"`
	// Distribution is image distribution
	Distribution string `json:"distribution,omitempty" yaml:"distribution,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Size is total size in bytes
	Size ByteCount `json:"size,omitempty" yaml:"size,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// Url is uRL source of this image, if any
	Url string `json:"url,omitempty" yaml:"url,omitempty"`
	// Version is image version
	Version string `json:"version,omitempty" yaml:"version,omitempty"`
}

// GlobalImageCreate is create-time parameters for an [`GlobalImage`](crate::external_api::views::GlobalImage)
type GlobalImageCreate struct {
	// BlockSize is block size in bytes
	BlockSize   BlockSize `json:"block_size,omitempty" yaml:"block_size,omitempty"`
	Description string    `json:"description,omitempty" yaml:"description,omitempty"`
	// Distribution is oS image distribution
	Distribution Distribution `json:"distribution,omitempty" yaml:"distribution,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Source is the source of the image's contents.
	Source ImageSource `json:"source,omitempty" yaml:"source,omitempty"`
}

// GlobalImageResultsPage is a single page of results
type GlobalImageResultsPage struct {
	// Items is list of items on this page of results
	Items []GlobalImage `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Group is client view of a [`Group`]
type Group struct {
	// DisplayName is human-readable name that can identify the group
	DisplayName string `json:"display_name,omitempty" yaml:"display_name,omitempty"`
	Id          string `json:"id,omitempty" yaml:"id,omitempty"`
	// SiloId is uuid of the silo to which this group belongs
	SiloId string `json:"silo_id,omitempty" yaml:"silo_id,omitempty"`
}

// GroupResultsPage is a single page of results
type GroupResultsPage struct {
	// Items is list of items on this page of results
	Items []Group `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Histogramdouble is a simple type for managing a histogram metric.
//
// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
//
// Note that any gaps, unsorted bins, or non-finite values will result in an error.
//
// Example ------- ```rust use oximeter::histogram::{BinRange, Histogram};
//
// let edges = [0i64, 10, 20]; let mut hist = Histogram::new(&edges).unwrap(); assert_eq!(hist.n_bins(), 4); // One additional bin for the range (20..) assert_eq!(hist.n_samples(), 0); hist.sample(4); hist.sample(100); assert_eq!(hist.n_samples(), 2);
//
// let data = hist.iter().collect::<Vec<_>>(); assert_eq!(data[0].range, BinRange::range(i64::MIN, 0)); // An additional bin for `..0` assert_eq!(data[0].count, 0); // Nothing is in this bin
//
// assert_eq!(data[1].range, BinRange::range(0, 10)); // The range `0..10` assert_eq!(data[1].count, 1); // 4 is sampled into this bin ```
//
// Notes -----
//
// Histograms may be constructed either from their left bin edges, or from a sequence of ranges. In either case, the left-most bin may be converted upon construction. In particular, if the left-most value is not equal to the minimum of the support, a new bin will be added from the minimum to that provided value. If the left-most value _is_ the support's minimum, because the provided bin was unbounded below, such as `(..0)`, then that bin will be converted into one bounded below, `(MIN..0)` in this case.
//
// The short of this is that, most of the time, it shouldn't matter. If one specifies the extremes of the support as their bins, be aware that the left-most may be converted from a `BinRange::RangeTo` into a `BinRange::Range`. In other words, the first bin of a histogram is _always_ a `Bin::Range` or a `Bin::RangeFrom` after construction. In fact, every bin is one of those variants, the `BinRange::RangeTo` is only provided as a convenience during construction.
type Histogramdouble struct {
	Bins      []Bindouble `json:"bins,omitempty" yaml:"bins,omitempty"`
	NSamples  int         `json:"n_samples,omitempty" yaml:"n_samples,omitempty"`
	StartTime *time.Time  `json:"start_time,omitempty" yaml:"start_time,omitempty"`
}

// Histogramint64 is a simple type for managing a histogram metric.
//
// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
//
// Note that any gaps, unsorted bins, or non-finite values will result in an error.
//
// Example ------- ```rust use oximeter::histogram::{BinRange, Histogram};
//
// let edges = [0i64, 10, 20]; let mut hist = Histogram::new(&edges).unwrap(); assert_eq!(hist.n_bins(), 4); // One additional bin for the range (20..) assert_eq!(hist.n_samples(), 0); hist.sample(4); hist.sample(100); assert_eq!(hist.n_samples(), 2);
//
// let data = hist.iter().collect::<Vec<_>>(); assert_eq!(data[0].range, BinRange::range(i64::MIN, 0)); // An additional bin for `..0` assert_eq!(data[0].count, 0); // Nothing is in this bin
//
// assert_eq!(data[1].range, BinRange::range(0, 10)); // The range `0..10` assert_eq!(data[1].count, 1); // 4 is sampled into this bin ```
//
// Notes -----
//
// Histograms may be constructed either from their left bin edges, or from a sequence of ranges. In either case, the left-most bin may be converted upon construction. In particular, if the left-most value is not equal to the minimum of the support, a new bin will be added from the minimum to that provided value. If the left-most value _is_ the support's minimum, because the provided bin was unbounded below, such as `(..0)`, then that bin will be converted into one bounded below, `(MIN..0)` in this case.
//
// The short of this is that, most of the time, it shouldn't matter. If one specifies the extremes of the support as their bins, be aware that the left-most may be converted from a `BinRange::RangeTo` into a `BinRange::Range`. In other words, the first bin of a histogram is _always_ a `Bin::Range` or a `Bin::RangeFrom` after construction. In fact, every bin is one of those variants, the `BinRange::RangeTo` is only provided as a convenience during construction.
type Histogramint64 struct {
	Bins      []Binint64 `json:"bins,omitempty" yaml:"bins,omitempty"`
	NSamples  int        `json:"n_samples,omitempty" yaml:"n_samples,omitempty"`
	StartTime *time.Time `json:"start_time,omitempty" yaml:"start_time,omitempty"`
}

// IdSortMode is sort in increasing order of "id"
type IdSortMode string

// IdentityProvider is client view of an [`IdentityProvider`]
type IdentityProvider struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// ProviderType is identity provider type
	ProviderType IdentityProviderType `json:"provider_type,omitempty" yaml:"provider_type,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// IdentityProviderResultsPage is a single page of results
type IdentityProviderResultsPage struct {
	// Items is list of items on this page of results
	Items []IdentityProvider `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// IdentityProviderType is sAML identity provider
type IdentityProviderType string

// IdentityType is describes what kind of identity is described by an id
type IdentityType string

// IdpMetadataSourceType is the type definition for a IdpMetadataSourceType.
type IdpMetadataSourceType string

// IdpMetadataSourceUrl is the type definition for a IdpMetadataSourceUrl.
type IdpMetadataSourceUrl struct {
	Type IdpMetadataSourceType `json:"type,omitempty" yaml:"type,omitempty"`
	Url  string                `json:"url,omitempty" yaml:"url,omitempty"`
}

// IdpMetadataSourceBase64EncodedXml is the type definition for a IdpMetadataSourceBase64EncodedXml.
type IdpMetadataSourceBase64EncodedXml struct {
	Data string                `json:"data,omitempty" yaml:"data,omitempty"`
	Type IdpMetadataSourceType `json:"type,omitempty" yaml:"type,omitempty"`
}

// IdpMetadataSource is the type definition for a IdpMetadataSource.
type IdpMetadataSource struct {
	// Type is the type definition for a Type.
	Type IdpMetadataSourceType `json:"type,omitempty" yaml:"type,omitempty"`
	// Url is the type definition for a Url.
	Url string `json:"url,omitempty" yaml:"url,omitempty"`
	// Data is the type definition for a Data.
	Data string `json:"data,omitempty" yaml:"data,omitempty"`
}

// Image is client view of project Images
type Image struct {
	// BlockSize is size of blocks in bytes
	BlockSize ByteCount `json:"block_size,omitempty" yaml:"block_size,omitempty"`
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Digest is hash of the image contents, if applicable
	Digest Digest `json:"digest,omitempty" yaml:"digest,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Os is the family of the operating system like Debian, Ubuntu, etc.
	Os string `json:"os,omitempty" yaml:"os,omitempty"`
	// ProjectId is the project the image belongs to
	ProjectId string `json:"project_id,omitempty" yaml:"project_id,omitempty"`
	// Size is total size in bytes
	Size ByteCount `json:"size,omitempty" yaml:"size,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// Url is uRL source of this image, if any
	Url string `json:"url,omitempty" yaml:"url,omitempty"`
	// Version is version of the operating system
	Version string `json:"version,omitempty" yaml:"version,omitempty"`
}

// ImageCreate is create-time parameters for an [`Image`](crate::external_api::views::Image)
type ImageCreate struct {
	// BlockSize is block size in bytes
	BlockSize   BlockSize `json:"block_size,omitempty" yaml:"block_size,omitempty"`
	Description string    `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Os is the family of the operating system (e.g. Debian, Ubuntu, etc.)
	Os string `json:"os,omitempty" yaml:"os,omitempty"`
	// Source is the source of the image's contents.
	Source ImageSource `json:"source,omitempty" yaml:"source,omitempty"`
	// Version is the version of the operating system (e.g. 18.04, 20.04, etc.)
	Version string `json:"version,omitempty" yaml:"version,omitempty"`
}

// ImageResultsPage is a single page of results
type ImageResultsPage struct {
	// Items is list of items on this page of results
	Items []Image `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// ImageSourceType is the type definition for a ImageSourceType.
type ImageSourceType string

// ImageSourceUrl is the type definition for a ImageSourceUrl.
type ImageSourceUrl struct {
	Type ImageSourceType `json:"type,omitempty" yaml:"type,omitempty"`
	Url  string          `json:"url,omitempty" yaml:"url,omitempty"`
}

// ImageSourceSnapshot is the type definition for a ImageSourceSnapshot.
type ImageSourceSnapshot struct {
	Id   string          `json:"id,omitempty" yaml:"id,omitempty"`
	Type ImageSourceType `json:"type,omitempty" yaml:"type,omitempty"`
}

// ImageSourceYouCanBootAnythingAsLongAsItsAlpine is boot the Alpine ISO that ships with the Propolis zone. Intended for development purposes only.
type ImageSourceYouCanBootAnythingAsLongAsItsAlpine struct {
	Type ImageSourceType `json:"type,omitempty" yaml:"type,omitempty"`
}

// ImageSource is the source of the underlying image.
type ImageSource struct {
	// Type is the type definition for a Type.
	Type ImageSourceType `json:"type,omitempty" yaml:"type,omitempty"`
	// Url is the type definition for a Url.
	Url string `json:"url,omitempty" yaml:"url,omitempty"`
	// Id is the type definition for a Id.
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
}

// Instance is client view of an [`Instance`]
type Instance struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Hostname is rFC1035-compliant hostname for the Instance.
	Hostname string `json:"hostname,omitempty" yaml:"hostname,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Memory is memory allocated for this Instance
	Memory ByteCount `json:"memory,omitempty" yaml:"memory,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Ncpus is number of CPUs allocated for this Instance
	Ncpus InstanceCpuCount `json:"ncpus,omitempty" yaml:"ncpus,omitempty"`
	// ProjectId is id for the project containing this Instance
	ProjectId string `json:"project_id,omitempty" yaml:"project_id,omitempty"`
	// RunState is running state of an Instance (primarily: booted or stopped)
	//
	// This typically reflects whether it's starting, running, stopping, or stopped, but also includes states related to the Instance's lifecycle
	RunState InstanceState `json:"run_state,omitempty" yaml:"run_state,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified        *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	TimeRunStateUpdated *time.Time `json:"time_run_state_updated,omitempty" yaml:"time_run_state_updated,omitempty"`
}

// InstanceCpuCount is the number of CPUs in an Instance
type InstanceCpuCount int64

// InstanceCreate is create-time parameters for an [`Instance`](omicron_common::api::external::Instance)
type InstanceCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Disks is the disks to be created or attached for this instance.
	Disks []InstanceDiskAttachment `json:"disks,omitempty" yaml:"disks,omitempty"`
	// ExternalIps is the external IP addresses provided to this instance.
	//
	// By default, all instances have outbound connectivity, but no inbound connectivity. These external addresses can be used to provide a fixed, known IP address for making inbound connections to the instance.
	ExternalIps []ExternalIpCreate `json:"external_ips,omitempty" yaml:"external_ips,omitempty"`
	Hostname    string             `json:"hostname,omitempty" yaml:"hostname,omitempty"`
	// Memory is a count of bytes, typically used either for memory or storage capacity
	//
	// The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.
	Memory ByteCount `json:"memory,omitempty" yaml:"memory,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Ncpus is the number of CPUs in an Instance
	Ncpus InstanceCpuCount `json:"ncpus,omitempty" yaml:"ncpus,omitempty"`
	// NetworkInterfaces is the network interfaces to be created for this instance.
	NetworkInterfaces InstanceNetworkInterfaceAttachment `json:"network_interfaces,omitempty" yaml:"network_interfaces,omitempty"`
	// Start is should this instance be started upon creation; true by default.
	Start bool `json:"start,omitempty" yaml:"start,omitempty"`
	// UserData is user data for instance initialization systems (such as cloud-init). Must be a Base64-encoded string, as specified in RFC 4648 § 4 (+ and / characters with padding). Maximum 32 KiB unencoded data.
	UserData string `json:"user_data,omitempty" yaml:"user_data,omitempty"`
}

// InstanceDiskAttachmentType is the type definition for a InstanceDiskAttachmentType.
type InstanceDiskAttachmentType string

// InstanceDiskAttachmentCreate is during instance creation, create and attach disks
type InstanceDiskAttachmentCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// DiskSource is initial source for this disk
	DiskSource DiskSource `json:"disk_source,omitempty" yaml:"disk_source,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Size is total size of the Disk in bytes
	Size ByteCount                  `json:"size,omitempty" yaml:"size,omitempty"`
	Type InstanceDiskAttachmentType `json:"type,omitempty" yaml:"type,omitempty"`
}

// InstanceDiskAttachmentAttach is during instance creation, attach this disk
type InstanceDiskAttachmentAttach struct {
	// Name is a disk name to attach
	Name Name                       `json:"name,omitempty" yaml:"name,omitempty"`
	Type InstanceDiskAttachmentType `json:"type,omitempty" yaml:"type,omitempty"`
}

// InstanceDiskAttachment is describe the instance's disks at creation time
type InstanceDiskAttachment struct {
	// Description is the type definition for a Description.
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// DiskSource is initial source for this disk
	DiskSource DiskSource `json:"disk_source,omitempty" yaml:"disk_source,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Size is total size of the Disk in bytes
	Size ByteCount `json:"size,omitempty" yaml:"size,omitempty"`
	// Type is the type definition for a Type.
	Type InstanceDiskAttachmentType `json:"type,omitempty" yaml:"type,omitempty"`
}

// InstanceMigrate is migration parameters for an [`Instance`](omicron_common::api::external::Instance)
type InstanceMigrate struct {
	DstSledId string `json:"dst_sled_id,omitempty" yaml:"dst_sled_id,omitempty"`
}

// InstanceNetworkInterfaceAttachmentType is the type definition for a InstanceNetworkInterfaceAttachmentType.
type InstanceNetworkInterfaceAttachmentType string

// InstanceNetworkInterfaceAttachmentCreate is create one or more `NetworkInterface`s for the `Instance`.
//
// If more than one interface is provided, then the first will be designated the primary interface for the instance.
type InstanceNetworkInterfaceAttachmentCreate struct {
	Params []NetworkInterfaceCreate               `json:"params,omitempty" yaml:"params,omitempty"`
	Type   InstanceNetworkInterfaceAttachmentType `json:"type,omitempty" yaml:"type,omitempty"`
}

// InstanceNetworkInterfaceAttachmentDefault is the default networking configuration for an instance is to create a single primary interface with an automatically-assigned IP address. The IP will be pulled from the Project's default VPC / VPC Subnet.
type InstanceNetworkInterfaceAttachmentDefault struct {
	Type InstanceNetworkInterfaceAttachmentType `json:"type,omitempty" yaml:"type,omitempty"`
}

// InstanceNetworkInterfaceAttachmentNone is no network interfaces at all will be created for the instance.
type InstanceNetworkInterfaceAttachmentNone struct {
	Type InstanceNetworkInterfaceAttachmentType `json:"type,omitempty" yaml:"type,omitempty"`
}

// InstanceNetworkInterfaceAttachment is describes an attachment of a `NetworkInterface` to an `Instance`, at the time the instance is created.
type InstanceNetworkInterfaceAttachment struct {
	// Params is the type definition for a Params.
	Params []NetworkInterfaceCreate `json:"params,omitempty" yaml:"params,omitempty"`
	// Type is the type definition for a Type.
	Type InstanceNetworkInterfaceAttachmentType `json:"type,omitempty" yaml:"type,omitempty"`
}

// InstanceResultsPage is a single page of results
type InstanceResultsPage struct {
	// Items is list of items on this page of results
	Items []Instance `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// InstanceSerialConsoleData is contents of an Instance's serial console buffer.
type InstanceSerialConsoleData struct {
	// Data is the bytes starting from the requested offset up to either the end of the buffer or the request's `max_bytes`. Provided as a u8 array rather than a string, as it may not be UTF-8.
	Data []string `json:"data,omitempty" yaml:"data,omitempty"`
	// LastByteOffset is the absolute offset since boot (suitable for use as `byte_offset` in a subsequent request) of the last byte returned in `data`.
	LastByteOffset int `json:"last_byte_offset,omitempty" yaml:"last_byte_offset,omitempty"`
}

// InstanceState is the instance is being created.
type InstanceState string

// IpKind is the kind of an external IP address for an instance
type IpKind string

// IpNet is the type definition for a IpNet.
type IpNet interface{}

// IpPool is identity-related metadata that's included in nearly all public API objects
type IpPool struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// IpPoolCreate is create-time parameters for an IP Pool.
//
// See [`IpPool`](crate::external_api::views::IpPool)
type IpPoolCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// IpPoolRange is the type definition for a IpPoolRange.
type IpPoolRange struct {
	Id          string     `json:"id,omitempty" yaml:"id,omitempty"`
	Range       IpRange    `json:"range,omitempty" yaml:"range,omitempty"`
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
}

// IpPoolRangeResultsPage is a single page of results
type IpPoolRangeResultsPage struct {
	// Items is list of items on this page of results
	Items []IpPoolRange `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// IpPoolResultsPage is a single page of results
type IpPoolResultsPage struct {
	// Items is list of items on this page of results
	Items []IpPool `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// IpPoolUpdate is parameters for updating an IP Pool
type IpPoolUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	Name        Name   `json:"name,omitempty" yaml:"name,omitempty"`
}

// IpRange is the type definition for a IpRange.
type IpRange interface{}

// Ipv4Net is an IPv4 subnet, including prefix and subnet mask
type Ipv4Net string

// Ipv4Range is a non-decreasing IPv4 address range, inclusive of both ends.
//
// The first address must be less than or equal to the last address.
type Ipv4Range struct {
	First string `json:"first,omitempty" yaml:"first,omitempty"`
	Last  string `json:"last,omitempty" yaml:"last,omitempty"`
}

// Ipv6Net is an IPv6 subnet, including prefix and subnet mask
type Ipv6Net string

// Ipv6Range is a non-decreasing IPv6 address range, inclusive of both ends.
//
// The first address must be less than or equal to the last address.
type Ipv6Range struct {
	First string `json:"first,omitempty" yaml:"first,omitempty"`
	Last  string `json:"last,omitempty" yaml:"last,omitempty"`
}

// L4PortRange is an inclusive-inclusive range of IP ports. The second port may be omitted to represent a single port
type L4PortRange string

// MacAddr is a Media Access Control address, in EUI-48 format
type MacAddr string

// Measurement is a `Measurement` is a timestamped datum from a single metric
type Measurement struct {
	// Datum is a `Datum` is a single sampled data point from a metric.
	Datum     Datum      `json:"datum,omitempty" yaml:"datum,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty" yaml:"timestamp,omitempty"`
}

// MeasurementResultsPage is a single page of results
type MeasurementResultsPage struct {
	// Items is list of items on this page of results
	Items []Measurement `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
type Name string

// NameOrId is the type definition for a NameOrId.
type NameOrId interface{}

// NameOrIdSortMode is sort in increasing order of "name"
type NameOrIdSortMode string

// NameSortMode is sort in increasing order of "name"
type NameSortMode string

// NetworkInterface is a `NetworkInterface` represents a virtual network interface device.
type NetworkInterface struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// InstanceId is the Instance to which the interface belongs.
	InstanceId string `json:"instance_id,omitempty" yaml:"instance_id,omitempty"`
	// Ip is the IP address assigned to this interface.
	Ip string `json:"ip,omitempty" yaml:"ip,omitempty"`
	// Mac is the MAC address assigned to this interface.
	Mac MacAddr `json:"mac,omitempty" yaml:"mac,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Primary is true if this interface is the primary for the instance to which it's attached.
	Primary bool `json:"primary,omitempty" yaml:"primary,omitempty"`
	// SubnetId is the subnet to which the interface belongs.
	SubnetId string `json:"subnet_id,omitempty" yaml:"subnet_id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// VpcId is the VPC to which the interface belongs.
	VpcId string `json:"vpc_id,omitempty" yaml:"vpc_id,omitempty"`
}

// NetworkInterfaceCreate is create-time parameters for a [`NetworkInterface`](omicron_common::api::external::NetworkInterface)
type NetworkInterfaceCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Ip is the IP address for the interface. One will be auto-assigned if not provided.
	Ip string `json:"ip,omitempty" yaml:"ip,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// SubnetName is the VPC Subnet in which to create the interface.
	SubnetName Name `json:"subnet_name,omitempty" yaml:"subnet_name,omitempty"`
	// VpcName is the VPC in which to create the interface.
	VpcName Name `json:"vpc_name,omitempty" yaml:"vpc_name,omitempty"`
}

// NetworkInterfaceResultsPage is a single page of results
type NetworkInterfaceResultsPage struct {
	// Items is list of items on this page of results
	Items []NetworkInterface `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// NetworkInterfaceUpdate is parameters for updating a [`NetworkInterface`](omicron_common::api::external::NetworkInterface).
//
// Note that modifying IP addresses for an interface is not yet supported, a new interface must be created instead.
type NetworkInterfaceUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	Name        Name   `json:"name,omitempty" yaml:"name,omitempty"`
	// Primary is make a secondary interface the instance's primary interface.
	//
	// If applied to a secondary interface, that interface will become the primary on the next reboot of the instance. Note that this may have implications for routing between instances, as the new primary interface will be on a distinct subnet from the previous primary interface.
	//
	// Note that this can only be used to select a new primary interface for an instance. Requests to change the primary interface into a secondary will return an error.
	Primary bool `json:"primary,omitempty" yaml:"primary,omitempty"`
}

// NodeName is unique name for a saga [`Node`]
//
// Each node requires a string name that's unique within its DAG.  The name is used to identify its output.  Nodes that depend on a given node (either directly or indirectly) can access the node's output using its name.
type NodeName string

// Password is passwords may be subject to additional constraints.
type Password string

// PhysicalDisk is client view of a [`PhysicalDisk`]
type PhysicalDisk struct {
	DiskType PhysicalDiskType `json:"disk_type,omitempty" yaml:"disk_type,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id     string `json:"id,omitempty" yaml:"id,omitempty"`
	Model  string `json:"model,omitempty" yaml:"model,omitempty"`
	Serial string `json:"serial,omitempty" yaml:"serial,omitempty"`
	// SledId is the sled to which this disk is attached, if any.
	SledId string `json:"sled_id,omitempty" yaml:"sled_id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	Vendor       string     `json:"vendor,omitempty" yaml:"vendor,omitempty"`
}

// PhysicalDiskResultsPage is a single page of results
type PhysicalDiskResultsPage struct {
	// Items is list of items on this page of results
	Items []PhysicalDisk `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// PhysicalDiskType is the type definition for a PhysicalDiskType.
type PhysicalDiskType string

// Project is client view of a [`Project`]
type Project struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// ProjectCreate is create-time parameters for a [`Project`](crate::external_api::views::Project)
type ProjectCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// ProjectResultsPage is a single page of results
type ProjectResultsPage struct {
	// Items is list of items on this page of results
	Items []Project `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// ProjectRole is the type definition for a ProjectRole.
type ProjectRole string

// ProjectRolePolicy is client view of a [`Policy`], which describes how this resource may be accessed
//
// Note that the Policy only describes access granted explicitly for this resource.  The policies of parent resources can also cause a user to have access to this resource.
type ProjectRolePolicy struct {
	// RoleAssignments is roles directly assigned on this resource
	RoleAssignments []ProjectRoleRoleAssignment `json:"role_assignments,omitempty" yaml:"role_assignments,omitempty"`
}

// ProjectRoleRoleAssignment is describes the assignment of a particular role on a particular resource to a particular identity (user, group, etc.)
//
// The resource is not part of this structure.  Rather, [`RoleAssignment`]s are put into a [`Policy`] and that Policy is applied to a particular resource.
type ProjectRoleRoleAssignment struct {
	IdentityId string `json:"identity_id,omitempty" yaml:"identity_id,omitempty"`
	// IdentityType is describes what kind of identity is described by an id
	IdentityType IdentityType `json:"identity_type,omitempty" yaml:"identity_type,omitempty"`
	RoleName     ProjectRole  `json:"role_name,omitempty" yaml:"role_name,omitempty"`
}

// ProjectUpdate is updateable properties of a [`Project`](crate::external_api::views::Project)
type ProjectUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	Name        Name   `json:"name,omitempty" yaml:"name,omitempty"`
}

// Rack is client view of an [`Rack`]
type Rack struct {
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// RackResultsPage is a single page of results
type RackResultsPage struct {
	// Items is list of items on this page of results
	Items []Rack `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Role is client view of a [`Role`]
type Role struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is role names consist of two string components separated by dot (".").
	Name RoleName `json:"name,omitempty" yaml:"name,omitempty"`
}

// RoleName is role names consist of two string components separated by dot (".").
type RoleName string

// RoleResultsPage is a single page of results
type RoleResultsPage struct {
	// Items is list of items on this page of results
	Items []Role `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// RouteDestinationType is the type definition for a RouteDestinationType.
type RouteDestinationType string

// RouteDestinationIp is route applies to traffic destined for a specific IP address
type RouteDestinationIp struct {
	Type  RouteDestinationType `json:"type,omitempty" yaml:"type,omitempty"`
	Value string               `json:"value,omitempty" yaml:"value,omitempty"`
}

// RouteDestinationIpNet is route applies to traffic destined for a specific IP subnet
type RouteDestinationIpNet struct {
	Type  RouteDestinationType `json:"type,omitempty" yaml:"type,omitempty"`
	Value IpNet                `json:"value,omitempty" yaml:"value,omitempty"`
}

// RouteDestinationVpc is route applies to traffic destined for the given VPC.
type RouteDestinationVpc struct {
	Type RouteDestinationType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// RouteDestinationSubnet is route applies to traffic
type RouteDestinationSubnet struct {
	Type RouteDestinationType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// RouteDestination is a `RouteDestination` is used to match traffic with a routing rule, on the destination of that traffic.
//
// When traffic is to be sent to a destination that is within a given `RouteDestination`, the corresponding [`RouterRoute`] applies, and traffic will be forward to the [`RouteTarget`] for that rule.
type RouteDestination struct {
	// Type is the type definition for a Type.
	Type RouteDestinationType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is the type definition for a Value.
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

// RouteTargetType is the type definition for a RouteTargetType.
type RouteTargetType string

// RouteTargetIp is forward traffic to a particular IP address.
type RouteTargetIp struct {
	Type  RouteTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	Value string          `json:"value,omitempty" yaml:"value,omitempty"`
}

// RouteTargetVpc is forward traffic to a VPC
type RouteTargetVpc struct {
	Type RouteTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// RouteTargetSubnet is forward traffic to a VPC Subnet
type RouteTargetSubnet struct {
	Type RouteTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// RouteTargetInstance is forward traffic to a specific instance
type RouteTargetInstance struct {
	Type RouteTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// RouteTargetInternetGateway is forward traffic to an internet gateway
type RouteTargetInternetGateway struct {
	Type RouteTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// RouteTarget is a `RouteTarget` describes the possible locations that traffic matching a route destination can be sent.
type RouteTarget struct {
	// Type is the type definition for a Type.
	Type RouteTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is the type definition for a Value.
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

// RouterRoute is a route defines a rule that governs where traffic should be sent based on its destination.
type RouterRoute struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Destination is a `RouteDestination` is used to match traffic with a routing rule, on the destination of that traffic.
	//
	// When traffic is to be sent to a destination that is within a given `RouteDestination`, the corresponding [`RouterRoute`] applies, and traffic will be forward to the [`RouteTarget`] for that rule.
	Destination RouteDestination `json:"destination,omitempty" yaml:"destination,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Kind is describes the kind of router. Set at creation. `read-only`
	Kind RouterRouteKind `json:"kind,omitempty" yaml:"kind,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Target is a `RouteTarget` describes the possible locations that traffic matching a route destination can be sent.
	Target RouteTarget `json:"target,omitempty" yaml:"target,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// VpcRouterId is the VPC Router to which the route belongs.
	VpcRouterId string `json:"vpc_router_id,omitempty" yaml:"vpc_router_id,omitempty"`
}

// RouterRouteCreate is create-time parameters for a [`omicron_common::api::external::RouterRoute`]
type RouterRouteCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Destination is a `RouteDestination` is used to match traffic with a routing rule, on the destination of that traffic.
	//
	// When traffic is to be sent to a destination that is within a given `RouteDestination`, the corresponding [`RouterRoute`] applies, and traffic will be forward to the [`RouteTarget`] for that rule.
	Destination RouteDestination `json:"destination,omitempty" yaml:"destination,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Target is a `RouteTarget` describes the possible locations that traffic matching a route destination can be sent.
	Target RouteTarget `json:"target,omitempty" yaml:"target,omitempty"`
}

// RouterRouteKind is determines the default destination of traffic, such as whether it goes to the internet or not.
//
// `Destination: An Internet Gateway` `Modifiable: true`
type RouterRouteKind string

// RouterRouteResultsPage is a single page of results
type RouterRouteResultsPage struct {
	// Items is list of items on this page of results
	Items []RouterRoute `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// RouterRouteUpdate is updateable properties of a [`omicron_common::api::external::RouterRoute`]
type RouterRouteUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Destination is a `RouteDestination` is used to match traffic with a routing rule, on the destination of that traffic.
	//
	// When traffic is to be sent to a destination that is within a given `RouteDestination`, the corresponding [`RouterRoute`] applies, and traffic will be forward to the [`RouteTarget`] for that rule.
	Destination RouteDestination `json:"destination,omitempty" yaml:"destination,omitempty"`
	Name        Name             `json:"name,omitempty" yaml:"name,omitempty"`
	// Target is a `RouteTarget` describes the possible locations that traffic matching a route destination can be sent.
	Target RouteTarget `json:"target,omitempty" yaml:"target,omitempty"`
}

// Saga is the type definition for a Saga.
type Saga struct {
	Id    string    `json:"id,omitempty" yaml:"id,omitempty"`
	State SagaState `json:"state,omitempty" yaml:"state,omitempty"`
}

// SagaErrorInfoError is the type definition for a SagaErrorInfoError.
type SagaErrorInfoError string

// SagaErrorInfoActionFailed is the type definition for a SagaErrorInfoActionFailed.
type SagaErrorInfoActionFailed struct {
	Error       SagaErrorInfoError `json:"error,omitempty" yaml:"error,omitempty"`
	SourceError interface{}        `json:"source_error,omitempty" yaml:"source_error,omitempty"`
}

// SagaErrorInfoDeserializeFailed is the type definition for a SagaErrorInfoDeserializeFailed.
type SagaErrorInfoDeserializeFailed struct {
	Error   SagaErrorInfoError `json:"error,omitempty" yaml:"error,omitempty"`
	Message string             `json:"message,omitempty" yaml:"message,omitempty"`
}

// SagaErrorInfoInjectedError is the type definition for a SagaErrorInfoInjectedError.
type SagaErrorInfoInjectedError struct {
	Error SagaErrorInfoError `json:"error,omitempty" yaml:"error,omitempty"`
}

// SagaErrorInfoSerializeFailed is the type definition for a SagaErrorInfoSerializeFailed.
type SagaErrorInfoSerializeFailed struct {
	Error   SagaErrorInfoError `json:"error,omitempty" yaml:"error,omitempty"`
	Message string             `json:"message,omitempty" yaml:"message,omitempty"`
}

// SagaErrorInfoSubsagaCreateFailed is the type definition for a SagaErrorInfoSubsagaCreateFailed.
type SagaErrorInfoSubsagaCreateFailed struct {
	Error   SagaErrorInfoError `json:"error,omitempty" yaml:"error,omitempty"`
	Message string             `json:"message,omitempty" yaml:"message,omitempty"`
}

// SagaErrorInfo is the type definition for a SagaErrorInfo.
type SagaErrorInfo struct {
	// Error is the type definition for a Error.
	Error SagaErrorInfoError `json:"error,omitempty" yaml:"error,omitempty"`
	// SourceError is the type definition for a SourceError.
	SourceError interface{} `json:"source_error,omitempty" yaml:"source_error,omitempty"`
	// Message is the type definition for a Message.
	Message string `json:"message,omitempty" yaml:"message,omitempty"`
}

// SagaResultsPage is a single page of results
type SagaResultsPage struct {
	// Items is list of items on this page of results
	Items []Saga `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// SagaStateState is the type definition for a SagaStateState.
type SagaStateState string

// SagaStateRunning is the type definition for a SagaStateRunning.
type SagaStateRunning struct {
	State SagaStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// SagaStateSucceeded is the type definition for a SagaStateSucceeded.
type SagaStateSucceeded struct {
	State SagaStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// SagaStateFailed is the type definition for a SagaStateFailed.
type SagaStateFailed struct {
	ErrorInfo SagaErrorInfo `json:"error_info,omitempty" yaml:"error_info,omitempty"`
	// ErrorNodeName is unique name for a saga [`Node`]
	//
	// Each node requires a string name that's unique within its DAG.  The name is used to identify its output.  Nodes that depend on a given node (either directly or indirectly) can access the node's output using its name.
	ErrorNodeName NodeName       `json:"error_node_name,omitempty" yaml:"error_node_name,omitempty"`
	State         SagaStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// SagaState is the type definition for a SagaState.
type SagaState struct {
	// State is the type definition for a State.
	State SagaStateState `json:"state,omitempty" yaml:"state,omitempty"`
	// ErrorInfo is the type definition for a ErrorInfo.
	ErrorInfo SagaErrorInfo `json:"error_info,omitempty" yaml:"error_info,omitempty"`
	// ErrorNodeName is unique name for a saga [`Node`]
	//
	// Each node requires a string name that's unique within its DAG.  The name is used to identify its output.  Nodes that depend on a given node (either directly or indirectly) can access the node's output using its name.
	ErrorNodeName NodeName `json:"error_node_name,omitempty" yaml:"error_node_name,omitempty"`
}

// SamlIdentityProvider is identity-related metadata that's included in nearly all public API objects
type SamlIdentityProvider struct {
	// AcsUrl is service provider endpoint where the response will be sent
	AcsUrl string `json:"acs_url,omitempty" yaml:"acs_url,omitempty"`
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// IdpEntityId is idp's entity id
	IdpEntityId string `json:"idp_entity_id,omitempty" yaml:"idp_entity_id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// PublicCert is optional request signing public certificate (base64 encoded der file)
	PublicCert string `json:"public_cert,omitempty" yaml:"public_cert,omitempty"`
	// SloUrl is service provider endpoint where the idp should send log out requests
	SloUrl string `json:"slo_url,omitempty" yaml:"slo_url,omitempty"`
	// SpClientId is sp's client id
	SpClientId string `json:"sp_client_id,omitempty" yaml:"sp_client_id,omitempty"`
	// TechnicalContactEmail is customer's technical contact for saml configuration
	TechnicalContactEmail string `json:"technical_contact_email,omitempty" yaml:"technical_contact_email,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// SamlIdentityProviderCreate is create-time identity-related parameters
type SamlIdentityProviderCreate struct {
	// AcsUrl is service provider endpoint where the response will be sent
	AcsUrl      string `json:"acs_url,omitempty" yaml:"acs_url,omitempty"`
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// GroupAttributeName is if set, SAML attributes with this name will be considered to denote a user's group membership, where the attribute value(s) should be a comma-separated list of group names.
	GroupAttributeName string `json:"group_attribute_name,omitempty" yaml:"group_attribute_name,omitempty"`
	// IdpEntityId is idp's entity id
	IdpEntityId string `json:"idp_entity_id,omitempty" yaml:"idp_entity_id,omitempty"`
	// IdpMetadataSource is the source of an identity provider metadata descriptor
	IdpMetadataSource IdpMetadataSource `json:"idp_metadata_source,omitempty" yaml:"idp_metadata_source,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// SigningKeypair is optional request signing key pair
	SigningKeypair DerEncodedKeyPair `json:"signing_keypair,omitempty" yaml:"signing_keypair,omitempty"`
	// SloUrl is service provider endpoint where the idp should send log out requests
	SloUrl string `json:"slo_url,omitempty" yaml:"slo_url,omitempty"`
	// SpClientId is sp's client id
	SpClientId string `json:"sp_client_id,omitempty" yaml:"sp_client_id,omitempty"`
	// TechnicalContactEmail is customer's technical contact for saml configuration
	TechnicalContactEmail string `json:"technical_contact_email,omitempty" yaml:"technical_contact_email,omitempty"`
}

// SemverVersion is the type definition for a SemverVersion.
type SemverVersion string

// ServiceUsingCertificate is this certificate is intended for access to the external API.
type ServiceUsingCertificate string

// Silo is client view of a ['Silo']
type Silo struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Discoverable is a silo where discoverable is false can be retrieved only by its id - it will not be part of the "list all silos" output.
	Discoverable bool `json:"discoverable,omitempty" yaml:"discoverable,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// IdentityMode is how users and groups are managed in this Silo
	IdentityMode SiloIdentityMode `json:"identity_mode,omitempty" yaml:"identity_mode,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// SiloCreate is create-time parameters for a [`Silo`](crate::external_api::views::Silo)
type SiloCreate struct {
	// AdminGroupName is if set, this group will be created during Silo creation and granted the "Silo Admin" role. Identity providers can assert that users belong to this group and those users can log in and further initialize the Silo.
	//
	// Note that if configuring a SAML based identity provider, group_attribute_name must be set for users to be considered part of a group. See [`SamlIdentityProviderCreate`] for more information.
	AdminGroupName string `json:"admin_group_name,omitempty" yaml:"admin_group_name,omitempty"`
	Description    string `json:"description,omitempty" yaml:"description,omitempty"`
	Discoverable   bool   `json:"discoverable,omitempty" yaml:"discoverable,omitempty"`
	// IdentityMode is describes how identities are managed and users are authenticated in this Silo
	IdentityMode SiloIdentityMode `json:"identity_mode,omitempty" yaml:"identity_mode,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// SiloIdentityMode is users are authenticated with SAML using an external authentication provider.  The system updates information about users and groups only during successful authentication (i.e,. "JIT provisioning" of users and groups).
type SiloIdentityMode string

// SiloResultsPage is a single page of results
type SiloResultsPage struct {
	// Items is list of items on this page of results
	Items []Silo `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// SiloRole is the type definition for a SiloRole.
type SiloRole string

// SiloRolePolicy is client view of a [`Policy`], which describes how this resource may be accessed
//
// Note that the Policy only describes access granted explicitly for this resource.  The policies of parent resources can also cause a user to have access to this resource.
type SiloRolePolicy struct {
	// RoleAssignments is roles directly assigned on this resource
	RoleAssignments []SiloRoleRoleAssignment `json:"role_assignments,omitempty" yaml:"role_assignments,omitempty"`
}

// SiloRoleRoleAssignment is describes the assignment of a particular role on a particular resource to a particular identity (user, group, etc.)
//
// The resource is not part of this structure.  Rather, [`RoleAssignment`]s are put into a [`Policy`] and that Policy is applied to a particular resource.
type SiloRoleRoleAssignment struct {
	IdentityId string `json:"identity_id,omitempty" yaml:"identity_id,omitempty"`
	// IdentityType is describes what kind of identity is described by an id
	IdentityType IdentityType `json:"identity_type,omitempty" yaml:"identity_type,omitempty"`
	RoleName     SiloRole     `json:"role_name,omitempty" yaml:"role_name,omitempty"`
}

// Sled is an operator's view of a Sled.
type Sled struct {
	// Baseboard is properties that should uniquely identify a Sled.
	Baseboard Baseboard `json:"baseboard,omitempty" yaml:"baseboard,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// RackId is the rack to which this Sled is currently attached
	RackId string `json:"rack_id,omitempty" yaml:"rack_id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// UsableHardwareThreads is the number of hardware threads which can execute on this sled
	UsableHardwareThreads int `json:"usable_hardware_threads,omitempty" yaml:"usable_hardware_threads,omitempty"`
	// UsablePhysicalRam is amount of RAM which may be used by the Sled's OS
	UsablePhysicalRam ByteCount `json:"usable_physical_ram,omitempty" yaml:"usable_physical_ram,omitempty"`
}

// SledResultsPage is a single page of results
type SledResultsPage struct {
	// Items is list of items on this page of results
	Items []Sled `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Snapshot is client view of a Snapshot
type Snapshot struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	DiskId      string `json:"disk_id,omitempty" yaml:"disk_id,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name      Name   `json:"name,omitempty" yaml:"name,omitempty"`
	ProjectId string `json:"project_id,omitempty" yaml:"project_id,omitempty"`
	// Size is a count of bytes, typically used either for memory or storage capacity
	//
	// The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.
	Size  ByteCount     `json:"size,omitempty" yaml:"size,omitempty"`
	State SnapshotState `json:"state,omitempty" yaml:"state,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// SnapshotCreate is create-time parameters for a [`Snapshot`](crate::external_api::views::Snapshot)
type SnapshotCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Disk is the name of the disk to be snapshotted
	Disk Name `json:"disk,omitempty" yaml:"disk,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// SnapshotResultsPage is a single page of results
type SnapshotResultsPage struct {
	// Items is list of items on this page of results
	Items []Snapshot `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// SnapshotState is the type definition for a SnapshotState.
type SnapshotState string

// SpoofLoginBody is the type definition for a SpoofLoginBody.
type SpoofLoginBody struct {
	Username string `json:"username,omitempty" yaml:"username,omitempty"`
}

// SshKey is client view of a [`SshKey`]
type SshKey struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// PublicKey is sSH public key, e.g., `"ssh-ed25519 AAAAC3NzaC..."`
	PublicKey string `json:"public_key,omitempty" yaml:"public_key,omitempty"`
	// SiloUserId is the user to whom this key belongs
	SiloUserId string `json:"silo_user_id,omitempty" yaml:"silo_user_id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// SshKeyCreate is create-time parameters for an [`SshKey`](crate::external_api::views::SshKey)
type SshKeyCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// PublicKey is sSH public key, e.g., `"ssh-ed25519 AAAAC3NzaC..."`
	PublicKey string `json:"public_key,omitempty" yaml:"public_key,omitempty"`
}

// SshKeyResultsPage is a single page of results
type SshKeyResultsPage struct {
	// Items is list of items on this page of results
	Items []SshKey `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// SystemMetricName is the type definition for a SystemMetricName.
type SystemMetricName string

// SystemUpdate is identity-related metadata that's included in "asset" public API objects (which generally have no name or description)
type SystemUpdate struct {
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time    `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	Version      SemverVersion `json:"version,omitempty" yaml:"version,omitempty"`
}

// SystemUpdateResultsPage is a single page of results
type SystemUpdateResultsPage struct {
	// Items is list of items on this page of results
	Items []SystemUpdate `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// SystemUpdateStart is the type definition for a SystemUpdateStart.
type SystemUpdateStart struct {
	Version SemverVersion `json:"version,omitempty" yaml:"version,omitempty"`
}

// SystemVersion is the type definition for a SystemVersion.
type SystemVersion struct {
	Status       UpdateStatus `json:"status,omitempty" yaml:"status,omitempty"`
	VersionRange VersionRange `json:"version_range,omitempty" yaml:"version_range,omitempty"`
}

// UpdateDeployment is identity-related metadata that's included in "asset" public API objects (which generally have no name or description)
type UpdateDeployment struct {
	// Id is unique, immutable, system-controlled identifier for each resource
	Id     string       `json:"id,omitempty" yaml:"id,omitempty"`
	Status UpdateStatus `json:"status,omitempty" yaml:"status,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time    `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	Version      SemverVersion `json:"version,omitempty" yaml:"version,omitempty"`
}

// UpdateDeploymentResultsPage is a single page of results
type UpdateDeploymentResultsPage struct {
	// Items is list of items on this page of results
	Items []UpdateDeployment `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// UpdateStatusStatus is the type definition for a UpdateStatusStatus.
type UpdateStatusStatus string

// UpdateStatusUpdating is the type definition for a UpdateStatusUpdating.
type UpdateStatusUpdating struct {
	Status UpdateStatusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// UpdateStatusSteady is the type definition for a UpdateStatusSteady.
type UpdateStatusSteady struct {
	Status UpdateStatusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// UpdateStatus is the type definition for a UpdateStatus.
type UpdateStatus struct {
	// Status is the type definition for a Status.
	Status UpdateStatusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// UpdateableComponent is identity-related metadata that's included in "asset" public API objects (which generally have no name or description)
type UpdateableComponent struct {
	ComponentType UpdateableComponentType `json:"component_type,omitempty" yaml:"component_type,omitempty"`
	DeviceId      string                  `json:"device_id,omitempty" yaml:"device_id,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id            string        `json:"id,omitempty" yaml:"id,omitempty"`
	Status        UpdateStatus  `json:"status,omitempty" yaml:"status,omitempty"`
	SystemVersion SemverVersion `json:"system_version,omitempty" yaml:"system_version,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time    `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	Version      SemverVersion `json:"version,omitempty" yaml:"version,omitempty"`
}

// UpdateableComponentResultsPage is a single page of results
type UpdateableComponentResultsPage struct {
	// Items is list of items on this page of results
	Items []UpdateableComponent `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// UpdateableComponentType is the type definition for a UpdateableComponentType.
type UpdateableComponentType string

// User is client view of a [`User`]
type User struct {
	// DisplayName is human-readable name that can identify the user
	DisplayName string `json:"display_name,omitempty" yaml:"display_name,omitempty"`
	Id          string `json:"id,omitempty" yaml:"id,omitempty"`
	// SiloId is uuid of the silo to which this user belongs
	SiloId string `json:"silo_id,omitempty" yaml:"silo_id,omitempty"`
}

// UserBuiltin is client view of a [`UserBuiltin`]
type UserBuiltin struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// UserBuiltinResultsPage is a single page of results
type UserBuiltinResultsPage struct {
	// Items is list of items on this page of results
	Items []UserBuiltin `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// UserCreate is create-time parameters for a [`User`](crate::external_api::views::User)
type UserCreate struct {
	// ExternalId is username used to log in
	ExternalId UserId `json:"external_id,omitempty" yaml:"external_id,omitempty"`
	// Password is password used to log in
	Password UserPassword `json:"password,omitempty" yaml:"password,omitempty"`
}

// UserId is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
type UserId string

// UserPasswordUserPasswordValue is the type definition for a UserPasswordUserPasswordValue.
type UserPasswordUserPasswordValue string

// UserPasswordPassword is sets the user's password to the provided value
type UserPasswordPassword struct {
	// Details is passwords may be subject to additional constraints.
	Details           Password                      `json:"details,omitempty" yaml:"details,omitempty"`
	UserPasswordValue UserPasswordUserPasswordValue `json:"user_password_value,omitempty" yaml:"user_password_value,omitempty"`
}

// UserPasswordInvalidPassword is invalidates any current password (disabling password authentication)
type UserPasswordInvalidPassword struct {
	UserPasswordValue UserPasswordUserPasswordValue `json:"user_password_value,omitempty" yaml:"user_password_value,omitempty"`
}

// UserPassword is parameters for setting a user's password
type UserPassword struct {
	// Details is passwords may be subject to additional constraints.
	Details Password `json:"details,omitempty" yaml:"details,omitempty"`
	// UserPasswordValue is the type definition for a UserPasswordValue.
	UserPasswordValue UserPasswordUserPasswordValue `json:"user_password_value,omitempty" yaml:"user_password_value,omitempty"`
}

// UserResultsPage is a single page of results
type UserResultsPage struct {
	// Items is list of items on this page of results
	Items []User `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// UsernamePasswordCredentials is credentials for local user login
type UsernamePasswordCredentials struct {
	// Password is passwords may be subject to additional constraints.
	Password Password `json:"password,omitempty" yaml:"password,omitempty"`
	// Username is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Username UserId `json:"username,omitempty" yaml:"username,omitempty"`
}

// VersionRange is the type definition for a VersionRange.
type VersionRange struct {
	High SemverVersion `json:"high,omitempty" yaml:"high,omitempty"`
	Low  SemverVersion `json:"low,omitempty" yaml:"low,omitempty"`
}

// Vpc is client view of a [`Vpc`]
type Vpc struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// DnsName is the name used for the VPC in DNS.
	DnsName Name `json:"dns_name,omitempty" yaml:"dns_name,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Ipv6Prefix is the unique local IPv6 address range for subnets in this VPC
	Ipv6Prefix Ipv6Net `json:"ipv6_prefix,omitempty" yaml:"ipv6_prefix,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// ProjectId is id for the project containing this VPC
	ProjectId string `json:"project_id,omitempty" yaml:"project_id,omitempty"`
	// SystemRouterId is id for the system router where subnet default routes are registered
	SystemRouterId string `json:"system_router_id,omitempty" yaml:"system_router_id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// VpcCreate is create-time parameters for a [`Vpc`](crate::external_api::views::Vpc)
type VpcCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// DnsName is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	DnsName Name `json:"dns_name,omitempty" yaml:"dns_name,omitempty"`
	// Ipv6Prefix is the IPv6 prefix for this VPC.
	//
	// All IPv6 subnets created from this VPC must be taken from this range, which sould be a Unique Local Address in the range `fd00::/48`. The default VPC Subnet will have the first `/64` range from this prefix.
	Ipv6Prefix Ipv6Net `json:"ipv6_prefix,omitempty" yaml:"ipv6_prefix,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// VpcFirewallRule is a single rule in a VPC firewall
type VpcFirewallRule struct {
	// Action is whether traffic matching the rule should be allowed or dropped
	Action VpcFirewallRuleAction `json:"action,omitempty" yaml:"action,omitempty"`
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Direction is whether this rule is for incoming or outgoing traffic
	Direction VpcFirewallRuleDirection `json:"direction,omitempty" yaml:"direction,omitempty"`
	// Filters is reductions on the scope of the rule
	Filters VpcFirewallRuleFilter `json:"filters,omitempty" yaml:"filters,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Priority is the relative priority of this rule
	Priority int `json:"priority,omitempty" yaml:"priority,omitempty"`
	// Status is whether this rule is in effect
	Status VpcFirewallRuleStatus `json:"status,omitempty" yaml:"status,omitempty"`
	// Targets is list of sets of instances that the rule applies to
	Targets []VpcFirewallRuleTarget `json:"targets,omitempty" yaml:"targets,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// VpcId is the VPC to which this rule belongs
	VpcId string `json:"vpc_id,omitempty" yaml:"vpc_id,omitempty"`
}

// VpcFirewallRuleAction is the type definition for a VpcFirewallRuleAction.
type VpcFirewallRuleAction string

// VpcFirewallRuleDirection is the type definition for a VpcFirewallRuleDirection.
type VpcFirewallRuleDirection string

// VpcFirewallRuleFilter is filter for a firewall rule. A given packet must match every field that is present for the rule to apply to it. A packet matches a field if any entry in that field matches the packet.
type VpcFirewallRuleFilter struct {
	// Hosts is if present, the sources (if incoming) or destinations (if outgoing) this rule applies to.
	Hosts []VpcFirewallRuleHostFilter `json:"hosts,omitempty" yaml:"hosts,omitempty"`
	// Ports is if present, the destination ports this rule applies to.
	Ports []L4PortRange `json:"ports,omitempty" yaml:"ports,omitempty"`
	// Protocols is if present, the networking protocols this rule applies to.
	Protocols []VpcFirewallRuleProtocol `json:"protocols,omitempty" yaml:"protocols,omitempty"`
}

// VpcFirewallRuleHostFilterType is the type definition for a VpcFirewallRuleHostFilterType.
type VpcFirewallRuleHostFilterType string

// VpcFirewallRuleHostFilterVpc is the rule applies to traffic from/to all instances in the VPC
type VpcFirewallRuleHostFilterVpc struct {
	Type VpcFirewallRuleHostFilterType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleHostFilterSubnet is the rule applies to traffic from/to all instances in the VPC Subnet
type VpcFirewallRuleHostFilterSubnet struct {
	Type VpcFirewallRuleHostFilterType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleHostFilterInstance is the rule applies to traffic from/to this specific instance
type VpcFirewallRuleHostFilterInstance struct {
	Type VpcFirewallRuleHostFilterType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleHostFilterIp is the rule applies to traffic from/to a specific IP address
type VpcFirewallRuleHostFilterIp struct {
	Type  VpcFirewallRuleHostFilterType `json:"type,omitempty" yaml:"type,omitempty"`
	Value string                        `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleHostFilterIpNet is the rule applies to traffic from/to a specific IP subnet
type VpcFirewallRuleHostFilterIpNet struct {
	Type  VpcFirewallRuleHostFilterType `json:"type,omitempty" yaml:"type,omitempty"`
	Value IpNet                         `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleHostFilter is the `VpcFirewallRuleHostFilter` is used to filter traffic on the basis of its source or destination host.
type VpcFirewallRuleHostFilter struct {
	// Type is the type definition for a Type.
	Type VpcFirewallRuleHostFilterType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleProtocol is the protocols that may be specified in a firewall rule's filter
type VpcFirewallRuleProtocol string

// VpcFirewallRuleStatus is the type definition for a VpcFirewallRuleStatus.
type VpcFirewallRuleStatus string

// VpcFirewallRuleTargetType is the type definition for a VpcFirewallRuleTargetType.
type VpcFirewallRuleTargetType string

// VpcFirewallRuleTargetVpc is the rule applies to all instances in the VPC
type VpcFirewallRuleTargetVpc struct {
	Type VpcFirewallRuleTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleTargetSubnet is the rule applies to all instances in the VPC Subnet
type VpcFirewallRuleTargetSubnet struct {
	Type VpcFirewallRuleTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleTargetInstance is the rule applies to this specific instance
type VpcFirewallRuleTargetInstance struct {
	Type VpcFirewallRuleTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleTargetIp is the rule applies to a specific IP address
type VpcFirewallRuleTargetIp struct {
	Type  VpcFirewallRuleTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	Value string                    `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleTargetIpNet is the rule applies to a specific IP subnet
type VpcFirewallRuleTargetIpNet struct {
	Type  VpcFirewallRuleTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	Value IpNet                     `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleTarget is a `VpcFirewallRuleTarget` is used to specify the set of [`Instance`]s to which a firewall rule applies.
type VpcFirewallRuleTarget struct {
	// Type is the type definition for a Type.
	Type VpcFirewallRuleTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleUpdate is a single rule in a VPC firewall
type VpcFirewallRuleUpdate struct {
	// Action is whether traffic matching the rule should be allowed or dropped
	Action VpcFirewallRuleAction `json:"action,omitempty" yaml:"action,omitempty"`
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Direction is whether this rule is for incoming or outgoing traffic
	Direction VpcFirewallRuleDirection `json:"direction,omitempty" yaml:"direction,omitempty"`
	// Filters is reductions on the scope of the rule
	Filters VpcFirewallRuleFilter `json:"filters,omitempty" yaml:"filters,omitempty"`
	// Name is name of the rule, unique to this VPC
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Priority is the relative priority of this rule
	Priority int `json:"priority,omitempty" yaml:"priority,omitempty"`
	// Status is whether this rule is in effect
	Status VpcFirewallRuleStatus `json:"status,omitempty" yaml:"status,omitempty"`
	// Targets is list of sets of instances that the rule applies to
	Targets []VpcFirewallRuleTarget `json:"targets,omitempty" yaml:"targets,omitempty"`
}

// VpcFirewallRuleUpdateParams is updateable properties of a `Vpc`'s firewall Note that VpcFirewallRules are implicitly created along with a Vpc, so there is no explicit creation.
type VpcFirewallRuleUpdateParams struct {
	Rules []VpcFirewallRuleUpdate `json:"rules,omitempty" yaml:"rules,omitempty"`
}

// VpcFirewallRules is collection of a Vpc's firewall rules
type VpcFirewallRules struct {
	Rules []VpcFirewallRule `json:"rules,omitempty" yaml:"rules,omitempty"`
}

// VpcResultsPage is a single page of results
type VpcResultsPage struct {
	// Items is list of items on this page of results
	Items []Vpc `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// VpcRouter is a VPC router defines a series of rules that indicate where traffic should be sent depending on its destination.
type VpcRouter struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id   string        `json:"id,omitempty" yaml:"id,omitempty"`
	Kind VpcRouterKind `json:"kind,omitempty" yaml:"kind,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// VpcId is the VPC to which the router belongs.
	VpcId string `json:"vpc_id,omitempty" yaml:"vpc_id,omitempty"`
}

// VpcRouterCreate is create-time parameters for a [`VpcRouter`](crate::external_api::views::VpcRouter)
type VpcRouterCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// VpcRouterKind is the type definition for a VpcRouterKind.
type VpcRouterKind string

// VpcRouterResultsPage is a single page of results
type VpcRouterResultsPage struct {
	// Items is list of items on this page of results
	Items []VpcRouter `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// VpcRouterUpdate is updateable properties of a [`VpcRouter`](crate::external_api::views::VpcRouter)
type VpcRouterUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	Name        Name   `json:"name,omitempty" yaml:"name,omitempty"`
}

// VpcSubnet is a VPC subnet represents a logical grouping for instances that allows network traffic between them, within a IPv4 subnetwork or optionall an IPv6 subnetwork.
type VpcSubnet struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Ipv4Block is the IPv4 subnet CIDR block.
	Ipv4Block Ipv4Net `json:"ipv4_block,omitempty" yaml:"ipv4_block,omitempty"`
	// Ipv6Block is the IPv6 subnet CIDR block.
	Ipv6Block Ipv6Net `json:"ipv6_block,omitempty" yaml:"ipv6_block,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// VpcId is the VPC to which the subnet belongs.
	VpcId string `json:"vpc_id,omitempty" yaml:"vpc_id,omitempty"`
}

// VpcSubnetCreate is create-time parameters for a [`VpcSubnet`](crate::external_api::views::VpcSubnet)
type VpcSubnetCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Ipv4Block is the IPv4 address range for this subnet.
	//
	// It must be allocated from an RFC 1918 private address range, and must not overlap with any other existing subnet in the VPC.
	Ipv4Block Ipv4Net `json:"ipv4_block,omitempty" yaml:"ipv4_block,omitempty"`
	// Ipv6Block is the IPv6 address range for this subnet.
	//
	// It must be allocated from the RFC 4193 Unique Local Address range, with the prefix equal to the parent VPC's prefix. A random `/64` block will be assigned if one is not provided. It must not overlap with any existing subnet in the VPC.
	Ipv6Block Ipv6Net `json:"ipv6_block,omitempty" yaml:"ipv6_block,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// VpcSubnetResultsPage is a single page of results
type VpcSubnetResultsPage struct {
	// Items is list of items on this page of results
	Items []VpcSubnet `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// VpcSubnetUpdate is updateable properties of a [`VpcSubnet`](crate::external_api::views::VpcSubnet)
type VpcSubnetUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	Name        Name   `json:"name,omitempty" yaml:"name,omitempty"`
}

// VpcUpdate is updateable properties of a [`Vpc`](crate::external_api::views::Vpc)
type VpcUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	DnsName     Name   `json:"dns_name,omitempty" yaml:"dns_name,omitempty"`
	Name        Name   `json:"name,omitempty" yaml:"name,omitempty"`
}

// LoginLocalParams is the request parameters for LoginLocal
type LoginLocalParams struct {
	SiloName Name `json:"silo_name,omitempty" yaml:"silo_name,omitempty"`
}

// LoginSamlBeginParams is the request parameters for LoginSamlBegin
type LoginSamlBeginParams struct {
	ProviderName Name `json:"provider_name,omitempty" yaml:"provider_name,omitempty"`
	SiloName     Name `json:"silo_name,omitempty" yaml:"silo_name,omitempty"`
}

// LoginSamlParams is the request parameters for LoginSaml
type LoginSamlParams struct {
	ProviderName Name `json:"provider_name,omitempty" yaml:"provider_name,omitempty"`
	SiloName     Name `json:"silo_name,omitempty" yaml:"silo_name,omitempty"`
}

// SystemImageViewByIdParams is the request parameters for SystemImageViewById
type SystemImageViewByIdParams struct {
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
}

// SiloViewByIdParams is the request parameters for SiloViewById
type SiloViewByIdParams struct {
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
}

// PhysicalDiskListParams is the request parameters for PhysicalDiskList
type PhysicalDiskListParams struct {
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// RackListParams is the request parameters for RackList
type RackListParams struct {
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// RackViewParams is the request parameters for RackView
type RackViewParams struct {
	RackId string `json:"rack_id,omitempty" yaml:"rack_id,omitempty"`
}

// SledListParams is the request parameters for SledList
type SledListParams struct {
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// SledViewParams is the request parameters for SledView
type SledViewParams struct {
	SledId string `json:"sled_id,omitempty" yaml:"sled_id,omitempty"`
}

// SledPhysicalDiskListParams is the request parameters for SledPhysicalDiskList
type SledPhysicalDiskListParams struct {
	SledId    string     `json:"sled_id,omitempty" yaml:"sled_id,omitempty"`
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// SystemImageListParams is the request parameters for SystemImageList
type SystemImageListParams struct {
	Limit     int          `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string       `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    NameSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// SystemImageDeleteParams is the request parameters for SystemImageDelete
type SystemImageDeleteParams struct {
	ImageName Name `json:"image_name,omitempty" yaml:"image_name,omitempty"`
}

// SystemImageViewParams is the request parameters for SystemImageView
type SystemImageViewParams struct {
	ImageName Name `json:"image_name,omitempty" yaml:"image_name,omitempty"`
}

// SagaListParams is the request parameters for SagaList
type SagaListParams struct {
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// SagaViewParams is the request parameters for SagaView
type SagaViewParams struct {
	SagaId string `json:"saga_id,omitempty" yaml:"saga_id,omitempty"`
}

// SiloListParams is the request parameters for SiloList
type SiloListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// SiloDeleteParams is the request parameters for SiloDelete
type SiloDeleteParams struct {
	SiloName Name `json:"silo_name,omitempty" yaml:"silo_name,omitempty"`
}

// SiloViewParams is the request parameters for SiloView
type SiloViewParams struct {
	SiloName Name `json:"silo_name,omitempty" yaml:"silo_name,omitempty"`
}

// SiloPolicyViewParams is the request parameters for SiloPolicyView
type SiloPolicyViewParams struct {
	SiloName Name `json:"silo_name,omitempty" yaml:"silo_name,omitempty"`
}

// SiloPolicyUpdateParams is the request parameters for SiloPolicyUpdate
type SiloPolicyUpdateParams struct {
	SiloName Name `json:"silo_name,omitempty" yaml:"silo_name,omitempty"`
}

// DiskListParams is the request parameters for DiskList
type DiskListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Project   NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// DiskCreateParams is the request parameters for DiskCreate
type DiskCreateParams struct {
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// DiskDeleteParams is the request parameters for DiskDelete
type DiskDeleteParams struct {
	Disk    NameOrId `json:"disk,omitempty" yaml:"disk,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// DiskViewParams is the request parameters for DiskView
type DiskViewParams struct {
	Disk    NameOrId `json:"disk,omitempty" yaml:"disk,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// DiskMetricsListParams is the request parameters for DiskMetricsList
type DiskMetricsListParams struct {
	Disk      NameOrId       `json:"disk,omitempty" yaml:"disk,omitempty"`
	Metric    DiskMetricName `json:"metric,omitempty" yaml:"metric,omitempty"`
	EndTime   *time.Time     `json:"end_time,omitempty" yaml:"end_time,omitempty"`
	Limit     int            `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string         `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	StartTime *time.Time     `json:"start_time,omitempty" yaml:"start_time,omitempty"`
	Project   NameOrId       `json:"project,omitempty" yaml:"project,omitempty"`
}

// GroupListV1Params is the request parameters for GroupListV1
type GroupListV1Params struct {
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// GroupViewParams is the request parameters for GroupView
type GroupViewParams struct {
	Group string `json:"group,omitempty" yaml:"group,omitempty"`
}

// ImageListParams is the request parameters for ImageList
type ImageListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Project   NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// ImageCreateParams is the request parameters for ImageCreate
type ImageCreateParams struct {
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// ImageDeleteParams is the request parameters for ImageDelete
type ImageDeleteParams struct {
	Image   NameOrId `json:"image,omitempty" yaml:"image,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// ImageViewParams is the request parameters for ImageView
type ImageViewParams struct {
	Image   NameOrId `json:"image,omitempty" yaml:"image,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// InstanceListParams is the request parameters for InstanceList
type InstanceListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Project   NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// InstanceCreateParams is the request parameters for InstanceCreate
type InstanceCreateParams struct {
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// InstanceDeleteParams is the request parameters for InstanceDelete
type InstanceDeleteParams struct {
	Project  NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Instance NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
}

// InstanceViewParams is the request parameters for InstanceView
type InstanceViewParams struct {
	Project  NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Instance NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
}

// InstanceDiskListParams is the request parameters for InstanceDiskList
type InstanceDiskListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Project   NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
	Instance  NameOrId         `json:"instance,omitempty" yaml:"instance,omitempty"`
}

// InstanceDiskAttachParams is the request parameters for InstanceDiskAttach
type InstanceDiskAttachParams struct {
	Instance NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
	Project  NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// InstanceDiskDetachParams is the request parameters for InstanceDiskDetach
type InstanceDiskDetachParams struct {
	Instance NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
	Project  NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// InstanceExternalIpListParams is the request parameters for InstanceExternalIpList
type InstanceExternalIpListParams struct {
	Project  NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Instance NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
}

// InstanceMigrateParams is the request parameters for InstanceMigrate
type InstanceMigrateParams struct {
	Project  NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Instance NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
}

// InstanceRebootParams is the request parameters for InstanceReboot
type InstanceRebootParams struct {
	Project  NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Instance NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
}

// InstanceSerialConsoleParams is the request parameters for InstanceSerialConsole
type InstanceSerialConsoleParams struct {
	Instance   NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
	FromStart  int      `json:"from_start,omitempty" yaml:"from_start,omitempty"`
	MaxBytes   int      `json:"max_bytes,omitempty" yaml:"max_bytes,omitempty"`
	MostRecent int      `json:"most_recent,omitempty" yaml:"most_recent,omitempty"`
	Project    NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// InstanceSerialConsoleStreamParams is the request parameters for InstanceSerialConsoleStream
type InstanceSerialConsoleStreamParams struct {
	Instance NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
	Project  NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// InstanceStartParams is the request parameters for InstanceStart
type InstanceStartParams struct {
	Project  NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Instance NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
}

// InstanceStopParams is the request parameters for InstanceStop
type InstanceStopParams struct {
	Project  NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Instance NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
}

// CurrentUserGroupsParams is the request parameters for CurrentUserGroups
type CurrentUserGroupsParams struct {
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// CurrentUserSshKeyListParams is the request parameters for CurrentUserSshKeyList
type CurrentUserSshKeyListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// CurrentUserSshKeyDeleteParams is the request parameters for CurrentUserSshKeyDelete
type CurrentUserSshKeyDeleteParams struct {
	SshKey NameOrId `json:"ssh_key,omitempty" yaml:"ssh_key,omitempty"`
}

// CurrentUserSshKeyViewParams is the request parameters for CurrentUserSshKeyView
type CurrentUserSshKeyViewParams struct {
	SshKey NameOrId `json:"ssh_key,omitempty" yaml:"ssh_key,omitempty"`
}

// InstanceNetworkInterfaceListParams is the request parameters for InstanceNetworkInterfaceList
type InstanceNetworkInterfaceListParams struct {
	Instance  NameOrId         `json:"instance,omitempty" yaml:"instance,omitempty"`
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Project   NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// InstanceNetworkInterfaceCreateParams is the request parameters for InstanceNetworkInterfaceCreate
type InstanceNetworkInterfaceCreateParams struct {
	Instance NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
	Project  NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// InstanceNetworkInterfaceDeleteParams is the request parameters for InstanceNetworkInterfaceDelete
type InstanceNetworkInterfaceDeleteParams struct {
	Interface NameOrId `json:"interface,omitempty" yaml:"interface,omitempty"`
	Instance  NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
	Project   NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// InstanceNetworkInterfaceViewParams is the request parameters for InstanceNetworkInterfaceView
type InstanceNetworkInterfaceViewParams struct {
	Interface NameOrId `json:"interface,omitempty" yaml:"interface,omitempty"`
	Instance  NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
	Project   NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// InstanceNetworkInterfaceUpdateParams is the request parameters for InstanceNetworkInterfaceUpdate
type InstanceNetworkInterfaceUpdateParams struct {
	Interface NameOrId `json:"interface,omitempty" yaml:"interface,omitempty"`
	Instance  NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
	Project   NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// ProjectListParams is the request parameters for ProjectList
type ProjectListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// ProjectDeleteParams is the request parameters for ProjectDelete
type ProjectDeleteParams struct {
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// ProjectViewParams is the request parameters for ProjectView
type ProjectViewParams struct {
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// ProjectUpdateParams is the request parameters for ProjectUpdate
type ProjectUpdateParams struct {
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// ProjectPolicyViewParams is the request parameters for ProjectPolicyView
type ProjectPolicyViewParams struct {
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// ProjectPolicyUpdateParams is the request parameters for ProjectPolicyUpdate
type ProjectPolicyUpdateParams struct {
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// SnapshotListParams is the request parameters for SnapshotList
type SnapshotListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Project   NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// SnapshotCreateParams is the request parameters for SnapshotCreate
type SnapshotCreateParams struct {
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// SnapshotDeleteParams is the request parameters for SnapshotDelete
type SnapshotDeleteParams struct {
	Snapshot NameOrId `json:"snapshot,omitempty" yaml:"snapshot,omitempty"`
	Project  NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// SnapshotViewParams is the request parameters for SnapshotView
type SnapshotViewParams struct {
	Snapshot NameOrId `json:"snapshot,omitempty" yaml:"snapshot,omitempty"`
	Project  NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// CertificateListParams is the request parameters for CertificateList
type CertificateListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// CertificateDeleteParams is the request parameters for CertificateDelete
type CertificateDeleteParams struct {
	Certificate NameOrId `json:"certificate,omitempty" yaml:"certificate,omitempty"`
}

// CertificateViewParams is the request parameters for CertificateView
type CertificateViewParams struct {
	Certificate NameOrId `json:"certificate,omitempty" yaml:"certificate,omitempty"`
}

// PhysicalDiskListV1Params is the request parameters for PhysicalDiskListV1
type PhysicalDiskListV1Params struct {
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// RackListV1Params is the request parameters for RackListV1
type RackListV1Params struct {
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// RackViewV1Params is the request parameters for RackViewV1
type RackViewV1Params struct {
	RackId string `json:"rack_id,omitempty" yaml:"rack_id,omitempty"`
}

// SledListV1Params is the request parameters for SledListV1
type SledListV1Params struct {
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// SledViewV1Params is the request parameters for SledViewV1
type SledViewV1Params struct {
	SledId string `json:"sled_id,omitempty" yaml:"sled_id,omitempty"`
}

// SledPhysicalDiskListV1Params is the request parameters for SledPhysicalDiskListV1
type SledPhysicalDiskListV1Params struct {
	SledId    string     `json:"sled_id,omitempty" yaml:"sled_id,omitempty"`
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// SiloIdentityProviderListParams is the request parameters for SiloIdentityProviderList
type SiloIdentityProviderListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Silo      NameOrId         `json:"silo,omitempty" yaml:"silo,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// LocalIdpUserCreateParams is the request parameters for LocalIdpUserCreate
type LocalIdpUserCreateParams struct {
	Silo NameOrId `json:"silo,omitempty" yaml:"silo,omitempty"`
}

// LocalIdpUserDeleteParams is the request parameters for LocalIdpUserDelete
type LocalIdpUserDeleteParams struct {
	UserId string   `json:"user_id,omitempty" yaml:"user_id,omitempty"`
	Silo   NameOrId `json:"silo,omitempty" yaml:"silo,omitempty"`
}

// LocalIdpUserSetPasswordParams is the request parameters for LocalIdpUserSetPassword
type LocalIdpUserSetPasswordParams struct {
	UserId string   `json:"user_id,omitempty" yaml:"user_id,omitempty"`
	Silo   NameOrId `json:"silo,omitempty" yaml:"silo,omitempty"`
}

// SamlIdentityProviderCreateParams is the request parameters for SamlIdentityProviderCreate
type SamlIdentityProviderCreateParams struct {
	Silo NameOrId `json:"silo,omitempty" yaml:"silo,omitempty"`
}

// SamlIdentityProviderViewParams is the request parameters for SamlIdentityProviderView
type SamlIdentityProviderViewParams struct {
	Provider NameOrId `json:"provider,omitempty" yaml:"provider,omitempty"`
	Silo     NameOrId `json:"silo,omitempty" yaml:"silo,omitempty"`
}

// IpPoolListParams is the request parameters for IpPoolList
type IpPoolListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// IpPoolServiceRangeListParams is the request parameters for IpPoolServiceRangeList
type IpPoolServiceRangeListParams struct {
	Limit     int    `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string `json:"page_token,omitempty" yaml:"page_token,omitempty"`
}

// IpPoolDeleteParams is the request parameters for IpPoolDelete
type IpPoolDeleteParams struct {
	Pool NameOrId `json:"pool,omitempty" yaml:"pool,omitempty"`
}

// IpPoolViewParams is the request parameters for IpPoolView
type IpPoolViewParams struct {
	Pool NameOrId `json:"pool,omitempty" yaml:"pool,omitempty"`
}

// IpPoolUpdateParams is the request parameters for IpPoolUpdate
type IpPoolUpdateParams struct {
	Pool NameOrId `json:"pool,omitempty" yaml:"pool,omitempty"`
}

// IpPoolRangeListParams is the request parameters for IpPoolRangeList
type IpPoolRangeListParams struct {
	Pool      NameOrId `json:"pool,omitempty" yaml:"pool,omitempty"`
	Limit     int      `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string   `json:"page_token,omitempty" yaml:"page_token,omitempty"`
}

// IpPoolRangeAddParams is the request parameters for IpPoolRangeAdd
type IpPoolRangeAddParams struct {
	Pool NameOrId `json:"pool,omitempty" yaml:"pool,omitempty"`
}

// IpPoolRangeRemoveParams is the request parameters for IpPoolRangeRemove
type IpPoolRangeRemoveParams struct {
	Pool NameOrId `json:"pool,omitempty" yaml:"pool,omitempty"`
}

// SystemMetricParams is the request parameters for SystemMetric
type SystemMetricParams struct {
	MetricName SystemMetricName `json:"metric_name,omitempty" yaml:"metric_name,omitempty"`
	EndTime    *time.Time       `json:"end_time,omitempty" yaml:"end_time,omitempty"`
	Id         string           `json:"id,omitempty" yaml:"id,omitempty"`
	Limit      int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken  string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	StartTime  *time.Time       `json:"start_time,omitempty" yaml:"start_time,omitempty"`
}

// RoleListParams is the request parameters for RoleList
type RoleListParams struct {
	Limit     int    `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string `json:"page_token,omitempty" yaml:"page_token,omitempty"`
}

// RoleViewParams is the request parameters for RoleView
type RoleViewParams struct {
	RoleName string `json:"role_name,omitempty" yaml:"role_name,omitempty"`
}

// SagaListV1Params is the request parameters for SagaListV1
type SagaListV1Params struct {
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// SagaViewV1Params is the request parameters for SagaViewV1
type SagaViewV1Params struct {
	SagaId string `json:"saga_id,omitempty" yaml:"saga_id,omitempty"`
}

// SiloListV1Params is the request parameters for SiloListV1
type SiloListV1Params struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// SiloDeleteV1Params is the request parameters for SiloDeleteV1
type SiloDeleteV1Params struct {
	Silo NameOrId `json:"silo,omitempty" yaml:"silo,omitempty"`
}

// SiloViewV1Params is the request parameters for SiloViewV1
type SiloViewV1Params struct {
	Silo NameOrId `json:"silo,omitempty" yaml:"silo,omitempty"`
}

// SiloPolicyViewV1Params is the request parameters for SiloPolicyViewV1
type SiloPolicyViewV1Params struct {
	Silo NameOrId `json:"silo,omitempty" yaml:"silo,omitempty"`
}

// SiloPolicyUpdateV1Params is the request parameters for SiloPolicyUpdateV1
type SiloPolicyUpdateV1Params struct {
	Silo NameOrId `json:"silo,omitempty" yaml:"silo,omitempty"`
}

// SystemComponentVersionListParams is the request parameters for SystemComponentVersionList
type SystemComponentVersionListParams struct {
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// UpdateDeploymentsListParams is the request parameters for UpdateDeploymentsList
type UpdateDeploymentsListParams struct {
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// UpdateDeploymentViewParams is the request parameters for UpdateDeploymentView
type UpdateDeploymentViewParams struct {
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
}

// SystemUpdateListParams is the request parameters for SystemUpdateList
type SystemUpdateListParams struct {
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// SystemUpdateViewParams is the request parameters for SystemUpdateView
type SystemUpdateViewParams struct {
	Version SemverVersion `json:"version,omitempty" yaml:"version,omitempty"`
}

// SystemUpdateComponentsListParams is the request parameters for SystemUpdateComponentsList
type SystemUpdateComponentsListParams struct {
	Version SemverVersion `json:"version,omitempty" yaml:"version,omitempty"`
}

// SiloUserListV1Params is the request parameters for SiloUserListV1
type SiloUserListV1Params struct {
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Silo      NameOrId   `json:"silo,omitempty" yaml:"silo,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// UserBuiltinListParams is the request parameters for UserBuiltinList
type UserBuiltinListParams struct {
	Limit     int          `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string       `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    NameSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// UserBuiltinViewParams is the request parameters for UserBuiltinView
type UserBuiltinViewParams struct {
	User NameOrId `json:"user,omitempty" yaml:"user,omitempty"`
}

// SiloUserViewV1Params is the request parameters for SiloUserViewV1
type SiloUserViewV1Params struct {
	UserId string   `json:"user_id,omitempty" yaml:"user_id,omitempty"`
	Silo   NameOrId `json:"silo,omitempty" yaml:"silo,omitempty"`
}

// UserListV1Params is the request parameters for UserListV1
type UserListV1Params struct {
	Group     string     `json:"group,omitempty" yaml:"group,omitempty"`
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// VpcFirewallRulesViewParams is the request parameters for VpcFirewallRulesView
type VpcFirewallRulesViewParams struct {
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Vpc     NameOrId `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

// VpcFirewallRulesUpdateParams is the request parameters for VpcFirewallRulesUpdate
type VpcFirewallRulesUpdateParams struct {
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Vpc     NameOrId `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

// VpcRouterRouteListParams is the request parameters for VpcRouterRouteList
type VpcRouterRouteListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Project   NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	Router    NameOrId         `json:"router,omitempty" yaml:"router,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
	Vpc       NameOrId         `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

// VpcRouterRouteCreateParams is the request parameters for VpcRouterRouteCreate
type VpcRouterRouteCreateParams struct {
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Router  NameOrId `json:"router,omitempty" yaml:"router,omitempty"`
	Vpc     NameOrId `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

// VpcRouterRouteDeleteParams is the request parameters for VpcRouterRouteDelete
type VpcRouterRouteDeleteParams struct {
	Route   NameOrId `json:"route,omitempty" yaml:"route,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Router  NameOrId `json:"router,omitempty" yaml:"router,omitempty"`
	Vpc     NameOrId `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

// VpcRouterRouteViewParams is the request parameters for VpcRouterRouteView
type VpcRouterRouteViewParams struct {
	Route   NameOrId `json:"route,omitempty" yaml:"route,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Router  NameOrId `json:"router,omitempty" yaml:"router,omitempty"`
	Vpc     NameOrId `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

// VpcRouterRouteUpdateParams is the request parameters for VpcRouterRouteUpdate
type VpcRouterRouteUpdateParams struct {
	Route   NameOrId `json:"route,omitempty" yaml:"route,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Router  NameOrId `json:"router,omitempty" yaml:"router,omitempty"`
	Vpc     NameOrId `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

// VpcRouterListParams is the request parameters for VpcRouterList
type VpcRouterListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Project   NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
	Vpc       NameOrId         `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

// VpcRouterCreateParams is the request parameters for VpcRouterCreate
type VpcRouterCreateParams struct {
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Vpc     NameOrId `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

// VpcRouterDeleteParams is the request parameters for VpcRouterDelete
type VpcRouterDeleteParams struct {
	Router  NameOrId `json:"router,omitempty" yaml:"router,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Vpc     NameOrId `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

// VpcRouterViewParams is the request parameters for VpcRouterView
type VpcRouterViewParams struct {
	Router  NameOrId `json:"router,omitempty" yaml:"router,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Vpc     NameOrId `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

// VpcRouterUpdateParams is the request parameters for VpcRouterUpdate
type VpcRouterUpdateParams struct {
	Router  NameOrId `json:"router,omitempty" yaml:"router,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Vpc     NameOrId `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

// VpcSubnetListParams is the request parameters for VpcSubnetList
type VpcSubnetListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Project   NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
	Vpc       NameOrId         `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

// VpcSubnetCreateParams is the request parameters for VpcSubnetCreate
type VpcSubnetCreateParams struct {
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Vpc     NameOrId `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

// VpcSubnetDeleteParams is the request parameters for VpcSubnetDelete
type VpcSubnetDeleteParams struct {
	Subnet  NameOrId `json:"subnet,omitempty" yaml:"subnet,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Vpc     NameOrId `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

// VpcSubnetViewParams is the request parameters for VpcSubnetView
type VpcSubnetViewParams struct {
	Subnet  NameOrId `json:"subnet,omitempty" yaml:"subnet,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Vpc     NameOrId `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

// VpcSubnetUpdateParams is the request parameters for VpcSubnetUpdate
type VpcSubnetUpdateParams struct {
	Subnet  NameOrId `json:"subnet,omitempty" yaml:"subnet,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Vpc     NameOrId `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

// VpcSubnetListNetworkInterfacesParams is the request parameters for VpcSubnetListNetworkInterfaces
type VpcSubnetListNetworkInterfacesParams struct {
	Subnet    NameOrId         `json:"subnet,omitempty" yaml:"subnet,omitempty"`
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Project   NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
	Vpc       NameOrId         `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

// VpcListParams is the request parameters for VpcList
type VpcListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Project   NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// VpcCreateParams is the request parameters for VpcCreate
type VpcCreateParams struct {
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// VpcDeleteParams is the request parameters for VpcDelete
type VpcDeleteParams struct {
	Vpc     NameOrId `json:"vpc,omitempty" yaml:"vpc,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// VpcViewParams is the request parameters for VpcView
type VpcViewParams struct {
	Vpc     NameOrId `json:"vpc,omitempty" yaml:"vpc,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// VpcUpdateParams is the request parameters for VpcUpdate
type VpcUpdateParams struct {
	Vpc     NameOrId `json:"vpc,omitempty" yaml:"vpc,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// BinRangedoubleTypeRangeTo represents the BinRangedoubleType `"range_to"`.
const BinRangedoubleTypeRangeTo BinRangedoubleType = "range_to"

// BinRangedoubleTypeRange represents the BinRangedoubleType `"range"`.
const BinRangedoubleTypeRange BinRangedoubleType = "range"

// BinRangedoubleTypeRangeFrom represents the BinRangedoubleType `"range_from"`.
const BinRangedoubleTypeRangeFrom BinRangedoubleType = "range_from"

// BinRangeint64TypeRangeTo represents the BinRangeint64Type `"range_to"`.
const BinRangeint64TypeRangeTo BinRangeint64Type = "range_to"

// BinRangeint64TypeRange represents the BinRangeint64Type `"range"`.
const BinRangeint64TypeRange BinRangeint64Type = "range"

// BinRangeint64TypeRangeFrom represents the BinRangeint64Type `"range_from"`.
const BinRangeint64TypeRangeFrom BinRangeint64Type = "range_from"

// DatumTypeBool represents the DatumType `"bool"`.
const DatumTypeBool DatumType = "bool"

// DatumTypeI64 represents the DatumType `"i64"`.
const DatumTypeI64 DatumType = "i64"

// DatumTypeF64 represents the DatumType `"f64"`.
const DatumTypeF64 DatumType = "f64"

// DatumTypeString represents the DatumType `"string"`.
const DatumTypeString DatumType = "string"

// DatumTypeBytes represents the DatumType `"bytes"`.
const DatumTypeBytes DatumType = "bytes"

// DatumTypeCumulativeI64 represents the DatumType `"cumulative_i64"`.
const DatumTypeCumulativeI64 DatumType = "cumulative_i64"

// DatumTypeCumulativeF64 represents the DatumType `"cumulative_f64"`.
const DatumTypeCumulativeF64 DatumType = "cumulative_f64"

// DatumTypeHistogramI64 represents the DatumType `"histogram_i64"`.
const DatumTypeHistogramI64 DatumType = "histogram_i64"

// DatumTypeHistogramF64 represents the DatumType `"histogram_f64"`.
const DatumTypeHistogramF64 DatumType = "histogram_f64"

// DigestTypeSha256 represents the DigestType `"sha256"`.
const DigestTypeSha256 DigestType = "sha256"

// DiskMetricNameActivated represents the DiskMetricName `"activated"`.
const DiskMetricNameActivated DiskMetricName = "activated"

// DiskMetricNameFlush represents the DiskMetricName `"flush"`.
const DiskMetricNameFlush DiskMetricName = "flush"

// DiskMetricNameRead represents the DiskMetricName `"read"`.
const DiskMetricNameRead DiskMetricName = "read"

// DiskMetricNameReadBytes represents the DiskMetricName `"read_bytes"`.
const DiskMetricNameReadBytes DiskMetricName = "read_bytes"

// DiskMetricNameWrite represents the DiskMetricName `"write"`.
const DiskMetricNameWrite DiskMetricName = "write"

// DiskMetricNameWriteBytes represents the DiskMetricName `"write_bytes"`.
const DiskMetricNameWriteBytes DiskMetricName = "write_bytes"

// DiskSourceTypeBlank represents the DiskSourceType `"blank"`.
const DiskSourceTypeBlank DiskSourceType = "blank"

// DiskSourceTypeSnapshot represents the DiskSourceType `"snapshot"`.
const DiskSourceTypeSnapshot DiskSourceType = "snapshot"

// DiskSourceTypeImage represents the DiskSourceType `"image"`.
const DiskSourceTypeImage DiskSourceType = "image"

// DiskSourceTypeGlobalImage represents the DiskSourceType `"global_image"`.
const DiskSourceTypeGlobalImage DiskSourceType = "global_image"

// DiskStateStateCreating represents the DiskStateState `"creating"`.
const DiskStateStateCreating DiskStateState = "creating"

// DiskStateStateDetached represents the DiskStateState `"detached"`.
const DiskStateStateDetached DiskStateState = "detached"

// DiskStateStateMaintenance represents the DiskStateState `"maintenance"`.
const DiskStateStateMaintenance DiskStateState = "maintenance"

// DiskStateStateAttaching represents the DiskStateState `"attaching"`.
const DiskStateStateAttaching DiskStateState = "attaching"

// DiskStateStateAttached represents the DiskStateState `"attached"`.
const DiskStateStateAttached DiskStateState = "attached"

// DiskStateStateDetaching represents the DiskStateState `"detaching"`.
const DiskStateStateDetaching DiskStateState = "detaching"

// DiskStateStateDestroyed represents the DiskStateState `"destroyed"`.
const DiskStateStateDestroyed DiskStateState = "destroyed"

// DiskStateStateFaulted represents the DiskStateState `"faulted"`.
const DiskStateStateFaulted DiskStateState = "faulted"

// ExternalIpCreateTypeEphemeral represents the ExternalIpCreateType `"ephemeral"`.
const ExternalIpCreateTypeEphemeral ExternalIpCreateType = "ephemeral"

// FleetRoleAdmin represents the FleetRole `"admin"`.
const FleetRoleAdmin FleetRole = "admin"

// FleetRoleCollaborator represents the FleetRole `"collaborator"`.
const FleetRoleCollaborator FleetRole = "collaborator"

// FleetRoleViewer represents the FleetRole `"viewer"`.
const FleetRoleViewer FleetRole = "viewer"

// IdSortModeIdAscending represents the IdSortMode `"id_ascending"`.
const IdSortModeIdAscending IdSortMode = "id_ascending"

// IdentityProviderTypeSaml represents the IdentityProviderType `"saml"`.
const IdentityProviderTypeSaml IdentityProviderType = "saml"

// IdentityTypeSiloUser represents the IdentityType `"silo_user"`.
const IdentityTypeSiloUser IdentityType = "silo_user"

// IdentityTypeSiloGroup represents the IdentityType `"silo_group"`.
const IdentityTypeSiloGroup IdentityType = "silo_group"

// IdpMetadataSourceTypeUrl represents the IdpMetadataSourceType `"url"`.
const IdpMetadataSourceTypeUrl IdpMetadataSourceType = "url"

// IdpMetadataSourceTypeBase64EncodedXml represents the IdpMetadataSourceType `"base64_encoded_xml"`.
const IdpMetadataSourceTypeBase64EncodedXml IdpMetadataSourceType = "base64_encoded_xml"

// ImageSourceTypeUrl represents the ImageSourceType `"url"`.
const ImageSourceTypeUrl ImageSourceType = "url"

// ImageSourceTypeSnapshot represents the ImageSourceType `"snapshot"`.
const ImageSourceTypeSnapshot ImageSourceType = "snapshot"

// ImageSourceTypeYouCanBootAnythingAsLongAsItsAlpine represents the ImageSourceType `"you_can_boot_anything_as_long_as_its_alpine"`.
const ImageSourceTypeYouCanBootAnythingAsLongAsItsAlpine ImageSourceType = "you_can_boot_anything_as_long_as_its_alpine"

// InstanceDiskAttachmentTypeCreate represents the InstanceDiskAttachmentType `"create"`.
const InstanceDiskAttachmentTypeCreate InstanceDiskAttachmentType = "create"

// InstanceDiskAttachmentTypeAttach represents the InstanceDiskAttachmentType `"attach"`.
const InstanceDiskAttachmentTypeAttach InstanceDiskAttachmentType = "attach"

// InstanceNetworkInterfaceAttachmentTypeCreate represents the InstanceNetworkInterfaceAttachmentType `"create"`.
const InstanceNetworkInterfaceAttachmentTypeCreate InstanceNetworkInterfaceAttachmentType = "create"

// InstanceNetworkInterfaceAttachmentTypeDefault represents the InstanceNetworkInterfaceAttachmentType `"default"`.
const InstanceNetworkInterfaceAttachmentTypeDefault InstanceNetworkInterfaceAttachmentType = "default"

// InstanceNetworkInterfaceAttachmentTypeNone represents the InstanceNetworkInterfaceAttachmentType `"none"`.
const InstanceNetworkInterfaceAttachmentTypeNone InstanceNetworkInterfaceAttachmentType = "none"

// InstanceStateCreating represents the InstanceState `"creating"`.
const InstanceStateCreating InstanceState = "creating"

// InstanceStateStarting represents the InstanceState `"starting"`.
const InstanceStateStarting InstanceState = "starting"

// InstanceStateRunning represents the InstanceState `"running"`.
const InstanceStateRunning InstanceState = "running"

// InstanceStateStopping represents the InstanceState `"stopping"`.
const InstanceStateStopping InstanceState = "stopping"

// InstanceStateStopped represents the InstanceState `"stopped"`.
const InstanceStateStopped InstanceState = "stopped"

// InstanceStateRebooting represents the InstanceState `"rebooting"`.
const InstanceStateRebooting InstanceState = "rebooting"

// InstanceStateMigrating represents the InstanceState `"migrating"`.
const InstanceStateMigrating InstanceState = "migrating"

// InstanceStateRepairing represents the InstanceState `"repairing"`.
const InstanceStateRepairing InstanceState = "repairing"

// InstanceStateFailed represents the InstanceState `"failed"`.
const InstanceStateFailed InstanceState = "failed"

// InstanceStateDestroyed represents the InstanceState `"destroyed"`.
const InstanceStateDestroyed InstanceState = "destroyed"

// IpKindEphemeral represents the IpKind `"ephemeral"`.
const IpKindEphemeral IpKind = "ephemeral"

// IpKindFloating represents the IpKind `"floating"`.
const IpKindFloating IpKind = "floating"

// NameOrIdSortModeNameAscending represents the NameOrIdSortMode `"name_ascending"`.
const NameOrIdSortModeNameAscending NameOrIdSortMode = "name_ascending"

// NameOrIdSortModeNameDescending represents the NameOrIdSortMode `"name_descending"`.
const NameOrIdSortModeNameDescending NameOrIdSortMode = "name_descending"

// NameOrIdSortModeIdAscending represents the NameOrIdSortMode `"id_ascending"`.
const NameOrIdSortModeIdAscending NameOrIdSortMode = "id_ascending"

// NameSortModeNameAscending represents the NameSortMode `"name_ascending"`.
const NameSortModeNameAscending NameSortMode = "name_ascending"

// PhysicalDiskTypeInternal represents the PhysicalDiskType `"internal"`.
const PhysicalDiskTypeInternal PhysicalDiskType = "internal"

// PhysicalDiskTypeExternal represents the PhysicalDiskType `"external"`.
const PhysicalDiskTypeExternal PhysicalDiskType = "external"

// ProjectRoleAdmin represents the ProjectRole `"admin"`.
const ProjectRoleAdmin ProjectRole = "admin"

// ProjectRoleCollaborator represents the ProjectRole `"collaborator"`.
const ProjectRoleCollaborator ProjectRole = "collaborator"

// ProjectRoleViewer represents the ProjectRole `"viewer"`.
const ProjectRoleViewer ProjectRole = "viewer"

// RouteDestinationTypeIp represents the RouteDestinationType `"ip"`.
const RouteDestinationTypeIp RouteDestinationType = "ip"

// RouteDestinationTypeIpNet represents the RouteDestinationType `"ip_net"`.
const RouteDestinationTypeIpNet RouteDestinationType = "ip_net"

// RouteDestinationTypeVpc represents the RouteDestinationType `"vpc"`.
const RouteDestinationTypeVpc RouteDestinationType = "vpc"

// RouteDestinationTypeSubnet represents the RouteDestinationType `"subnet"`.
const RouteDestinationTypeSubnet RouteDestinationType = "subnet"

// RouteTargetTypeIp represents the RouteTargetType `"ip"`.
const RouteTargetTypeIp RouteTargetType = "ip"

// RouteTargetTypeVpc represents the RouteTargetType `"vpc"`.
const RouteTargetTypeVpc RouteTargetType = "vpc"

// RouteTargetTypeSubnet represents the RouteTargetType `"subnet"`.
const RouteTargetTypeSubnet RouteTargetType = "subnet"

// RouteTargetTypeInstance represents the RouteTargetType `"instance"`.
const RouteTargetTypeInstance RouteTargetType = "instance"

// RouteTargetTypeInternetGateway represents the RouteTargetType `"internet_gateway"`.
const RouteTargetTypeInternetGateway RouteTargetType = "internet_gateway"

// RouterRouteKindDefault represents the RouterRouteKind `"default"`.
const RouterRouteKindDefault RouterRouteKind = "default"

// RouterRouteKindVpcSubnet represents the RouterRouteKind `"vpc_subnet"`.
const RouterRouteKindVpcSubnet RouterRouteKind = "vpc_subnet"

// RouterRouteKindVpcPeering represents the RouterRouteKind `"vpc_peering"`.
const RouterRouteKindVpcPeering RouterRouteKind = "vpc_peering"

// RouterRouteKindCustom represents the RouterRouteKind `"custom"`.
const RouterRouteKindCustom RouterRouteKind = "custom"

// SagaErrorInfoErrorActionFailed represents the SagaErrorInfoError `"action_failed"`.
const SagaErrorInfoErrorActionFailed SagaErrorInfoError = "action_failed"

// SagaErrorInfoErrorDeserializeFailed represents the SagaErrorInfoError `"deserialize_failed"`.
const SagaErrorInfoErrorDeserializeFailed SagaErrorInfoError = "deserialize_failed"

// SagaErrorInfoErrorInjectedError represents the SagaErrorInfoError `"injected_error"`.
const SagaErrorInfoErrorInjectedError SagaErrorInfoError = "injected_error"

// SagaErrorInfoErrorSerializeFailed represents the SagaErrorInfoError `"serialize_failed"`.
const SagaErrorInfoErrorSerializeFailed SagaErrorInfoError = "serialize_failed"

// SagaErrorInfoErrorSubsagaCreateFailed represents the SagaErrorInfoError `"subsaga_create_failed"`.
const SagaErrorInfoErrorSubsagaCreateFailed SagaErrorInfoError = "subsaga_create_failed"

// SagaStateStateRunning represents the SagaStateState `"running"`.
const SagaStateStateRunning SagaStateState = "running"

// SagaStateStateSucceeded represents the SagaStateState `"succeeded"`.
const SagaStateStateSucceeded SagaStateState = "succeeded"

// SagaStateStateFailed represents the SagaStateState `"failed"`.
const SagaStateStateFailed SagaStateState = "failed"

// ServiceUsingCertificateExternalApi represents the ServiceUsingCertificate `"external_api"`.
const ServiceUsingCertificateExternalApi ServiceUsingCertificate = "external_api"

// SiloIdentityModeSamlJit represents the SiloIdentityMode `"saml_jit"`.
const SiloIdentityModeSamlJit SiloIdentityMode = "saml_jit"

// SiloIdentityModeLocalOnly represents the SiloIdentityMode `"local_only"`.
const SiloIdentityModeLocalOnly SiloIdentityMode = "local_only"

// SiloRoleAdmin represents the SiloRole `"admin"`.
const SiloRoleAdmin SiloRole = "admin"

// SiloRoleCollaborator represents the SiloRole `"collaborator"`.
const SiloRoleCollaborator SiloRole = "collaborator"

// SiloRoleViewer represents the SiloRole `"viewer"`.
const SiloRoleViewer SiloRole = "viewer"

// SnapshotStateCreating represents the SnapshotState `"creating"`.
const SnapshotStateCreating SnapshotState = "creating"

// SnapshotStateReady represents the SnapshotState `"ready"`.
const SnapshotStateReady SnapshotState = "ready"

// SnapshotStateFaulted represents the SnapshotState `"faulted"`.
const SnapshotStateFaulted SnapshotState = "faulted"

// SnapshotStateDestroyed represents the SnapshotState `"destroyed"`.
const SnapshotStateDestroyed SnapshotState = "destroyed"

// SystemMetricNameVirtualDiskSpaceProvisioned represents the SystemMetricName `"virtual_disk_space_provisioned"`.
const SystemMetricNameVirtualDiskSpaceProvisioned SystemMetricName = "virtual_disk_space_provisioned"

// SystemMetricNameCpusProvisioned represents the SystemMetricName `"cpus_provisioned"`.
const SystemMetricNameCpusProvisioned SystemMetricName = "cpus_provisioned"

// SystemMetricNameRamProvisioned represents the SystemMetricName `"ram_provisioned"`.
const SystemMetricNameRamProvisioned SystemMetricName = "ram_provisioned"

// UpdateStatusStatusUpdating represents the UpdateStatusStatus `"updating"`.
const UpdateStatusStatusUpdating UpdateStatusStatus = "updating"

// UpdateStatusStatusSteady represents the UpdateStatusStatus `"steady"`.
const UpdateStatusStatusSteady UpdateStatusStatus = "steady"

// UpdateableComponentTypeBootloaderForRot represents the UpdateableComponentType `"bootloader_for_rot"`.
const UpdateableComponentTypeBootloaderForRot UpdateableComponentType = "bootloader_for_rot"

// UpdateableComponentTypeBootloaderForSp represents the UpdateableComponentType `"bootloader_for_sp"`.
const UpdateableComponentTypeBootloaderForSp UpdateableComponentType = "bootloader_for_sp"

// UpdateableComponentTypeBootloaderForHostProc represents the UpdateableComponentType `"bootloader_for_host_proc"`.
const UpdateableComponentTypeBootloaderForHostProc UpdateableComponentType = "bootloader_for_host_proc"

// UpdateableComponentTypeHubrisForPscRot represents the UpdateableComponentType `"hubris_for_psc_rot"`.
const UpdateableComponentTypeHubrisForPscRot UpdateableComponentType = "hubris_for_psc_rot"

// UpdateableComponentTypeHubrisForPscSp represents the UpdateableComponentType `"hubris_for_psc_sp"`.
const UpdateableComponentTypeHubrisForPscSp UpdateableComponentType = "hubris_for_psc_sp"

// UpdateableComponentTypeHubrisForSidecarRot represents the UpdateableComponentType `"hubris_for_sidecar_rot"`.
const UpdateableComponentTypeHubrisForSidecarRot UpdateableComponentType = "hubris_for_sidecar_rot"

// UpdateableComponentTypeHubrisForSidecarSp represents the UpdateableComponentType `"hubris_for_sidecar_sp"`.
const UpdateableComponentTypeHubrisForSidecarSp UpdateableComponentType = "hubris_for_sidecar_sp"

// UpdateableComponentTypeHubrisForGimletRot represents the UpdateableComponentType `"hubris_for_gimlet_rot"`.
const UpdateableComponentTypeHubrisForGimletRot UpdateableComponentType = "hubris_for_gimlet_rot"

// UpdateableComponentTypeHubrisForGimletSp represents the UpdateableComponentType `"hubris_for_gimlet_sp"`.
const UpdateableComponentTypeHubrisForGimletSp UpdateableComponentType = "hubris_for_gimlet_sp"

// UpdateableComponentTypeHeliosHostPhase1 represents the UpdateableComponentType `"helios_host_phase1"`.
const UpdateableComponentTypeHeliosHostPhase1 UpdateableComponentType = "helios_host_phase1"

// UpdateableComponentTypeHeliosHostPhase2 represents the UpdateableComponentType `"helios_host_phase2"`.
const UpdateableComponentTypeHeliosHostPhase2 UpdateableComponentType = "helios_host_phase2"

// UpdateableComponentTypeHostOmicron represents the UpdateableComponentType `"host_omicron"`.
const UpdateableComponentTypeHostOmicron UpdateableComponentType = "host_omicron"

// UserPasswordUserPasswordValuePassword represents the UserPasswordUserPasswordValue `"password"`.
const UserPasswordUserPasswordValuePassword UserPasswordUserPasswordValue = "password"

// UserPasswordUserPasswordValueInvalidPassword represents the UserPasswordUserPasswordValue `"invalid_password"`.
const UserPasswordUserPasswordValueInvalidPassword UserPasswordUserPasswordValue = "invalid_password"

// VpcFirewallRuleActionAllow represents the VpcFirewallRuleAction `"allow"`.
const VpcFirewallRuleActionAllow VpcFirewallRuleAction = "allow"

// VpcFirewallRuleActionDeny represents the VpcFirewallRuleAction `"deny"`.
const VpcFirewallRuleActionDeny VpcFirewallRuleAction = "deny"

// VpcFirewallRuleDirectionInbound represents the VpcFirewallRuleDirection `"inbound"`.
const VpcFirewallRuleDirectionInbound VpcFirewallRuleDirection = "inbound"

// VpcFirewallRuleDirectionOutbound represents the VpcFirewallRuleDirection `"outbound"`.
const VpcFirewallRuleDirectionOutbound VpcFirewallRuleDirection = "outbound"

// VpcFirewallRuleHostFilterTypeVpc represents the VpcFirewallRuleHostFilterType `"vpc"`.
const VpcFirewallRuleHostFilterTypeVpc VpcFirewallRuleHostFilterType = "vpc"

// VpcFirewallRuleHostFilterTypeSubnet represents the VpcFirewallRuleHostFilterType `"subnet"`.
const VpcFirewallRuleHostFilterTypeSubnet VpcFirewallRuleHostFilterType = "subnet"

// VpcFirewallRuleHostFilterTypeInstance represents the VpcFirewallRuleHostFilterType `"instance"`.
const VpcFirewallRuleHostFilterTypeInstance VpcFirewallRuleHostFilterType = "instance"

// VpcFirewallRuleHostFilterTypeIp represents the VpcFirewallRuleHostFilterType `"ip"`.
const VpcFirewallRuleHostFilterTypeIp VpcFirewallRuleHostFilterType = "ip"

// VpcFirewallRuleHostFilterTypeIpNet represents the VpcFirewallRuleHostFilterType `"ip_net"`.
const VpcFirewallRuleHostFilterTypeIpNet VpcFirewallRuleHostFilterType = "ip_net"

// VpcFirewallRuleProtocolTCP represents the VpcFirewallRuleProtocol `"TCP"`.
const VpcFirewallRuleProtocolTCP VpcFirewallRuleProtocol = "TCP"

// VpcFirewallRuleProtocolUDP represents the VpcFirewallRuleProtocol `"UDP"`.
const VpcFirewallRuleProtocolUDP VpcFirewallRuleProtocol = "UDP"

// VpcFirewallRuleProtocolICMP represents the VpcFirewallRuleProtocol `"ICMP"`.
const VpcFirewallRuleProtocolICMP VpcFirewallRuleProtocol = "ICMP"

// VpcFirewallRuleStatusDisabled represents the VpcFirewallRuleStatus `"disabled"`.
const VpcFirewallRuleStatusDisabled VpcFirewallRuleStatus = "disabled"

// VpcFirewallRuleStatusEnabled represents the VpcFirewallRuleStatus `"enabled"`.
const VpcFirewallRuleStatusEnabled VpcFirewallRuleStatus = "enabled"

// VpcFirewallRuleTargetTypeVpc represents the VpcFirewallRuleTargetType `"vpc"`.
const VpcFirewallRuleTargetTypeVpc VpcFirewallRuleTargetType = "vpc"

// VpcFirewallRuleTargetTypeSubnet represents the VpcFirewallRuleTargetType `"subnet"`.
const VpcFirewallRuleTargetTypeSubnet VpcFirewallRuleTargetType = "subnet"

// VpcFirewallRuleTargetTypeInstance represents the VpcFirewallRuleTargetType `"instance"`.
const VpcFirewallRuleTargetTypeInstance VpcFirewallRuleTargetType = "instance"

// VpcFirewallRuleTargetTypeIp represents the VpcFirewallRuleTargetType `"ip"`.
const VpcFirewallRuleTargetTypeIp VpcFirewallRuleTargetType = "ip"

// VpcFirewallRuleTargetTypeIpNet represents the VpcFirewallRuleTargetType `"ip_net"`.
const VpcFirewallRuleTargetTypeIpNet VpcFirewallRuleTargetType = "ip_net"

// VpcRouterKindSystem represents the VpcRouterKind `"system"`.
const VpcRouterKindSystem VpcRouterKind = "system"

// VpcRouterKindCustom represents the VpcRouterKind `"custom"`.
const VpcRouterKindCustom VpcRouterKind = "custom"

// BinRangedoubleTypes is the collection of all BinRangedoubleType values.
var BinRangedoubleTypes = []BinRangedoubleType{
	BinRangedoubleTypeRange,
	BinRangedoubleTypeRangeFrom,
	BinRangedoubleTypeRangeTo,
}

// BinRangeint64Types is the collection of all BinRangeint64Type values.
var BinRangeint64Types = []BinRangeint64Type{
	BinRangeint64TypeRange,
	BinRangeint64TypeRangeFrom,
	BinRangeint64TypeRangeTo,
}

// DatumTypes is the collection of all DatumType values.
var DatumTypes = []DatumType{
	DatumTypeBool,
	DatumTypeBytes,
	DatumTypeCumulativeF64,
	DatumTypeCumulativeI64,
	DatumTypeF64,
	DatumTypeHistogramF64,
	DatumTypeHistogramI64,
	DatumTypeI64,
	DatumTypeString,
}

// DigestTypes is the collection of all DigestType values.
var DigestTypes = []DigestType{
	DigestTypeSha256,
}

// DiskMetricNames is the collection of all DiskMetricName values.
var DiskMetricNames = []DiskMetricName{
	DiskMetricNameActivated,
	DiskMetricNameFlush,
	DiskMetricNameRead,
	DiskMetricNameReadBytes,
	DiskMetricNameWrite,
	DiskMetricNameWriteBytes,
}

// DiskSourceTypes is the collection of all DiskSourceType values.
var DiskSourceTypes = []DiskSourceType{
	DiskSourceTypeBlank,
	DiskSourceTypeGlobalImage,
	DiskSourceTypeImage,
	DiskSourceTypeSnapshot,
}

// DiskStateStates is the collection of all DiskStateState values.
var DiskStateStates = []DiskStateState{
	DiskStateStateAttached,
	DiskStateStateAttaching,
	DiskStateStateCreating,
	DiskStateStateDestroyed,
	DiskStateStateDetached,
	DiskStateStateDetaching,
	DiskStateStateFaulted,
	DiskStateStateMaintenance,
}

// ExternalIpCreateTypes is the collection of all ExternalIpCreateType values.
var ExternalIpCreateTypes = []ExternalIpCreateType{
	ExternalIpCreateTypeEphemeral,
}

// FleetRoles is the collection of all FleetRole values.
var FleetRoles = []FleetRole{
	FleetRoleAdmin,
	FleetRoleCollaborator,
	FleetRoleViewer,
}

// IdSortModes is the collection of all IdSortMode values.
var IdSortModes = []IdSortMode{
	IdSortModeIdAscending,
}

// IdentityProviderTypes is the collection of all IdentityProviderType values.
var IdentityProviderTypes = []IdentityProviderType{
	IdentityProviderTypeSaml,
}

// IdentityTypes is the collection of all IdentityType values.
var IdentityTypes = []IdentityType{
	IdentityTypeSiloGroup,
	IdentityTypeSiloUser,
}

// IdpMetadataSourceTypes is the collection of all IdpMetadataSourceType values.
var IdpMetadataSourceTypes = []IdpMetadataSourceType{
	IdpMetadataSourceTypeBase64EncodedXml,
	IdpMetadataSourceTypeUrl,
}

// ImageSourceTypes is the collection of all ImageSourceType values.
var ImageSourceTypes = []ImageSourceType{
	ImageSourceTypeSnapshot,
	ImageSourceTypeUrl,
	ImageSourceTypeYouCanBootAnythingAsLongAsItsAlpine,
}

// InstanceDiskAttachmentTypes is the collection of all InstanceDiskAttachmentType values.
var InstanceDiskAttachmentTypes = []InstanceDiskAttachmentType{
	InstanceDiskAttachmentTypeAttach,
	InstanceDiskAttachmentTypeCreate,
}

// InstanceNetworkInterfaceAttachmentTypes is the collection of all InstanceNetworkInterfaceAttachmentType values.
var InstanceNetworkInterfaceAttachmentTypes = []InstanceNetworkInterfaceAttachmentType{
	InstanceNetworkInterfaceAttachmentTypeCreate,
	InstanceNetworkInterfaceAttachmentTypeDefault,
	InstanceNetworkInterfaceAttachmentTypeNone,
}

// InstanceStates is the collection of all InstanceState values.
var InstanceStates = []InstanceState{
	InstanceStateCreating,
	InstanceStateDestroyed,
	InstanceStateFailed,
	InstanceStateMigrating,
	InstanceStateRebooting,
	InstanceStateRepairing,
	InstanceStateRunning,
	InstanceStateStarting,
	InstanceStateStopped,
	InstanceStateStopping,
}

// IpKinds is the collection of all IpKind values.
var IpKinds = []IpKind{
	IpKindEphemeral,
	IpKindFloating,
}

// NameOrIdSortModes is the collection of all NameOrIdSortMode values.
var NameOrIdSortModes = []NameOrIdSortMode{
	NameOrIdSortModeIdAscending,
	NameOrIdSortModeNameAscending,
	NameOrIdSortModeNameDescending,
}

// NameSortModes is the collection of all NameSortMode values.
var NameSortModes = []NameSortMode{
	NameSortModeNameAscending,
}

// PhysicalDiskTypes is the collection of all PhysicalDiskType values.
var PhysicalDiskTypes = []PhysicalDiskType{
	PhysicalDiskTypeExternal,
	PhysicalDiskTypeInternal,
}

// ProjectRoles is the collection of all ProjectRole values.
var ProjectRoles = []ProjectRole{
	ProjectRoleAdmin,
	ProjectRoleCollaborator,
	ProjectRoleViewer,
}

// RouteDestinationTypes is the collection of all RouteDestinationType values.
var RouteDestinationTypes = []RouteDestinationType{
	RouteDestinationTypeIp,
	RouteDestinationTypeIpNet,
	RouteDestinationTypeSubnet,
	RouteDestinationTypeVpc,
}

// RouteTargetTypes is the collection of all RouteTargetType values.
var RouteTargetTypes = []RouteTargetType{
	RouteTargetTypeInstance,
	RouteTargetTypeInternetGateway,
	RouteTargetTypeIp,
	RouteTargetTypeSubnet,
	RouteTargetTypeVpc,
}

// RouterRouteKinds is the collection of all RouterRouteKind values.
var RouterRouteKinds = []RouterRouteKind{
	RouterRouteKindCustom,
	RouterRouteKindDefault,
	RouterRouteKindVpcPeering,
	RouterRouteKindVpcSubnet,
}

// SagaErrorInfoErrors is the collection of all SagaErrorInfoError values.
var SagaErrorInfoErrors = []SagaErrorInfoError{
	SagaErrorInfoErrorActionFailed,
	SagaErrorInfoErrorDeserializeFailed,
	SagaErrorInfoErrorInjectedError,
	SagaErrorInfoErrorSerializeFailed,
	SagaErrorInfoErrorSubsagaCreateFailed,
}

// SagaStateStates is the collection of all SagaStateState values.
var SagaStateStates = []SagaStateState{
	SagaStateStateFailed,
	SagaStateStateRunning,
	SagaStateStateSucceeded,
}

// ServiceUsingCertificates is the collection of all ServiceUsingCertificate values.
var ServiceUsingCertificates = []ServiceUsingCertificate{
	ServiceUsingCertificateExternalApi,
}

// SiloIdentityModes is the collection of all SiloIdentityMode values.
var SiloIdentityModes = []SiloIdentityMode{
	SiloIdentityModeLocalOnly,
	SiloIdentityModeSamlJit,
}

// SiloRoles is the collection of all SiloRole values.
var SiloRoles = []SiloRole{
	SiloRoleAdmin,
	SiloRoleCollaborator,
	SiloRoleViewer,
}

// SnapshotStates is the collection of all SnapshotState values.
var SnapshotStates = []SnapshotState{
	SnapshotStateCreating,
	SnapshotStateDestroyed,
	SnapshotStateFaulted,
	SnapshotStateReady,
}

// SystemMetricNames is the collection of all SystemMetricName values.
var SystemMetricNames = []SystemMetricName{
	SystemMetricNameCpusProvisioned,
	SystemMetricNameRamProvisioned,
	SystemMetricNameVirtualDiskSpaceProvisioned,
}

// UpdateStatusStatuses is the collection of all UpdateStatusStatus values.
var UpdateStatusStatuses = []UpdateStatusStatus{
	UpdateStatusStatusSteady,
	UpdateStatusStatusUpdating,
}

// UpdateableComponentTypes is the collection of all UpdateableComponentType values.
var UpdateableComponentTypes = []UpdateableComponentType{
	UpdateableComponentTypeBootloaderForHostProc,
	UpdateableComponentTypeBootloaderForRot,
	UpdateableComponentTypeBootloaderForSp,
	UpdateableComponentTypeHeliosHostPhase1,
	UpdateableComponentTypeHeliosHostPhase2,
	UpdateableComponentTypeHostOmicron,
	UpdateableComponentTypeHubrisForGimletRot,
	UpdateableComponentTypeHubrisForGimletSp,
	UpdateableComponentTypeHubrisForPscRot,
	UpdateableComponentTypeHubrisForPscSp,
	UpdateableComponentTypeHubrisForSidecarRot,
	UpdateableComponentTypeHubrisForSidecarSp,
}

// UserPasswordUserPasswordValues is the collection of all UserPasswordUserPasswordValue values.
var UserPasswordUserPasswordValues = []UserPasswordUserPasswordValue{
	UserPasswordUserPasswordValueInvalidPassword,
	UserPasswordUserPasswordValuePassword,
}

// VpcFirewallRuleActions is the collection of all VpcFirewallRuleAction values.
var VpcFirewallRuleActions = []VpcFirewallRuleAction{
	VpcFirewallRuleActionAllow,
	VpcFirewallRuleActionDeny,
}

// VpcFirewallRuleDirections is the collection of all VpcFirewallRuleDirection values.
var VpcFirewallRuleDirections = []VpcFirewallRuleDirection{
	VpcFirewallRuleDirectionInbound,
	VpcFirewallRuleDirectionOutbound,
}

// VpcFirewallRuleHostFilterTypes is the collection of all VpcFirewallRuleHostFilterType values.
var VpcFirewallRuleHostFilterTypes = []VpcFirewallRuleHostFilterType{
	VpcFirewallRuleHostFilterTypeInstance,
	VpcFirewallRuleHostFilterTypeIp,
	VpcFirewallRuleHostFilterTypeIpNet,
	VpcFirewallRuleHostFilterTypeSubnet,
	VpcFirewallRuleHostFilterTypeVpc,
}

// VpcFirewallRuleProtocols is the collection of all VpcFirewallRuleProtocol values.
var VpcFirewallRuleProtocols = []VpcFirewallRuleProtocol{
	VpcFirewallRuleProtocolICMP,
	VpcFirewallRuleProtocolTCP,
	VpcFirewallRuleProtocolUDP,
}

// VpcFirewallRuleStatuses is the collection of all VpcFirewallRuleStatus values.
var VpcFirewallRuleStatuses = []VpcFirewallRuleStatus{
	VpcFirewallRuleStatusDisabled,
	VpcFirewallRuleStatusEnabled,
}

// VpcFirewallRuleTargetTypes is the collection of all VpcFirewallRuleTargetType values.
var VpcFirewallRuleTargetTypes = []VpcFirewallRuleTargetType{
	VpcFirewallRuleTargetTypeInstance,
	VpcFirewallRuleTargetTypeIp,
	VpcFirewallRuleTargetTypeIpNet,
	VpcFirewallRuleTargetTypeSubnet,
	VpcFirewallRuleTargetTypeVpc,
}

// VpcRouterKinds is the collection of all VpcRouterKind values.
var VpcRouterKinds = []VpcRouterKind{
	VpcRouterKindCustom,
	VpcRouterKindSystem,
}
