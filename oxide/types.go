// Code generated by `generate`. DO NOT EDIT.

// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

package oxide

import (
	"fmt"
	"io"
	"time"
)

// Address is an address tied to an address lot.
type Address struct {
	// Address is the address and prefix length of this address.
	Address IpNet `json:"address,omitempty" yaml:"address,omitempty"`
	// AddressLot is the address lot this address is drawn from.
	AddressLot NameOrId `json:"address_lot,omitempty" yaml:"address_lot,omitempty"`
}

// AddressConfig is a set of addresses associated with a port configuration.
type AddressConfig struct {
	// Addresses is the set of addresses assigned to the port configuration.
	Addresses []Address `json:"addresses,omitempty" yaml:"addresses,omitempty"`
}

// AddressLot is represents an address lot object, containing the id of the lot that can be used in other API calls.
type AddressLot struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Kind is desired use of `AddressLot`
	Kind AddressLotKind `json:"kind,omitempty" yaml:"kind,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// AddressLotBlock is an address lot block is a part of an address lot and contains a range of addresses. The range is inclusive.
type AddressLotBlock struct {
	// FirstAddress is the first address of the block (inclusive).
	FirstAddress string `json:"first_address,omitempty" yaml:"first_address,omitempty"`
	// Id is the id of the address lot block.
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// LastAddress is the last address of the block (inclusive).
	LastAddress string `json:"last_address,omitempty" yaml:"last_address,omitempty"`
}

// AddressLotBlockCreate is parameters for creating an address lot block. Fist and last addresses are inclusive.
type AddressLotBlockCreate struct {
	// FirstAddress is the first address in the lot (inclusive).
	FirstAddress string `json:"first_address,omitempty" yaml:"first_address,omitempty"`
	// LastAddress is the last address in the lot (inclusive).
	LastAddress string `json:"last_address,omitempty" yaml:"last_address,omitempty"`
}

// AddressLotBlockResultsPage is a single page of results
type AddressLotBlockResultsPage struct {
	// Items is list of items on this page of results
	Items []AddressLotBlock `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// AddressLotCreate is parameters for creating an address lot.
type AddressLotCreate struct {
	// Blocks is the blocks to add along with the new address lot.
	Blocks      []AddressLotBlockCreate `json:"blocks,omitempty" yaml:"blocks,omitempty"`
	Description string                  `json:"description,omitempty" yaml:"description,omitempty"`
	// Kind is the kind of address lot to create.
	Kind AddressLotKind `json:"kind,omitempty" yaml:"kind,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// AddressLotCreateResponse is an address lot and associated blocks resulting from creating an address lot.
type AddressLotCreateResponse struct {
	// Blocks is the address lot blocks that were created.
	Blocks []AddressLotBlock `json:"blocks,omitempty" yaml:"blocks,omitempty"`
	// Lot is the address lot that was created.
	Lot AddressLot `json:"lot,omitempty" yaml:"lot,omitempty"`
}

// AddressLotKind is infrastructure address lots are used for network infrastructure like addresses assigned to rack switches.
type AddressLotKind string

// AddressLotResultsPage is a single page of results
type AddressLotResultsPage struct {
	// Items is list of items on this page of results
	Items []AddressLot `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Baseboard is properties that uniquely identify an Oxide hardware component
type Baseboard struct {
	Part     string `json:"part,omitempty" yaml:"part,omitempty"`
	Revision int    `json:"revision,omitempty" yaml:"revision,omitempty"`
	Serial   string `json:"serial,omitempty" yaml:"serial,omitempty"`
}

// BfdMode is the type definition for a BfdMode.
type BfdMode string

// BfdSessionDisable is information needed to disable a BFD session
type BfdSessionDisable struct {
	// Remote is address of the remote peer to disable a BFD session for.
	Remote string `json:"remote,omitempty" yaml:"remote,omitempty"`
	// Switch is the switch to enable this session on. Must be `switch0` or `switch1`.
	Switch Name `json:"switch,omitempty" yaml:"switch,omitempty"`
}

// BfdSessionEnable is information about a bidirectional forwarding detection (BFD) session.
type BfdSessionEnable struct {
	// DetectionThreshold is the negotiated Control packet transmission interval, multiplied by this variable, will be the Detection Time for this session (as seen by the remote system)
	DetectionThreshold int `json:"detection_threshold,omitempty" yaml:"detection_threshold,omitempty"`
	// Local is address the Oxide switch will listen on for BFD traffic. If `None` then the unspecified address (0.0.0.0 or ::) is used.
	Local string `json:"local,omitempty" yaml:"local,omitempty"`
	// Mode is select either single-hop (RFC 5881) or multi-hop (RFC 5883)
	Mode BfdMode `json:"mode,omitempty" yaml:"mode,omitempty"`
	// Remote is address of the remote peer to establish a BFD session with.
	Remote string `json:"remote,omitempty" yaml:"remote,omitempty"`
	// RequiredRx is the minimum interval, in microseconds, between received BFD Control packets that this system requires
	RequiredRx int `json:"required_rx,omitempty" yaml:"required_rx,omitempty"`
	// Switch is the switch to enable this session on. Must be `switch0` or `switch1`.
	Switch Name `json:"switch,omitempty" yaml:"switch,omitempty"`
}

// BfdState is a stable down state. Non-responsive to incoming messages.
type BfdState string

// BfdStatus is the type definition for a BfdStatus.
type BfdStatus struct {
	DetectionThreshold int      `json:"detection_threshold,omitempty" yaml:"detection_threshold,omitempty"`
	Local              string   `json:"local,omitempty" yaml:"local,omitempty"`
	Mode               BfdMode  `json:"mode,omitempty" yaml:"mode,omitempty"`
	Peer               string   `json:"peer,omitempty" yaml:"peer,omitempty"`
	RequiredRx         int      `json:"required_rx,omitempty" yaml:"required_rx,omitempty"`
	State              BfdState `json:"state,omitempty" yaml:"state,omitempty"`
	// Switch is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Switch Name `json:"switch,omitempty" yaml:"switch,omitempty"`
}

// BgpAnnounceSet is represents a BGP announce set by id. The id can be used with other API calls to view and manage the announce set.
type BgpAnnounceSet struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// BgpAnnounceSetCreate is parameters for creating a named set of BGP announcements.
type BgpAnnounceSetCreate struct {
	// Announcement is the announcements in this set.
	Announcement []BgpAnnouncementCreate `json:"announcement,omitempty" yaml:"announcement,omitempty"`
	Description  string                  `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// BgpAnnouncement is a BGP announcement tied to an address lot block.
type BgpAnnouncement struct {
	// AddressLotBlockId is the address block the IP network being announced is drawn from.
	AddressLotBlockId string `json:"address_lot_block_id,omitempty" yaml:"address_lot_block_id,omitempty"`
	// AnnounceSetId is the id of the set this announcement is a part of.
	AnnounceSetId string `json:"announce_set_id,omitempty" yaml:"announce_set_id,omitempty"`
	// Network is the IP network being announced.
	Network IpNet `json:"network,omitempty" yaml:"network,omitempty"`
}

// BgpAnnouncementCreate is a BGP announcement tied to a particular address lot block.
type BgpAnnouncementCreate struct {
	// AddressLotBlock is address lot this announcement is drawn from.
	AddressLotBlock NameOrId `json:"address_lot_block,omitempty" yaml:"address_lot_block,omitempty"`
	// Network is the network being announced.
	Network IpNet `json:"network,omitempty" yaml:"network,omitempty"`
}

// BgpConfig is a base BGP configuration.
type BgpConfig struct {
	// Asn is the autonomous system number of this BGP configuration.
	Asn int `json:"asn,omitempty" yaml:"asn,omitempty"`
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// Vrf is optional virtual routing and forwarding identifier for this BGP configuration.
	Vrf string `json:"vrf,omitempty" yaml:"vrf,omitempty"`
}

// BgpConfigCreate is parameters for creating a BGP configuration. This includes and autonomous system number (ASN) and a virtual routing and forwarding (VRF) identifier.
type BgpConfigCreate struct {
	// Asn is the autonomous system number of this BGP configuration.
	Asn              int      `json:"asn,omitempty" yaml:"asn,omitempty"`
	BgpAnnounceSetId NameOrId `json:"bgp_announce_set_id,omitempty" yaml:"bgp_announce_set_id,omitempty"`
	Description      string   `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Vrf is optional virtual routing and forwarding identifier for this BGP configuration.
	Vrf Name `json:"vrf,omitempty" yaml:"vrf,omitempty"`
}

// BgpConfigResultsPage is a single page of results
type BgpConfigResultsPage struct {
	// Items is list of items on this page of results
	Items []BgpConfig `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// BgpImportedRouteIpv4 is a route imported from a BGP peer.
type BgpImportedRouteIpv4 struct {
	// Id is bGP identifier of the originating router.
	Id int `json:"id,omitempty" yaml:"id,omitempty"`
	// Nexthop is the nexthop the prefix is reachable through.
	Nexthop string `json:"nexthop,omitempty" yaml:"nexthop,omitempty"`
	// Prefix is the destination network prefix.
	Prefix Ipv4Net `json:"prefix,omitempty" yaml:"prefix,omitempty"`
	// Switch is switch the route is imported into.
	Switch SwitchLocation `json:"switch,omitempty" yaml:"switch,omitempty"`
}

// BgpPeer is a BGP peer configuration for an interface. Includes the set of announcements that will be advertised to the peer identified by `addr`. The `bgp_config` parameter is a reference to global BGP parameters. The `interface_name` indicates what interface the peer should be contacted on.
type BgpPeer struct {
	// Addr is the address of the host to peer with.
	Addr string `json:"addr,omitempty" yaml:"addr,omitempty"`
	// BgpAnnounceSet is the set of announcements advertised by the peer.
	BgpAnnounceSet NameOrId `json:"bgp_announce_set,omitempty" yaml:"bgp_announce_set,omitempty"`
	// BgpConfig is the global BGP configuration used for establishing a session with this peer.
	BgpConfig NameOrId `json:"bgp_config,omitempty" yaml:"bgp_config,omitempty"`
	// ConnectRetry is how long to to wait between TCP connection retries (seconds).
	ConnectRetry int `json:"connect_retry,omitempty" yaml:"connect_retry,omitempty"`
	// DelayOpen is how long to delay sending an open request after establishing a TCP session (seconds).
	DelayOpen int `json:"delay_open,omitempty" yaml:"delay_open,omitempty"`
	// HoldTime is how long to hold peer connections between keppalives (seconds).
	HoldTime int `json:"hold_time,omitempty" yaml:"hold_time,omitempty"`
	// IdleHoldTime is how long to hold a peer in idle before attempting a new session (seconds).
	IdleHoldTime int `json:"idle_hold_time,omitempty" yaml:"idle_hold_time,omitempty"`
	// InterfaceName is the name of interface to peer on. This is relative to the port configuration this BGP peer configuration is a part of. For example this value could be phy0 to refer to a primary physical interface. Or it could be vlan47 to refer to a VLAN interface.
	InterfaceName string `json:"interface_name,omitempty" yaml:"interface_name,omitempty"`
	// Keepalive is how often to send keepalive requests (seconds).
	Keepalive int `json:"keepalive,omitempty" yaml:"keepalive,omitempty"`
}

// BgpPeerConfig is the type definition for a BgpPeerConfig.
type BgpPeerConfig struct {
	Peers []BgpPeer `json:"peers,omitempty" yaml:"peers,omitempty"`
}

// BgpPeerState is initial state. Refuse all incomming BGP connections. No resources allocated to peer.
type BgpPeerState string

// BgpPeerStatus is the current status of a BGP peer.
type BgpPeerStatus struct {
	// Addr is iP address of the peer.
	Addr string `json:"addr,omitempty" yaml:"addr,omitempty"`
	// LocalAsn is local autonomous system number.
	LocalAsn int `json:"local_asn,omitempty" yaml:"local_asn,omitempty"`
	// RemoteAsn is remote autonomous system number.
	RemoteAsn int `json:"remote_asn,omitempty" yaml:"remote_asn,omitempty"`
	// State is state of the peer.
	State BgpPeerState `json:"state,omitempty" yaml:"state,omitempty"`
	// StateDurationMillis is time of last state change.
	StateDurationMillis int `json:"state_duration_millis,omitempty" yaml:"state_duration_millis,omitempty"`
	// Switch is switch with the peer session.
	Switch SwitchLocation `json:"switch,omitempty" yaml:"switch,omitempty"`
}

// BinRangedoubleType is the type definition for a BinRangedoubleType.
type BinRangedoubleType string

// BinRangedoubleRangeTo is a range unbounded below and exclusively above, `..end`.
type BinRangedoubleRangeTo struct {
	End  float64            `json:"end,omitempty" yaml:"end,omitempty"`
	Type BinRangedoubleType `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangedoubleRange is a range bounded inclusively below and exclusively above, `start..end`.
type BinRangedoubleRange struct {
	End   float64            `json:"end,omitempty" yaml:"end,omitempty"`
	Start float64            `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangedoubleType `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangedoubleRangeFrom is a range bounded inclusively below and unbounded above, `start..`.
type BinRangedoubleRangeFrom struct {
	Start float64            `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangedoubleType `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangedouble is a type storing a range over `T`.
//
// This type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.
type BinRangedouble struct {
	// End is the type definition for a End.
	End float64 `json:"end,omitempty" yaml:"end,omitempty"`
	// Type is the type definition for a Type.
	Type BinRangedoubleType `json:"type,omitempty" yaml:"type,omitempty"`
	// Start is the type definition for a Start.
	Start float64 `json:"start,omitempty" yaml:"start,omitempty"`
}

// BinRangefloatType is the type definition for a BinRangefloatType.
type BinRangefloatType string

// BinRangefloatRangeTo is a range unbounded below and exclusively above, `..end`.
type BinRangefloatRangeTo struct {
	End  float64           `json:"end,omitempty" yaml:"end,omitempty"`
	Type BinRangefloatType `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangefloatRange is a range bounded inclusively below and exclusively above, `start..end`.
type BinRangefloatRange struct {
	End   float64           `json:"end,omitempty" yaml:"end,omitempty"`
	Start float64           `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangefloatType `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangefloatRangeFrom is a range bounded inclusively below and unbounded above, `start..`.
type BinRangefloatRangeFrom struct {
	Start float64           `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangefloatType `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangefloat is a type storing a range over `T`.
//
// This type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.
type BinRangefloat struct {
	// End is the type definition for a End.
	End float64 `json:"end,omitempty" yaml:"end,omitempty"`
	// Type is the type definition for a Type.
	Type BinRangefloatType `json:"type,omitempty" yaml:"type,omitempty"`
	// Start is the type definition for a Start.
	Start float64 `json:"start,omitempty" yaml:"start,omitempty"`
}

// BinRangeint16Type is the type definition for a BinRangeint16Type.
type BinRangeint16Type string

// BinRangeint16RangeTo is a range unbounded below and exclusively above, `..end`.
type BinRangeint16RangeTo struct {
	End  int               `json:"end,omitempty" yaml:"end,omitempty"`
	Type BinRangeint16Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeint16Range is a range bounded inclusively below and exclusively above, `start..end`.
type BinRangeint16Range struct {
	End   int               `json:"end,omitempty" yaml:"end,omitempty"`
	Start int               `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangeint16Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeint16RangeFrom is a range bounded inclusively below and unbounded above, `start..`.
type BinRangeint16RangeFrom struct {
	Start int               `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangeint16Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeint16 is a type storing a range over `T`.
//
// This type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.
type BinRangeint16 struct {
	// End is the type definition for a End.
	End int `json:"end,omitempty" yaml:"end,omitempty"`
	// Type is the type definition for a Type.
	Type BinRangeint16Type `json:"type,omitempty" yaml:"type,omitempty"`
	// Start is the type definition for a Start.
	Start int `json:"start,omitempty" yaml:"start,omitempty"`
}

// BinRangeint32Type is the type definition for a BinRangeint32Type.
type BinRangeint32Type string

// BinRangeint32RangeTo is a range unbounded below and exclusively above, `..end`.
type BinRangeint32RangeTo struct {
	End  int               `json:"end,omitempty" yaml:"end,omitempty"`
	Type BinRangeint32Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeint32Range is a range bounded inclusively below and exclusively above, `start..end`.
type BinRangeint32Range struct {
	End   int               `json:"end,omitempty" yaml:"end,omitempty"`
	Start int               `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangeint32Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeint32RangeFrom is a range bounded inclusively below and unbounded above, `start..`.
type BinRangeint32RangeFrom struct {
	Start int               `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangeint32Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeint32 is a type storing a range over `T`.
//
// This type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.
type BinRangeint32 struct {
	// End is the type definition for a End.
	End int `json:"end,omitempty" yaml:"end,omitempty"`
	// Type is the type definition for a Type.
	Type BinRangeint32Type `json:"type,omitempty" yaml:"type,omitempty"`
	// Start is the type definition for a Start.
	Start int `json:"start,omitempty" yaml:"start,omitempty"`
}

// BinRangeint64Type is the type definition for a BinRangeint64Type.
type BinRangeint64Type string

// BinRangeint64RangeTo is a range unbounded below and exclusively above, `..end`.
type BinRangeint64RangeTo struct {
	End  int               `json:"end,omitempty" yaml:"end,omitempty"`
	Type BinRangeint64Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeint64Range is a range bounded inclusively below and exclusively above, `start..end`.
type BinRangeint64Range struct {
	End   int               `json:"end,omitempty" yaml:"end,omitempty"`
	Start int               `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangeint64Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeint64RangeFrom is a range bounded inclusively below and unbounded above, `start..`.
type BinRangeint64RangeFrom struct {
	Start int               `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangeint64Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeint64 is a type storing a range over `T`.
//
// This type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.
type BinRangeint64 struct {
	// End is the type definition for a End.
	End int `json:"end,omitempty" yaml:"end,omitempty"`
	// Type is the type definition for a Type.
	Type BinRangeint64Type `json:"type,omitempty" yaml:"type,omitempty"`
	// Start is the type definition for a Start.
	Start int `json:"start,omitempty" yaml:"start,omitempty"`
}

// BinRangeint8Type is the type definition for a BinRangeint8Type.
type BinRangeint8Type string

// BinRangeint8RangeTo is a range unbounded below and exclusively above, `..end`.
type BinRangeint8RangeTo struct {
	End  int              `json:"end,omitempty" yaml:"end,omitempty"`
	Type BinRangeint8Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeint8Range is a range bounded inclusively below and exclusively above, `start..end`.
type BinRangeint8Range struct {
	End   int              `json:"end,omitempty" yaml:"end,omitempty"`
	Start int              `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangeint8Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeint8RangeFrom is a range bounded inclusively below and unbounded above, `start..`.
type BinRangeint8RangeFrom struct {
	Start int              `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangeint8Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeint8 is a type storing a range over `T`.
//
// This type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.
type BinRangeint8 struct {
	// End is the type definition for a End.
	End int `json:"end,omitempty" yaml:"end,omitempty"`
	// Type is the type definition for a Type.
	Type BinRangeint8Type `json:"type,omitempty" yaml:"type,omitempty"`
	// Start is the type definition for a Start.
	Start int `json:"start,omitempty" yaml:"start,omitempty"`
}

// BinRangeuint16Type is the type definition for a BinRangeuint16Type.
type BinRangeuint16Type string

// BinRangeuint16RangeTo is a range unbounded below and exclusively above, `..end`.
type BinRangeuint16RangeTo struct {
	End  int                `json:"end,omitempty" yaml:"end,omitempty"`
	Type BinRangeuint16Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeuint16Range is a range bounded inclusively below and exclusively above, `start..end`.
type BinRangeuint16Range struct {
	End   int                `json:"end,omitempty" yaml:"end,omitempty"`
	Start int                `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangeuint16Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeuint16RangeFrom is a range bounded inclusively below and unbounded above, `start..`.
type BinRangeuint16RangeFrom struct {
	Start int                `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangeuint16Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeuint16 is a type storing a range over `T`.
//
// This type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.
type BinRangeuint16 struct {
	// End is the type definition for a End.
	End int `json:"end,omitempty" yaml:"end,omitempty"`
	// Type is the type definition for a Type.
	Type BinRangeuint16Type `json:"type,omitempty" yaml:"type,omitempty"`
	// Start is the type definition for a Start.
	Start int `json:"start,omitempty" yaml:"start,omitempty"`
}

// BinRangeuint32Type is the type definition for a BinRangeuint32Type.
type BinRangeuint32Type string

// BinRangeuint32RangeTo is a range unbounded below and exclusively above, `..end`.
type BinRangeuint32RangeTo struct {
	End  int                `json:"end,omitempty" yaml:"end,omitempty"`
	Type BinRangeuint32Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeuint32Range is a range bounded inclusively below and exclusively above, `start..end`.
type BinRangeuint32Range struct {
	End   int                `json:"end,omitempty" yaml:"end,omitempty"`
	Start int                `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangeuint32Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeuint32RangeFrom is a range bounded inclusively below and unbounded above, `start..`.
type BinRangeuint32RangeFrom struct {
	Start int                `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangeuint32Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeuint32 is a type storing a range over `T`.
//
// This type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.
type BinRangeuint32 struct {
	// End is the type definition for a End.
	End int `json:"end,omitempty" yaml:"end,omitempty"`
	// Type is the type definition for a Type.
	Type BinRangeuint32Type `json:"type,omitempty" yaml:"type,omitempty"`
	// Start is the type definition for a Start.
	Start int `json:"start,omitempty" yaml:"start,omitempty"`
}

// BinRangeuint64Type is the type definition for a BinRangeuint64Type.
type BinRangeuint64Type string

// BinRangeuint64RangeTo is a range unbounded below and exclusively above, `..end`.
type BinRangeuint64RangeTo struct {
	End  int                `json:"end,omitempty" yaml:"end,omitempty"`
	Type BinRangeuint64Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeuint64Range is a range bounded inclusively below and exclusively above, `start..end`.
type BinRangeuint64Range struct {
	End   int                `json:"end,omitempty" yaml:"end,omitempty"`
	Start int                `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangeuint64Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeuint64RangeFrom is a range bounded inclusively below and unbounded above, `start..`.
type BinRangeuint64RangeFrom struct {
	Start int                `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangeuint64Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeuint64 is a type storing a range over `T`.
//
// This type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.
type BinRangeuint64 struct {
	// End is the type definition for a End.
	End int `json:"end,omitempty" yaml:"end,omitempty"`
	// Type is the type definition for a Type.
	Type BinRangeuint64Type `json:"type,omitempty" yaml:"type,omitempty"`
	// Start is the type definition for a Start.
	Start int `json:"start,omitempty" yaml:"start,omitempty"`
}

// BinRangeuint8Type is the type definition for a BinRangeuint8Type.
type BinRangeuint8Type string

// BinRangeuint8RangeTo is a range unbounded below and exclusively above, `..end`.
type BinRangeuint8RangeTo struct {
	End  int               `json:"end,omitempty" yaml:"end,omitempty"`
	Type BinRangeuint8Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeuint8Range is a range bounded inclusively below and exclusively above, `start..end`.
type BinRangeuint8Range struct {
	End   int               `json:"end,omitempty" yaml:"end,omitempty"`
	Start int               `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangeuint8Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeuint8RangeFrom is a range bounded inclusively below and unbounded above, `start..`.
type BinRangeuint8RangeFrom struct {
	Start int               `json:"start,omitempty" yaml:"start,omitempty"`
	Type  BinRangeuint8Type `json:"type,omitempty" yaml:"type,omitempty"`
}

// BinRangeuint8 is a type storing a range over `T`.
//
// This type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.
type BinRangeuint8 struct {
	// End is the type definition for a End.
	End int `json:"end,omitempty" yaml:"end,omitempty"`
	// Type is the type definition for a Type.
	Type BinRangeuint8Type `json:"type,omitempty" yaml:"type,omitempty"`
	// Start is the type definition for a Start.
	Start int `json:"start,omitempty" yaml:"start,omitempty"`
}

// Bindouble is type storing bin edges and a count of samples within it.
type Bindouble struct {
	// Count is the total count of samples in this bin.
	Count int `json:"count,omitempty" yaml:"count,omitempty"`
	// Range is the range of the support covered by this bin.
	Range BinRangedouble `json:"range,omitempty" yaml:"range,omitempty"`
}

// Binfloat is type storing bin edges and a count of samples within it.
type Binfloat struct {
	// Count is the total count of samples in this bin.
	Count int `json:"count,omitempty" yaml:"count,omitempty"`
	// Range is the range of the support covered by this bin.
	Range BinRangefloat `json:"range,omitempty" yaml:"range,omitempty"`
}

// Binint16 is type storing bin edges and a count of samples within it.
type Binint16 struct {
	// Count is the total count of samples in this bin.
	Count int `json:"count,omitempty" yaml:"count,omitempty"`
	// Range is the range of the support covered by this bin.
	Range BinRangeint16 `json:"range,omitempty" yaml:"range,omitempty"`
}

// Binint32 is type storing bin edges and a count of samples within it.
type Binint32 struct {
	// Count is the total count of samples in this bin.
	Count int `json:"count,omitempty" yaml:"count,omitempty"`
	// Range is the range of the support covered by this bin.
	Range BinRangeint32 `json:"range,omitempty" yaml:"range,omitempty"`
}

// Binint64 is type storing bin edges and a count of samples within it.
type Binint64 struct {
	// Count is the total count of samples in this bin.
	Count int `json:"count,omitempty" yaml:"count,omitempty"`
	// Range is the range of the support covered by this bin.
	Range BinRangeint64 `json:"range,omitempty" yaml:"range,omitempty"`
}

// Binint8 is type storing bin edges and a count of samples within it.
type Binint8 struct {
	// Count is the total count of samples in this bin.
	Count int `json:"count,omitempty" yaml:"count,omitempty"`
	// Range is the range of the support covered by this bin.
	Range BinRangeint8 `json:"range,omitempty" yaml:"range,omitempty"`
}

// Binuint16 is type storing bin edges and a count of samples within it.
type Binuint16 struct {
	// Count is the total count of samples in this bin.
	Count int `json:"count,omitempty" yaml:"count,omitempty"`
	// Range is the range of the support covered by this bin.
	Range BinRangeuint16 `json:"range,omitempty" yaml:"range,omitempty"`
}

// Binuint32 is type storing bin edges and a count of samples within it.
type Binuint32 struct {
	// Count is the total count of samples in this bin.
	Count int `json:"count,omitempty" yaml:"count,omitempty"`
	// Range is the range of the support covered by this bin.
	Range BinRangeuint32 `json:"range,omitempty" yaml:"range,omitempty"`
}

// Binuint64 is type storing bin edges and a count of samples within it.
type Binuint64 struct {
	// Count is the total count of samples in this bin.
	Count int `json:"count,omitempty" yaml:"count,omitempty"`
	// Range is the range of the support covered by this bin.
	Range BinRangeuint64 `json:"range,omitempty" yaml:"range,omitempty"`
}

// Binuint8 is type storing bin edges and a count of samples within it.
type Binuint8 struct {
	// Count is the total count of samples in this bin.
	Count int `json:"count,omitempty" yaml:"count,omitempty"`
	// Range is the range of the support covered by this bin.
	Range BinRangeuint8 `json:"range,omitempty" yaml:"range,omitempty"`
}

// BlockSize is the type definition for a BlockSize.
type BlockSize int

// ByteCount is byte count to express memory or storage capacity.
type ByteCount uint64

// Certificate is view of a Certificate
type Certificate struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Service is the service intended to use this certificate.
	Service ServiceUsingCertificate `json:"service,omitempty" yaml:"service,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// CertificateCreate is create-time parameters for a `Certificate`
type CertificateCreate struct {
	// Cert is pEM-formatted string containing public certificate chain
	Cert        string `json:"cert,omitempty" yaml:"cert,omitempty"`
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Key is pEM-formatted string containing private key
	Key string `json:"key,omitempty" yaml:"key,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Service is the service using this certificate
	Service ServiceUsingCertificate `json:"service,omitempty" yaml:"service,omitempty"`
}

// CertificateResultsPage is a single page of results
type CertificateResultsPage struct {
	// Items is list of items on this page of results
	Items []Certificate `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Cumulativedouble is a cumulative or counter data type.
type Cumulativedouble struct {
	StartTime *time.Time `json:"start_time,omitempty" yaml:"start_time,omitempty"`
	Value     float64    `json:"value,omitempty" yaml:"value,omitempty"`
}

// Cumulativefloat is a cumulative or counter data type.
type Cumulativefloat struct {
	StartTime *time.Time `json:"start_time,omitempty" yaml:"start_time,omitempty"`
	Value     float64    `json:"value,omitempty" yaml:"value,omitempty"`
}

// Cumulativeint64 is a cumulative or counter data type.
type Cumulativeint64 struct {
	StartTime *time.Time `json:"start_time,omitempty" yaml:"start_time,omitempty"`
	Value     int        `json:"value,omitempty" yaml:"value,omitempty"`
}

// Cumulativeuint64 is a cumulative or counter data type.
type Cumulativeuint64 struct {
	StartTime *time.Time `json:"start_time,omitempty" yaml:"start_time,omitempty"`
	Value     int        `json:"value,omitempty" yaml:"value,omitempty"`
}

// CurrentUser is info about the current user
type CurrentUser struct {
	// DisplayName is human-readable name that can identify the user
	DisplayName string `json:"display_name,omitempty" yaml:"display_name,omitempty"`
	Id          string `json:"id,omitempty" yaml:"id,omitempty"`
	// SiloId is uuid of the silo to which this user belongs
	SiloId string `json:"silo_id,omitempty" yaml:"silo_id,omitempty"`
	// SiloName is name of the silo to which this user belongs.
	SiloName Name `json:"silo_name,omitempty" yaml:"silo_name,omitempty"`
}

// DatumType is the type definition for a DatumType.
type DatumType string

// DatumBool is the type definition for a DatumBool.
type DatumBool struct {
	Datum *bool     `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumI8 is the type definition for a DatumI8.
type DatumI8 struct {
	Datum int       `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumU8 is the type definition for a DatumU8.
type DatumU8 struct {
	Datum int       `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumI16 is the type definition for a DatumI16.
type DatumI16 struct {
	Datum int       `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumU16 is the type definition for a DatumU16.
type DatumU16 struct {
	Datum int       `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumI32 is the type definition for a DatumI32.
type DatumI32 struct {
	Datum int       `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumU32 is the type definition for a DatumU32.
type DatumU32 struct {
	Datum int       `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumI64 is the type definition for a DatumI64.
type DatumI64 struct {
	Datum int       `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumU64 is the type definition for a DatumU64.
type DatumU64 struct {
	Datum int       `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumF32 is the type definition for a DatumF32.
type DatumF32 struct {
	Datum float64   `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumF64 is the type definition for a DatumF64.
type DatumF64 struct {
	Datum float64   `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumString is the type definition for a DatumString.
type DatumString struct {
	Datum string    `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumBytes is the type definition for a DatumBytes.
type DatumBytes struct {
	Datum []string  `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumCumulativeI64 is the type definition for a DatumCumulativeI64.
type DatumCumulativeI64 struct {
	// Datum is a cumulative or counter data type.
	Datum Cumulativeint64 `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType       `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumCumulativeU64 is the type definition for a DatumCumulativeU64.
type DatumCumulativeU64 struct {
	// Datum is a cumulative or counter data type.
	Datum Cumulativeuint64 `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType        `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumCumulativeF32 is the type definition for a DatumCumulativeF32.
type DatumCumulativeF32 struct {
	// Datum is a cumulative or counter data type.
	Datum Cumulativefloat `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType       `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumCumulativeF64 is the type definition for a DatumCumulativeF64.
type DatumCumulativeF64 struct {
	// Datum is a cumulative or counter data type.
	Datum Cumulativedouble `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType        `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumHistogramI8 is the type definition for a DatumHistogramI8.
type DatumHistogramI8 struct {
	// Datum is histogram metric
	//
	// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
	//
	// Note that any gaps, unsorted bins, or non-finite values will result in an error.
	Datum Histogramint8 `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType     `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumHistogramU8 is the type definition for a DatumHistogramU8.
type DatumHistogramU8 struct {
	// Datum is histogram metric
	//
	// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
	//
	// Note that any gaps, unsorted bins, or non-finite values will result in an error.
	Datum Histogramuint8 `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType      `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumHistogramI16 is the type definition for a DatumHistogramI16.
type DatumHistogramI16 struct {
	// Datum is histogram metric
	//
	// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
	//
	// Note that any gaps, unsorted bins, or non-finite values will result in an error.
	Datum Histogramint16 `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType      `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumHistogramU16 is the type definition for a DatumHistogramU16.
type DatumHistogramU16 struct {
	// Datum is histogram metric
	//
	// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
	//
	// Note that any gaps, unsorted bins, or non-finite values will result in an error.
	Datum Histogramuint16 `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType       `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumHistogramI32 is the type definition for a DatumHistogramI32.
type DatumHistogramI32 struct {
	// Datum is histogram metric
	//
	// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
	//
	// Note that any gaps, unsorted bins, or non-finite values will result in an error.
	Datum Histogramint32 `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType      `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumHistogramU32 is the type definition for a DatumHistogramU32.
type DatumHistogramU32 struct {
	// Datum is histogram metric
	//
	// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
	//
	// Note that any gaps, unsorted bins, or non-finite values will result in an error.
	Datum Histogramuint32 `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType       `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumHistogramI64 is the type definition for a DatumHistogramI64.
type DatumHistogramI64 struct {
	// Datum is histogram metric
	//
	// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
	//
	// Note that any gaps, unsorted bins, or non-finite values will result in an error.
	Datum Histogramint64 `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType      `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumHistogramU64 is the type definition for a DatumHistogramU64.
type DatumHistogramU64 struct {
	// Datum is histogram metric
	//
	// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
	//
	// Note that any gaps, unsorted bins, or non-finite values will result in an error.
	Datum Histogramuint64 `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType       `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumHistogramF32 is the type definition for a DatumHistogramF32.
type DatumHistogramF32 struct {
	// Datum is histogram metric
	//
	// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
	//
	// Note that any gaps, unsorted bins, or non-finite values will result in an error.
	Datum Histogramfloat `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType      `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumHistogramF64 is the type definition for a DatumHistogramF64.
type DatumHistogramF64 struct {
	// Datum is histogram metric
	//
	// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
	//
	// Note that any gaps, unsorted bins, or non-finite values will result in an error.
	Datum Histogramdouble `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType       `json:"type,omitempty" yaml:"type,omitempty"`
}

// DatumMissing is the type definition for a DatumMissing.
type DatumMissing struct {
	Datum MissingDatum `json:"datum,omitempty" yaml:"datum,omitempty"`
	Type  DatumType    `json:"type,omitempty" yaml:"type,omitempty"`
}

// Datum is a `Datum` is a single sampled data point from a metric.
type Datum struct {
	// Datum is the type definition for a Datum.
	Datum *bool `json:"datum,omitempty" yaml:"datum,omitempty"`
	// Type is the type definition for a Type.
	Type DatumType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DerEncodedKeyPair is the type definition for a DerEncodedKeyPair.
type DerEncodedKeyPair struct {
	// PrivateKey is request signing private key (base64 encoded der file)
	PrivateKey string `json:"private_key,omitempty" yaml:"private_key,omitempty"`
	// PublicCert is request signing public certificate (base64 encoded der file)
	PublicCert string `json:"public_cert,omitempty" yaml:"public_cert,omitempty"`
}

// DeviceAccessTokenRequest is the type definition for a DeviceAccessTokenRequest.
type DeviceAccessTokenRequest struct {
	ClientId   string `json:"client_id,omitempty" yaml:"client_id,omitempty"`
	DeviceCode string `json:"device_code,omitempty" yaml:"device_code,omitempty"`
	GrantType  string `json:"grant_type,omitempty" yaml:"grant_type,omitempty"`
}

// DeviceAuthRequest is the type definition for a DeviceAuthRequest.
type DeviceAuthRequest struct {
	ClientId string `json:"client_id,omitempty" yaml:"client_id,omitempty"`
}

// DeviceAuthVerify is the type definition for a DeviceAuthVerify.
type DeviceAuthVerify struct {
	UserCode string `json:"user_code,omitempty" yaml:"user_code,omitempty"`
}

// DigestType is the type definition for a DigestType.
type DigestType string

// DigestSha256 is the type definition for a DigestSha256.
type DigestSha256 struct {
	Type  DigestType `json:"type,omitempty" yaml:"type,omitempty"`
	Value string     `json:"value,omitempty" yaml:"value,omitempty"`
}

// Digest is the type definition for a Digest.
type Digest struct {
	// Type is the type definition for a Type.
	Type DigestType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is the type definition for a Value.
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

// Disk is view of a Disk
type Disk struct {
	// BlockSize is byte count to express memory or storage capacity.
	BlockSize ByteCount `json:"block_size,omitempty" yaml:"block_size,omitempty"`
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	DevicePath  string `json:"device_path,omitempty" yaml:"device_path,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// ImageId is iD of image from which disk was created, if any
	ImageId string `json:"image_id,omitempty" yaml:"image_id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name      Name   `json:"name,omitempty" yaml:"name,omitempty"`
	ProjectId string `json:"project_id,omitempty" yaml:"project_id,omitempty"`
	// Size is byte count to express memory or storage capacity.
	Size ByteCount `json:"size,omitempty" yaml:"size,omitempty"`
	// SnapshotId is iD of snapshot from which disk was created, if any
	SnapshotId string `json:"snapshot_id,omitempty" yaml:"snapshot_id,omitempty"`
	// State is state of a Disk
	State DiskState `json:"state,omitempty" yaml:"state,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// DiskCreate is create-time parameters for a `Disk`
type DiskCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// DiskSource is initial source for this disk
	DiskSource DiskSource `json:"disk_source,omitempty" yaml:"disk_source,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Size is total size of the Disk in bytes
	Size ByteCount `json:"size,omitempty" yaml:"size,omitempty"`
}

// DiskMetricName is the type definition for a DiskMetricName.
type DiskMetricName string

// DiskPath is the type definition for a DiskPath.
type DiskPath struct {
	// Disk is name or ID of the disk
	Disk NameOrId `json:"disk,omitempty" yaml:"disk,omitempty"`
}

// DiskResultsPage is a single page of results
type DiskResultsPage struct {
	// Items is list of items on this page of results
	Items []Disk `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// DiskSourceType is the type definition for a DiskSourceType.
type DiskSourceType string

// DiskSourceBlank is create a blank disk
type DiskSourceBlank struct {
	// BlockSize is size of blocks for this Disk. valid values are: 512, 2048, or 4096
	BlockSize BlockSize      `json:"block_size,omitempty" yaml:"block_size,omitempty"`
	Type      DiskSourceType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DiskSourceSnapshot is create a disk from a disk snapshot
type DiskSourceSnapshot struct {
	SnapshotId string         `json:"snapshot_id,omitempty" yaml:"snapshot_id,omitempty"`
	Type       DiskSourceType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DiskSourceImage is create a disk from an image
type DiskSourceImage struct {
	ImageId string         `json:"image_id,omitempty" yaml:"image_id,omitempty"`
	Type    DiskSourceType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DiskSourceImportingBlocks is create a blank disk that will accept bulk writes or pull blocks from an external source.
type DiskSourceImportingBlocks struct {
	BlockSize BlockSize      `json:"block_size,omitempty" yaml:"block_size,omitempty"`
	Type      DiskSourceType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DiskSource is different sources for a disk
type DiskSource struct {
	// BlockSize is size of blocks for this Disk. valid values are: 512, 2048, or 4096
	BlockSize BlockSize `json:"block_size,omitempty" yaml:"block_size,omitempty"`
	// Type is the type definition for a Type.
	Type DiskSourceType `json:"type,omitempty" yaml:"type,omitempty"`
	// SnapshotId is the type definition for a SnapshotId.
	SnapshotId string `json:"snapshot_id,omitempty" yaml:"snapshot_id,omitempty"`
	// ImageId is the type definition for a ImageId.
	ImageId string `json:"image_id,omitempty" yaml:"image_id,omitempty"`
}

// DiskStateState is the type definition for a DiskStateState.
type DiskStateState string

// DiskStateCreating is disk is being initialized
type DiskStateCreating struct {
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// DiskStateDetached is disk is ready but detached from any Instance
type DiskStateDetached struct {
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// DiskStateImportReady is disk is ready to receive blocks from an external source
type DiskStateImportReady struct {
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// DiskStateImportingFromUrl is disk is importing blocks from a URL
type DiskStateImportingFromUrl struct {
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// DiskStateImportingFromBulkWrites is disk is importing blocks from bulk writes
type DiskStateImportingFromBulkWrites struct {
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// DiskStateFinalizing is disk is being finalized to state Detached
type DiskStateFinalizing struct {
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// DiskStateMaintenance is disk is undergoing maintenance
type DiskStateMaintenance struct {
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// DiskStateAttaching is disk is being attached to the given Instance
type DiskStateAttaching struct {
	Instance string         `json:"instance,omitempty" yaml:"instance,omitempty"`
	State    DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// DiskStateAttached is disk is attached to the given Instance
type DiskStateAttached struct {
	Instance string         `json:"instance,omitempty" yaml:"instance,omitempty"`
	State    DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// DiskStateDetaching is disk is being detached from the given Instance
type DiskStateDetaching struct {
	Instance string         `json:"instance,omitempty" yaml:"instance,omitempty"`
	State    DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// DiskStateDestroyed is disk has been destroyed
type DiskStateDestroyed struct {
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// DiskStateFaulted is disk is unavailable
type DiskStateFaulted struct {
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// DiskState is state of a Disk
type DiskState struct {
	// State is the type definition for a State.
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
	// Instance is the type definition for a Instance.
	Instance string `json:"instance,omitempty" yaml:"instance,omitempty"`
}

// EphemeralIpCreate is parameters for creating an ephemeral IP address for an instance.
type EphemeralIpCreate struct {
	// Pool is name or ID of the IP pool used to allocate an address
	Pool NameOrId `json:"pool,omitempty" yaml:"pool,omitempty"`
}

// Error is error information from a response.
type Error struct {
	ErrorCode string `json:"error_code,omitempty" yaml:"error_code,omitempty"`
	Message   string `json:"message,omitempty" yaml:"message,omitempty"`
	RequestId string `json:"request_id,omitempty" yaml:"request_id,omitempty"`
}

// ExternalIpKind is the type definition for a ExternalIpKind.
type ExternalIpKind string

// ExternalIpEphemeral is the type definition for a ExternalIpEphemeral.
type ExternalIpEphemeral struct {
	Ip   string         `json:"ip,omitempty" yaml:"ip,omitempty"`
	Kind ExternalIpKind `json:"kind,omitempty" yaml:"kind,omitempty"`
}

// ExternalIpFloating is a Floating IP is a well-known IP address which can be attached and detached from instances.
type ExternalIpFloating struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// InstanceId is the ID of the instance that this Floating IP is attached to, if it is presently in use.
	InstanceId string `json:"instance_id,omitempty" yaml:"instance_id,omitempty"`
	// Ip is the IP address held by this resource.
	Ip   string         `json:"ip,omitempty" yaml:"ip,omitempty"`
	Kind ExternalIpKind `json:"kind,omitempty" yaml:"kind,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// ProjectId is the project this resource exists within.
	ProjectId string `json:"project_id,omitempty" yaml:"project_id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// ExternalIp is the type definition for a ExternalIp.
type ExternalIp struct {
	// Ip is the type definition for a Ip.
	Ip string `json:"ip,omitempty" yaml:"ip,omitempty"`
	// Kind is the type definition for a Kind.
	Kind ExternalIpKind `json:"kind,omitempty" yaml:"kind,omitempty"`
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// InstanceId is the ID of the instance that this Floating IP is attached to, if it is presently in use.
	InstanceId string `json:"instance_id,omitempty" yaml:"instance_id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// ProjectId is the project this resource exists within.
	ProjectId string `json:"project_id,omitempty" yaml:"project_id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// ExternalIpCreateType is the type definition for a ExternalIpCreateType.
type ExternalIpCreateType string

// ExternalIpCreateEphemeral is an IP address providing both inbound and outbound access. The address is automatically-assigned from the provided IP Pool, or the current silo's default pool if not specified.
type ExternalIpCreateEphemeral struct {
	Pool NameOrId             `json:"pool,omitempty" yaml:"pool,omitempty"`
	Type ExternalIpCreateType `json:"type,omitempty" yaml:"type,omitempty"`
}

// ExternalIpCreateFloating is an IP address providing both inbound and outbound access. The address is an existing floating IP object assigned to the current project.
//
// The floating IP must not be in use by another instance or service.
type ExternalIpCreateFloating struct {
	FloatingIp NameOrId             `json:"floating_ip,omitempty" yaml:"floating_ip,omitempty"`
	Type       ExternalIpCreateType `json:"type,omitempty" yaml:"type,omitempty"`
}

// ExternalIpCreate is parameters for creating an external IP address for instances.
type ExternalIpCreate struct {
	// Pool is the type definition for a Pool.
	Pool NameOrId `json:"pool,omitempty" yaml:"pool,omitempty"`
	// Type is the type definition for a Type.
	Type ExternalIpCreateType `json:"type,omitempty" yaml:"type,omitempty"`
	// FloatingIp is the type definition for a FloatingIp.
	FloatingIp NameOrId `json:"floating_ip,omitempty" yaml:"floating_ip,omitempty"`
}

// ExternalIpResultsPage is a single page of results
type ExternalIpResultsPage struct {
	// Items is list of items on this page of results
	Items []ExternalIp `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// FinalizeDisk is parameters for finalizing a disk
type FinalizeDisk struct {
	// SnapshotName is if specified a snapshot of the disk will be created with the given name during finalization. If not specified, a snapshot for the disk will _not_ be created. A snapshot can be manually created once the disk transitions into the `Detached` state.
	SnapshotName Name `json:"snapshot_name,omitempty" yaml:"snapshot_name,omitempty"`
}

// FleetRole is the type definition for a FleetRole.
type FleetRole string

// FleetRolePolicy is policy for a particular resource
//
// Note that the Policy only describes access granted explicitly for this resource.  The policies of parent resources can also cause a user to have access to this resource.
type FleetRolePolicy struct {
	// RoleAssignments is roles directly assigned on this resource
	RoleAssignments []FleetRoleRoleAssignment `json:"role_assignments,omitempty" yaml:"role_assignments,omitempty"`
}

// FleetRoleRoleAssignment is describes the assignment of a particular role on a particular resource to a particular identity (user, group, etc.)
//
// The resource is not part of this structure.  Rather, `RoleAssignment`s are put into a `Policy` and that Policy is applied to a particular resource.
type FleetRoleRoleAssignment struct {
	IdentityId string `json:"identity_id,omitempty" yaml:"identity_id,omitempty"`
	// IdentityType is describes what kind of identity is described by an id
	IdentityType IdentityType `json:"identity_type,omitempty" yaml:"identity_type,omitempty"`
	RoleName     FleetRole    `json:"role_name,omitempty" yaml:"role_name,omitempty"`
}

// FloatingIp is a Floating IP is a well-known IP address which can be attached and detached from instances.
type FloatingIp struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// InstanceId is the ID of the instance that this Floating IP is attached to, if it is presently in use.
	InstanceId string `json:"instance_id,omitempty" yaml:"instance_id,omitempty"`
	// Ip is the IP address held by this resource.
	Ip string `json:"ip,omitempty" yaml:"ip,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// ProjectId is the project this resource exists within.
	ProjectId string `json:"project_id,omitempty" yaml:"project_id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// FloatingIpAttach is parameters for attaching a floating IP address to another resource
type FloatingIpAttach struct {
	// Kind is the type of `parent`'s resource
	Kind FloatingIpParentKind `json:"kind,omitempty" yaml:"kind,omitempty"`
	// Parent is name or ID of the resource that this IP address should be attached to
	Parent NameOrId `json:"parent,omitempty" yaml:"parent,omitempty"`
}

// FloatingIpCreate is parameters for creating a new floating IP address for instances.
type FloatingIpCreate struct {
	// Address is an IP address to reserve for use as a floating IP. This field is optional: when not set, an address will be automatically chosen from `pool`. If set, then the IP must be available in the resolved `pool`.
	Address     string `json:"address,omitempty" yaml:"address,omitempty"`
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Pool is the parent IP pool that a floating IP is pulled from. If unset, the default pool is selected.
	Pool NameOrId `json:"pool,omitempty" yaml:"pool,omitempty"`
}

// FloatingIpParentKind is the type of resource that a floating IP is attached to
type FloatingIpParentKind string

// FloatingIpResultsPage is a single page of results
type FloatingIpResultsPage struct {
	// Items is list of items on this page of results
	Items []FloatingIp `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Group is view of a Group
type Group struct {
	// DisplayName is human-readable name that can identify the group
	DisplayName string `json:"display_name,omitempty" yaml:"display_name,omitempty"`
	Id          string `json:"id,omitempty" yaml:"id,omitempty"`
	// SiloId is uuid of the silo to which this group belongs
	SiloId string `json:"silo_id,omitempty" yaml:"silo_id,omitempty"`
}

// GroupResultsPage is a single page of results
type GroupResultsPage struct {
	// Items is list of items on this page of results
	Items []Group `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Histogramdouble is histogram metric
//
// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
//
// Note that any gaps, unsorted bins, or non-finite values will result in an error.
type Histogramdouble struct {
	Bins      []Bindouble `json:"bins,omitempty" yaml:"bins,omitempty"`
	NSamples  int         `json:"n_samples,omitempty" yaml:"n_samples,omitempty"`
	StartTime *time.Time  `json:"start_time,omitempty" yaml:"start_time,omitempty"`
}

// Histogramfloat is histogram metric
//
// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
//
// Note that any gaps, unsorted bins, or non-finite values will result in an error.
type Histogramfloat struct {
	Bins      []Binfloat `json:"bins,omitempty" yaml:"bins,omitempty"`
	NSamples  int        `json:"n_samples,omitempty" yaml:"n_samples,omitempty"`
	StartTime *time.Time `json:"start_time,omitempty" yaml:"start_time,omitempty"`
}

// Histogramint16 is histogram metric
//
// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
//
// Note that any gaps, unsorted bins, or non-finite values will result in an error.
type Histogramint16 struct {
	Bins      []Binint16 `json:"bins,omitempty" yaml:"bins,omitempty"`
	NSamples  int        `json:"n_samples,omitempty" yaml:"n_samples,omitempty"`
	StartTime *time.Time `json:"start_time,omitempty" yaml:"start_time,omitempty"`
}

// Histogramint32 is histogram metric
//
// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
//
// Note that any gaps, unsorted bins, or non-finite values will result in an error.
type Histogramint32 struct {
	Bins      []Binint32 `json:"bins,omitempty" yaml:"bins,omitempty"`
	NSamples  int        `json:"n_samples,omitempty" yaml:"n_samples,omitempty"`
	StartTime *time.Time `json:"start_time,omitempty" yaml:"start_time,omitempty"`
}

// Histogramint64 is histogram metric
//
// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
//
// Note that any gaps, unsorted bins, or non-finite values will result in an error.
type Histogramint64 struct {
	Bins      []Binint64 `json:"bins,omitempty" yaml:"bins,omitempty"`
	NSamples  int        `json:"n_samples,omitempty" yaml:"n_samples,omitempty"`
	StartTime *time.Time `json:"start_time,omitempty" yaml:"start_time,omitempty"`
}

// Histogramint8 is histogram metric
//
// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
//
// Note that any gaps, unsorted bins, or non-finite values will result in an error.
type Histogramint8 struct {
	Bins      []Binint8  `json:"bins,omitempty" yaml:"bins,omitempty"`
	NSamples  int        `json:"n_samples,omitempty" yaml:"n_samples,omitempty"`
	StartTime *time.Time `json:"start_time,omitempty" yaml:"start_time,omitempty"`
}

// Histogramuint16 is histogram metric
//
// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
//
// Note that any gaps, unsorted bins, or non-finite values will result in an error.
type Histogramuint16 struct {
	Bins      []Binuint16 `json:"bins,omitempty" yaml:"bins,omitempty"`
	NSamples  int         `json:"n_samples,omitempty" yaml:"n_samples,omitempty"`
	StartTime *time.Time  `json:"start_time,omitempty" yaml:"start_time,omitempty"`
}

// Histogramuint32 is histogram metric
//
// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
//
// Note that any gaps, unsorted bins, or non-finite values will result in an error.
type Histogramuint32 struct {
	Bins      []Binuint32 `json:"bins,omitempty" yaml:"bins,omitempty"`
	NSamples  int         `json:"n_samples,omitempty" yaml:"n_samples,omitempty"`
	StartTime *time.Time  `json:"start_time,omitempty" yaml:"start_time,omitempty"`
}

// Histogramuint64 is histogram metric
//
// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
//
// Note that any gaps, unsorted bins, or non-finite values will result in an error.
type Histogramuint64 struct {
	Bins      []Binuint64 `json:"bins,omitempty" yaml:"bins,omitempty"`
	NSamples  int         `json:"n_samples,omitempty" yaml:"n_samples,omitempty"`
	StartTime *time.Time  `json:"start_time,omitempty" yaml:"start_time,omitempty"`
}

// Histogramuint8 is histogram metric
//
// A histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any "gaps" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.
//
// Note that any gaps, unsorted bins, or non-finite values will result in an error.
type Histogramuint8 struct {
	Bins      []Binuint8 `json:"bins,omitempty" yaml:"bins,omitempty"`
	NSamples  int        `json:"n_samples,omitempty" yaml:"n_samples,omitempty"`
	StartTime *time.Time `json:"start_time,omitempty" yaml:"start_time,omitempty"`
}

// Hostname is a hostname identifies a host on a network, and is usually a dot-delimited sequence of labels, where each label contains only letters, digits, or the hyphen. See RFCs 1035 and 952 for more details.
type Hostname string

// IdSortMode is sort in increasing order of "id"
type IdSortMode string

// IdentityProvider is view of an Identity Provider
type IdentityProvider struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// ProviderType is identity provider type
	ProviderType IdentityProviderType `json:"provider_type,omitempty" yaml:"provider_type,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// IdentityProviderResultsPage is a single page of results
type IdentityProviderResultsPage struct {
	// Items is list of items on this page of results
	Items []IdentityProvider `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// IdentityProviderType is sAML identity provider
type IdentityProviderType string

// IdentityType is describes what kind of identity is described by an id
type IdentityType string

// IdpMetadataSourceType is the type definition for a IdpMetadataSourceType.
type IdpMetadataSourceType string

// IdpMetadataSourceUrl is the type definition for a IdpMetadataSourceUrl.
type IdpMetadataSourceUrl struct {
	Type IdpMetadataSourceType `json:"type,omitempty" yaml:"type,omitempty"`
	Url  string                `json:"url,omitempty" yaml:"url,omitempty"`
}

// IdpMetadataSourceBase64EncodedXml is the type definition for a IdpMetadataSourceBase64EncodedXml.
type IdpMetadataSourceBase64EncodedXml struct {
	Data string                `json:"data,omitempty" yaml:"data,omitempty"`
	Type IdpMetadataSourceType `json:"type,omitempty" yaml:"type,omitempty"`
}

// IdpMetadataSource is the type definition for a IdpMetadataSource.
type IdpMetadataSource struct {
	// Type is the type definition for a Type.
	Type IdpMetadataSourceType `json:"type,omitempty" yaml:"type,omitempty"`
	// Url is the type definition for a Url.
	Url string `json:"url,omitempty" yaml:"url,omitempty"`
	// Data is the type definition for a Data.
	Data string `json:"data,omitempty" yaml:"data,omitempty"`
}

// Image is view of an image
//
// If `project_id` is present then the image is only visible inside that project. If it's not present then the image is visible to all projects in the silo.
type Image struct {
	// BlockSize is size of blocks in bytes
	BlockSize ByteCount `json:"block_size,omitempty" yaml:"block_size,omitempty"`
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Digest is hash of the image contents, if applicable
	Digest Digest `json:"digest,omitempty" yaml:"digest,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Os is the family of the operating system like Debian, Ubuntu, etc.
	Os string `json:"os,omitempty" yaml:"os,omitempty"`
	// ProjectId is iD of the parent project if the image is a project image
	ProjectId string `json:"project_id,omitempty" yaml:"project_id,omitempty"`
	// Size is total size in bytes
	Size ByteCount `json:"size,omitempty" yaml:"size,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// Version is version of the operating system
	Version string `json:"version,omitempty" yaml:"version,omitempty"`
}

// ImageCreate is create-time parameters for an `Image`
type ImageCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Os is the family of the operating system (e.g. Debian, Ubuntu, etc.)
	Os string `json:"os,omitempty" yaml:"os,omitempty"`
	// Source is the source of the image's contents.
	Source ImageSource `json:"source,omitempty" yaml:"source,omitempty"`
	// Version is the version of the operating system (e.g. 18.04, 20.04, etc.)
	Version string `json:"version,omitempty" yaml:"version,omitempty"`
}

// ImageResultsPage is a single page of results
type ImageResultsPage struct {
	// Items is list of items on this page of results
	Items []Image `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// ImageSourceType is the type definition for a ImageSourceType.
type ImageSourceType string

// ImageSourceSnapshot is the type definition for a ImageSourceSnapshot.
type ImageSourceSnapshot struct {
	Id   string          `json:"id,omitempty" yaml:"id,omitempty"`
	Type ImageSourceType `json:"type,omitempty" yaml:"type,omitempty"`
}

// ImageSourceYouCanBootAnythingAsLongAsItsAlpine is boot the Alpine ISO that ships with the Propolis zone. Intended for development purposes only.
type ImageSourceYouCanBootAnythingAsLongAsItsAlpine struct {
	Type ImageSourceType `json:"type,omitempty" yaml:"type,omitempty"`
}

// ImageSource is the source of the underlying image.
type ImageSource struct {
	// Id is the type definition for a Id.
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Type is the type definition for a Type.
	Type ImageSourceType `json:"type,omitempty" yaml:"type,omitempty"`
}

// ImportBlocksBulkWrite is parameters for importing blocks with a bulk write
type ImportBlocksBulkWrite struct {
	Base64EncodedData string `json:"base64_encoded_data,omitempty" yaml:"base64_encoded_data,omitempty"`
	Offset            int    `json:"offset,omitempty" yaml:"offset,omitempty"`
}

// Instance is view of an Instance
type Instance struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Hostname is rFC1035-compliant hostname for the Instance.
	Hostname string `json:"hostname,omitempty" yaml:"hostname,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Memory is memory allocated for this Instance
	Memory ByteCount `json:"memory,omitempty" yaml:"memory,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Ncpus is number of CPUs allocated for this Instance
	Ncpus InstanceCpuCount `json:"ncpus,omitempty" yaml:"ncpus,omitempty"`
	// ProjectId is id for the project containing this Instance
	ProjectId string `json:"project_id,omitempty" yaml:"project_id,omitempty"`
	// RunState is running state of an Instance (primarily: booted or stopped)
	//
	// This typically reflects whether it's starting, running, stopping, or stopped, but also includes states related to the Instance's lifecycle
	RunState InstanceState `json:"run_state,omitempty" yaml:"run_state,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified        *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	TimeRunStateUpdated *time.Time `json:"time_run_state_updated,omitempty" yaml:"time_run_state_updated,omitempty"`
}

// InstanceCpuCount is the number of CPUs in an Instance
type InstanceCpuCount uint16

// InstanceCreate is create-time parameters for an `Instance`
type InstanceCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Disks is the disks to be created or attached for this instance.
	Disks []InstanceDiskAttachment `json:"disks,omitempty" yaml:"disks,omitempty"`
	// ExternalIps is the external IP addresses provided to this instance.
	//
	// By default, all instances have outbound connectivity, but no inbound connectivity. These external addresses can be used to provide a fixed, known IP address for making inbound connections to the instance.
	ExternalIps []ExternalIpCreate `json:"external_ips,omitempty" yaml:"external_ips,omitempty"`
	// Hostname is a hostname identifies a host on a network, and is usually a dot-delimited sequence of labels, where each label contains only letters, digits, or the hyphen. See RFCs 1035 and 952 for more details.
	Hostname Hostname `json:"hostname,omitempty" yaml:"hostname,omitempty"`
	// Memory is byte count to express memory or storage capacity.
	Memory ByteCount `json:"memory,omitempty" yaml:"memory,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Ncpus is the number of CPUs in an Instance
	Ncpus InstanceCpuCount `json:"ncpus,omitempty" yaml:"ncpus,omitempty"`
	// NetworkInterfaces is the network interfaces to be created for this instance.
	NetworkInterfaces InstanceNetworkInterfaceAttachment `json:"network_interfaces,omitempty" yaml:"network_interfaces,omitempty"`
	// SshPublicKeys is an allowlist of SSH public keys to be transferred to the instance via cloud-init during instance creation.
	//
	// If not provided, all SSH public keys from the user's profile will be sent. If an empty list is provided, no public keys will be transmitted to the instance.
	SshPublicKeys []NameOrId `json:"ssh_public_keys" yaml:"ssh_public_keys"`
	// Start is should this instance be started upon creation; true by default.
	Start *bool `json:"start,omitempty" yaml:"start,omitempty"`
	// UserData is user data for instance initialization systems (such as cloud-init). Must be a Base64-encoded string, as specified in RFC 4648 § 4 (+ and / characters with padding). Maximum 32 KiB unencoded data.
	UserData string `json:"user_data,omitempty" yaml:"user_data,omitempty"`
}

// InstanceDiskAttachmentType is the type definition for a InstanceDiskAttachmentType.
type InstanceDiskAttachmentType string

// InstanceDiskAttachmentCreate is during instance creation, create and attach disks
type InstanceDiskAttachmentCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// DiskSource is initial source for this disk
	DiskSource DiskSource `json:"disk_source,omitempty" yaml:"disk_source,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Size is total size of the Disk in bytes
	Size ByteCount                  `json:"size,omitempty" yaml:"size,omitempty"`
	Type InstanceDiskAttachmentType `json:"type,omitempty" yaml:"type,omitempty"`
}

// InstanceDiskAttachmentAttach is during instance creation, attach this disk
type InstanceDiskAttachmentAttach struct {
	// Name is a disk name to attach
	Name Name                       `json:"name,omitempty" yaml:"name,omitempty"`
	Type InstanceDiskAttachmentType `json:"type,omitempty" yaml:"type,omitempty"`
}

// InstanceDiskAttachment is describe the instance's disks at creation time
type InstanceDiskAttachment struct {
	// Description is the type definition for a Description.
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// DiskSource is initial source for this disk
	DiskSource DiskSource `json:"disk_source,omitempty" yaml:"disk_source,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Size is total size of the Disk in bytes
	Size ByteCount `json:"size,omitempty" yaml:"size,omitempty"`
	// Type is the type definition for a Type.
	Type InstanceDiskAttachmentType `json:"type,omitempty" yaml:"type,omitempty"`
}

// InstanceMigrate is migration parameters for an `Instance`
type InstanceMigrate struct {
	DstSledId string `json:"dst_sled_id,omitempty" yaml:"dst_sled_id,omitempty"`
}

// InstanceNetworkInterface is an `InstanceNetworkInterface` represents a virtual network interface device attached to an instance.
type InstanceNetworkInterface struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// InstanceId is the Instance to which the interface belongs.
	InstanceId string `json:"instance_id,omitempty" yaml:"instance_id,omitempty"`
	// Ip is the IP address assigned to this interface.
	Ip string `json:"ip,omitempty" yaml:"ip,omitempty"`
	// Mac is the MAC address assigned to this interface.
	Mac MacAddr `json:"mac,omitempty" yaml:"mac,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Primary is true if this interface is the primary for the instance to which it's attached.
	Primary *bool `json:"primary,omitempty" yaml:"primary,omitempty"`
	// SubnetId is the subnet to which the interface belongs.
	SubnetId string `json:"subnet_id,omitempty" yaml:"subnet_id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// VpcId is the VPC to which the interface belongs.
	VpcId string `json:"vpc_id,omitempty" yaml:"vpc_id,omitempty"`
}

// InstanceNetworkInterfaceAttachmentType is the type definition for a InstanceNetworkInterfaceAttachmentType.
type InstanceNetworkInterfaceAttachmentType string

// InstanceNetworkInterfaceAttachmentCreate is create one or more `InstanceNetworkInterface`s for the `Instance`.
//
// If more than one interface is provided, then the first will be designated the primary interface for the instance.
type InstanceNetworkInterfaceAttachmentCreate struct {
	Params []InstanceNetworkInterfaceCreate       `json:"params,omitempty" yaml:"params,omitempty"`
	Type   InstanceNetworkInterfaceAttachmentType `json:"type,omitempty" yaml:"type,omitempty"`
}

// InstanceNetworkInterfaceAttachmentDefault is the default networking configuration for an instance is to create a single primary interface with an automatically-assigned IP address. The IP will be pulled from the Project's default VPC / VPC Subnet.
type InstanceNetworkInterfaceAttachmentDefault struct {
	Type InstanceNetworkInterfaceAttachmentType `json:"type,omitempty" yaml:"type,omitempty"`
}

// InstanceNetworkInterfaceAttachmentNone is no network interfaces at all will be created for the instance.
type InstanceNetworkInterfaceAttachmentNone struct {
	Type InstanceNetworkInterfaceAttachmentType `json:"type,omitempty" yaml:"type,omitempty"`
}

// InstanceNetworkInterfaceAttachment is describes an attachment of an `InstanceNetworkInterface` to an `Instance`, at the time the instance is created.
type InstanceNetworkInterfaceAttachment struct {
	// Params is the type definition for a Params.
	Params []InstanceNetworkInterfaceCreate `json:"params,omitempty" yaml:"params,omitempty"`
	// Type is the type definition for a Type.
	Type InstanceNetworkInterfaceAttachmentType `json:"type,omitempty" yaml:"type,omitempty"`
}

// InstanceNetworkInterfaceCreate is create-time parameters for an `InstanceNetworkInterface`
type InstanceNetworkInterfaceCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Ip is the IP address for the interface. One will be auto-assigned if not provided.
	Ip string `json:"ip,omitempty" yaml:"ip,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// SubnetName is the VPC Subnet in which to create the interface.
	SubnetName Name `json:"subnet_name,omitempty" yaml:"subnet_name,omitempty"`
	// VpcName is the VPC in which to create the interface.
	VpcName Name `json:"vpc_name,omitempty" yaml:"vpc_name,omitempty"`
}

// InstanceNetworkInterfaceResultsPage is a single page of results
type InstanceNetworkInterfaceResultsPage struct {
	// Items is list of items on this page of results
	Items []InstanceNetworkInterface `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// InstanceNetworkInterfaceUpdate is parameters for updating an `InstanceNetworkInterface`
//
// Note that modifying IP addresses for an interface is not yet supported, a new interface must be created instead.
type InstanceNetworkInterfaceUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	Name        Name   `json:"name,omitempty" yaml:"name,omitempty"`
	// Primary is make a secondary interface the instance's primary interface.
	//
	// If applied to a secondary interface, that interface will become the primary on the next reboot of the instance. Note that this may have implications for routing between instances, as the new primary interface will be on a distinct subnet from the previous primary interface.
	//
	// Note that this can only be used to select a new primary interface for an instance. Requests to change the primary interface into a secondary will return an error.
	Primary *bool `json:"primary,omitempty" yaml:"primary,omitempty"`
}

// InstanceResultsPage is a single page of results
type InstanceResultsPage struct {
	// Items is list of items on this page of results
	Items []Instance `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// InstanceSerialConsoleData is contents of an Instance's serial console buffer.
type InstanceSerialConsoleData struct {
	// Data is the bytes starting from the requested offset up to either the end of the buffer or the request's `max_bytes`. Provided as a u8 array rather than a string, as it may not be UTF-8.
	Data []string `json:"data,omitempty" yaml:"data,omitempty"`
	// LastByteOffset is the absolute offset since boot (suitable for use as `byte_offset` in a subsequent request) of the last byte returned in `data`.
	LastByteOffset int `json:"last_byte_offset,omitempty" yaml:"last_byte_offset,omitempty"`
}

// InstanceState is the instance is being created.
type InstanceState string

// IpNet is the type definition for a IpNet.
type IpNet interface{}

// IpPool is a collection of IP ranges. If a pool is linked to a silo, IP addresses from the pool can be allocated within that silo
type IpPool struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// IpPoolCreate is create-time parameters for an `IpPool`
type IpPoolCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// IpPoolLinkSilo is the type definition for a IpPoolLinkSilo.
type IpPoolLinkSilo struct {
	// IsDefault is when a pool is the default for a silo, floating IPs and instance ephemeral IPs will come from that pool when no other pool is specified. There can be at most one default for a given silo.
	IsDefault *bool    `json:"is_default,omitempty" yaml:"is_default,omitempty"`
	Silo      NameOrId `json:"silo,omitempty" yaml:"silo,omitempty"`
}

// IpPoolRange is the type definition for a IpPoolRange.
type IpPoolRange struct {
	Id          string     `json:"id,omitempty" yaml:"id,omitempty"`
	IpPoolId    string     `json:"ip_pool_id,omitempty" yaml:"ip_pool_id,omitempty"`
	Range       IpRange    `json:"range,omitempty" yaml:"range,omitempty"`
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
}

// IpPoolRangeResultsPage is a single page of results
type IpPoolRangeResultsPage struct {
	// Items is list of items on this page of results
	Items []IpPoolRange `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// IpPoolResultsPage is a single page of results
type IpPoolResultsPage struct {
	// Items is list of items on this page of results
	Items []IpPool `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// IpPoolSiloLink is a link between an IP pool and a silo that allows one to allocate IPs from the pool within the silo
type IpPoolSiloLink struct {
	IpPoolId string `json:"ip_pool_id,omitempty" yaml:"ip_pool_id,omitempty"`
	// IsDefault is when a pool is the default for a silo, floating IPs and instance ephemeral IPs will come from that pool when no other pool is specified. There can be at most one default for a given silo.
	IsDefault *bool  `json:"is_default,omitempty" yaml:"is_default,omitempty"`
	SiloId    string `json:"silo_id,omitempty" yaml:"silo_id,omitempty"`
}

// IpPoolSiloLinkResultsPage is a single page of results
type IpPoolSiloLinkResultsPage struct {
	// Items is list of items on this page of results
	Items []IpPoolSiloLink `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// IpPoolSiloUpdate is the type definition for a IpPoolSiloUpdate.
type IpPoolSiloUpdate struct {
	// IsDefault is when a pool is the default for a silo, floating IPs and instance ephemeral IPs will come from that pool when no other pool is specified. There can be at most one default for a given silo, so when a pool is made default, an existing default will remain linked but will no longer be the default.
	IsDefault *bool `json:"is_default,omitempty" yaml:"is_default,omitempty"`
}

// IpPoolUpdate is parameters for updating an IP Pool
type IpPoolUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	Name        Name   `json:"name,omitempty" yaml:"name,omitempty"`
}

// IpRange is the type definition for a IpRange.
type IpRange interface{}

// Ipv4Net is an IPv4 subnet, including prefix and subnet mask
type Ipv4Net string

// Ipv4Range is a non-decreasing IPv4 address range, inclusive of both ends.
//
// The first address must be less than or equal to the last address.
type Ipv4Range struct {
	First string `json:"first,omitempty" yaml:"first,omitempty"`
	Last  string `json:"last,omitempty" yaml:"last,omitempty"`
}

// Ipv6Net is an IPv6 subnet, including prefix and subnet mask
type Ipv6Net string

// Ipv6Range is a non-decreasing IPv6 address range, inclusive of both ends.
//
// The first address must be less than or equal to the last address.
type Ipv6Range struct {
	First string `json:"first,omitempty" yaml:"first,omitempty"`
	Last  string `json:"last,omitempty" yaml:"last,omitempty"`
}

// L4PortRange is an inclusive-inclusive range of IP ports. The second port may be omitted to represent a single port
type L4PortRange string

// LinkConfigCreate is switch link configuration.
type LinkConfigCreate struct {
	// Autoneg is whether or not to set autonegotiation
	Autoneg *bool `json:"autoneg,omitempty" yaml:"autoneg,omitempty"`
	// Fec is the forward error correction mode of the link.
	Fec LinkFec `json:"fec,omitempty" yaml:"fec,omitempty"`
	// Lldp is the link-layer discovery protocol (LLDP) configuration for the link.
	Lldp LldpServiceConfigCreate `json:"lldp,omitempty" yaml:"lldp,omitempty"`
	// Mtu is maximum transmission unit for the link.
	Mtu int `json:"mtu,omitempty" yaml:"mtu,omitempty"`
	// Speed is the speed of the link.
	Speed LinkSpeed `json:"speed,omitempty" yaml:"speed,omitempty"`
}

// LinkFec is firecode foward error correction.
type LinkFec string

// LinkSpeed is zero gigabits per second.
type LinkSpeed string

// LldpServiceConfig is a link layer discovery protocol (LLDP) service configuration.
type LldpServiceConfig struct {
	// Enabled is whether or not the LLDP service is enabled.
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty"`
	// Id is the id of this LLDP service instance.
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// LldpConfigId is the link-layer discovery protocol configuration for this service.
	LldpConfigId string `json:"lldp_config_id,omitempty" yaml:"lldp_config_id,omitempty"`
}

// LldpServiceConfigCreate is the LLDP configuration associated with a port. LLDP may be either enabled or disabled, if enabled, an LLDP configuration must be provided by name or id.
type LldpServiceConfigCreate struct {
	// Enabled is whether or not LLDP is enabled.
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty"`
	// LldpConfig is a reference to the LLDP configuration used. Must not be `None` when `enabled` is `true`.
	LldpConfig NameOrId `json:"lldp_config,omitempty" yaml:"lldp_config,omitempty"`
}

// LoopbackAddress is a loopback address is an address that is assigned to a rack switch but is not associated with any particular port.
type LoopbackAddress struct {
	// Address is the loopback IP address and prefix length.
	Address IpNet `json:"address,omitempty" yaml:"address,omitempty"`
	// AddressLotBlockId is the address lot block this address came from.
	AddressLotBlockId string `json:"address_lot_block_id,omitempty" yaml:"address_lot_block_id,omitempty"`
	// Id is the id of the loopback address.
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// RackId is the id of the rack where this loopback address is assigned.
	RackId string `json:"rack_id,omitempty" yaml:"rack_id,omitempty"`
	// SwitchLocation is switch location where this loopback address is assigned.
	SwitchLocation string `json:"switch_location,omitempty" yaml:"switch_location,omitempty"`
}

// LoopbackAddressCreate is parameters for creating a loopback address on a particular rack switch.
type LoopbackAddressCreate struct {
	// Address is the address to create.
	Address string `json:"address,omitempty" yaml:"address,omitempty"`
	// AddressLot is the name or id of the address lot this loopback address will pull an address from.
	AddressLot NameOrId `json:"address_lot,omitempty" yaml:"address_lot,omitempty"`
	// Anycast is address is an anycast address. This allows the address to be assigned to multiple locations simultaneously.
	Anycast *bool `json:"anycast,omitempty" yaml:"anycast,omitempty"`
	// Mask is the subnet mask to use for the address.
	Mask int `json:"mask,omitempty" yaml:"mask,omitempty"`
	// RackId is the containing the switch this loopback address will be configured on.
	RackId string `json:"rack_id,omitempty" yaml:"rack_id,omitempty"`
	// SwitchLocation is the location of the switch within the rack this loopback address will be configured on.
	SwitchLocation Name `json:"switch_location,omitempty" yaml:"switch_location,omitempty"`
}

// LoopbackAddressResultsPage is a single page of results
type LoopbackAddressResultsPage struct {
	// Items is list of items on this page of results
	Items []LoopbackAddress `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// MacAddr is a Media Access Control address, in EUI-48 format
type MacAddr string

// Measurement is a `Measurement` is a timestamped datum from a single metric
type Measurement struct {
	// Datum is a `Datum` is a single sampled data point from a metric.
	Datum     Datum      `json:"datum,omitempty" yaml:"datum,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty" yaml:"timestamp,omitempty"`
}

// MeasurementResultsPage is a single page of results
type MeasurementResultsPage struct {
	// Items is list of items on this page of results
	Items []Measurement `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// MissingDatum is the type definition for a MissingDatum.
type MissingDatum struct {
	// DatumType is the type of an individual datum of a metric.
	DatumType DatumType  `json:"datum_type,omitempty" yaml:"datum_type,omitempty"`
	StartTime *time.Time `json:"start_time,omitempty" yaml:"start_time,omitempty"`
}

// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
type Name string

// NameOrId is the type definition for a NameOrId.
type NameOrId string

// NameOrIdSortMode is sort in increasing order of "name"
type NameOrIdSortMode string

// NameSortMode is sort in increasing order of "name"
type NameSortMode string

// PaginationOrder is the order in which the client wants to page through the requested collection
type PaginationOrder string

// Password is passwords may be subject to additional constraints.
type Password string

// PhysicalDisk is view of a Physical Disk
//
// Physical disks reside in a particular sled and are used to store both Instance Disk data as well as internal metadata.
type PhysicalDisk struct {
	// FormFactor is describes the form factor of physical disks.
	FormFactor PhysicalDiskKind `json:"form_factor,omitempty" yaml:"form_factor,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id     string `json:"id,omitempty" yaml:"id,omitempty"`
	Model  string `json:"model,omitempty" yaml:"model,omitempty"`
	Serial string `json:"serial,omitempty" yaml:"serial,omitempty"`
	// SledId is the sled to which this disk is attached, if any.
	SledId string `json:"sled_id,omitempty" yaml:"sled_id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	Vendor       string     `json:"vendor,omitempty" yaml:"vendor,omitempty"`
}

// PhysicalDiskKind is describes the form factor of physical disks.
type PhysicalDiskKind string

// PhysicalDiskResultsPage is a single page of results
type PhysicalDiskResultsPage struct {
	// Items is list of items on this page of results
	Items []PhysicalDisk `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Ping is the type definition for a Ping.
type Ping struct {
	// Status is whether the external API is reachable. Will always be Ok if the endpoint returns anything at all.
	Status PingStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// PingStatus is the type definition for a PingStatus.
type PingStatus string

// Project is view of a Project
type Project struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// ProjectCreate is create-time parameters for a `Project`
type ProjectCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// ProjectResultsPage is a single page of results
type ProjectResultsPage struct {
	// Items is list of items on this page of results
	Items []Project `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// ProjectRole is the type definition for a ProjectRole.
type ProjectRole string

// ProjectRolePolicy is policy for a particular resource
//
// Note that the Policy only describes access granted explicitly for this resource.  The policies of parent resources can also cause a user to have access to this resource.
type ProjectRolePolicy struct {
	// RoleAssignments is roles directly assigned on this resource
	RoleAssignments []ProjectRoleRoleAssignment `json:"role_assignments,omitempty" yaml:"role_assignments,omitempty"`
}

// ProjectRoleRoleAssignment is describes the assignment of a particular role on a particular resource to a particular identity (user, group, etc.)
//
// The resource is not part of this structure.  Rather, `RoleAssignment`s are put into a `Policy` and that Policy is applied to a particular resource.
type ProjectRoleRoleAssignment struct {
	IdentityId string `json:"identity_id,omitempty" yaml:"identity_id,omitempty"`
	// IdentityType is describes what kind of identity is described by an id
	IdentityType IdentityType `json:"identity_type,omitempty" yaml:"identity_type,omitempty"`
	RoleName     ProjectRole  `json:"role_name,omitempty" yaml:"role_name,omitempty"`
}

// ProjectUpdate is updateable properties of a `Project`
type ProjectUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	Name        Name   `json:"name,omitempty" yaml:"name,omitempty"`
}

// Rack is view of an Rack
type Rack struct {
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// RackResultsPage is a single page of results
type RackResultsPage struct {
	// Items is list of items on this page of results
	Items []Rack `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Role is view of a Role
type Role struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is role names consist of two string components separated by dot (".").
	Name RoleName `json:"name,omitempty" yaml:"name,omitempty"`
}

// RoleName is role names consist of two string components separated by dot (".").
type RoleName string

// RoleResultsPage is a single page of results
type RoleResultsPage struct {
	// Items is list of items on this page of results
	Items []Role `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Route is a route to a destination network through a gateway address.
type Route struct {
	// Dst is the route destination.
	Dst IpNet `json:"dst,omitempty" yaml:"dst,omitempty"`
	// Gw is the route gateway.
	Gw string `json:"gw,omitempty" yaml:"gw,omitempty"`
	// Vid is vLAN id the gateway is reachable over.
	Vid int `json:"vid,omitempty" yaml:"vid,omitempty"`
}

// RouteConfig is route configuration data associated with a switch port configuration.
type RouteConfig struct {
	// Routes is the set of routes assigned to a switch port.
	Routes []Route `json:"routes,omitempty" yaml:"routes,omitempty"`
}

// SamlIdentityProvider is identity-related metadata that's included in nearly all public API objects
type SamlIdentityProvider struct {
	// AcsUrl is service provider endpoint where the response will be sent
	AcsUrl string `json:"acs_url,omitempty" yaml:"acs_url,omitempty"`
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// GroupAttributeName is if set, attributes with this name will be considered to denote a user's group membership, where the values will be the group names.
	GroupAttributeName string `json:"group_attribute_name,omitempty" yaml:"group_attribute_name,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// IdpEntityId is idP's entity id
	IdpEntityId string `json:"idp_entity_id,omitempty" yaml:"idp_entity_id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// PublicCert is optional request signing public certificate (base64 encoded der file)
	PublicCert string `json:"public_cert,omitempty" yaml:"public_cert,omitempty"`
	// SloUrl is service provider endpoint where the idp should send log out requests
	SloUrl string `json:"slo_url,omitempty" yaml:"slo_url,omitempty"`
	// SpClientId is sP's client id
	SpClientId string `json:"sp_client_id,omitempty" yaml:"sp_client_id,omitempty"`
	// TechnicalContactEmail is customer's technical contact for saml configuration
	TechnicalContactEmail string `json:"technical_contact_email,omitempty" yaml:"technical_contact_email,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// SamlIdentityProviderCreate is create-time identity-related parameters
type SamlIdentityProviderCreate struct {
	// AcsUrl is service provider endpoint where the response will be sent
	AcsUrl      string `json:"acs_url,omitempty" yaml:"acs_url,omitempty"`
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// GroupAttributeName is if set, SAML attributes with this name will be considered to denote a user's group membership, where the attribute value(s) should be a comma-separated list of group names.
	GroupAttributeName string `json:"group_attribute_name,omitempty" yaml:"group_attribute_name,omitempty"`
	// IdpEntityId is idp's entity id
	IdpEntityId string `json:"idp_entity_id,omitempty" yaml:"idp_entity_id,omitempty"`
	// IdpMetadataSource is the source of an identity provider metadata descriptor
	IdpMetadataSource IdpMetadataSource `json:"idp_metadata_source,omitempty" yaml:"idp_metadata_source,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// SigningKeypair is request signing key pair
	SigningKeypair DerEncodedKeyPair `json:"signing_keypair,omitempty" yaml:"signing_keypair,omitempty"`
	// SloUrl is service provider endpoint where the idp should send log out requests
	SloUrl string `json:"slo_url,omitempty" yaml:"slo_url,omitempty"`
	// SpClientId is sp's client id
	SpClientId string `json:"sp_client_id,omitempty" yaml:"sp_client_id,omitempty"`
	// TechnicalContactEmail is customer's technical contact for saml configuration
	TechnicalContactEmail string `json:"technical_contact_email,omitempty" yaml:"technical_contact_email,omitempty"`
}

// ServiceUsingCertificate is this certificate is intended for access to the external API.
type ServiceUsingCertificate string

// Silo is view of a Silo
//
// A Silo is the highest level unit of isolation.
type Silo struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Discoverable is a silo where discoverable is false can be retrieved only by its id - it will not be part of the "list all silos" output.
	Discoverable *bool `json:"discoverable,omitempty" yaml:"discoverable,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// IdentityMode is how users and groups are managed in this Silo
	IdentityMode SiloIdentityMode `json:"identity_mode,omitempty" yaml:"identity_mode,omitempty"`
	// MappedFleetRoles is mapping of which Fleet roles are conferred by each Silo role
	//
	// The default is that no Fleet roles are conferred by any Silo roles unless there's a corresponding entry in this map.
	MappedFleetRoles FleetRole `json:"mapped_fleet_roles,omitempty" yaml:"mapped_fleet_roles,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// SiloCreate is create-time parameters for a `Silo`
type SiloCreate struct {
	// AdminGroupName is if set, this group will be created during Silo creation and granted the "Silo Admin" role. Identity providers can assert that users belong to this group and those users can log in and further initialize the Silo.
	//
	// Note that if configuring a SAML based identity provider, group_attribute_name must be set for users to be considered part of a group. See `SamlIdentityProviderCreate` for more information.
	AdminGroupName string `json:"admin_group_name,omitempty" yaml:"admin_group_name,omitempty"`
	Description    string `json:"description,omitempty" yaml:"description,omitempty"`
	Discoverable   *bool  `json:"discoverable,omitempty" yaml:"discoverable,omitempty"`
	// IdentityMode is describes how identities are managed and users are authenticated in this Silo
	IdentityMode SiloIdentityMode `json:"identity_mode,omitempty" yaml:"identity_mode,omitempty"`
	// MappedFleetRoles is mapping of which Fleet roles are conferred by each Silo role
	//
	// The default is that no Fleet roles are conferred by any Silo roles unless there's a corresponding entry in this map.
	MappedFleetRoles FleetRole `json:"mapped_fleet_roles,omitempty" yaml:"mapped_fleet_roles,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Quotas is limits the amount of provisionable CPU, memory, and storage in the Silo. CPU and memory are only consumed by running instances, while storage is consumed by any disk or snapshot. A value of 0 means that resource is *not* provisionable.
	Quotas SiloQuotasCreate `json:"quotas,omitempty" yaml:"quotas,omitempty"`
	// TlsCertificates is initial TLS certificates to be used for the new Silo's console and API endpoints.  These should be valid for the Silo's DNS name(s).
	TlsCertificates []CertificateCreate `json:"tls_certificates,omitempty" yaml:"tls_certificates,omitempty"`
}

// SiloIdentityMode is users are authenticated with SAML using an external authentication provider.  The system updates information about users and groups only during successful authentication (i.e,. "JIT provisioning" of users and groups).
type SiloIdentityMode string

// SiloIpPool is an IP pool in the context of a silo
type SiloIpPool struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// IsDefault is when a pool is the default for a silo, floating IPs and instance ephemeral IPs will come from that pool when no other pool is specified. There can be at most one default for a given silo.
	IsDefault *bool `json:"is_default,omitempty" yaml:"is_default,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// SiloIpPoolResultsPage is a single page of results
type SiloIpPoolResultsPage struct {
	// Items is list of items on this page of results
	Items []SiloIpPool `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// SiloQuotas is a collection of resource counts used to set the virtual capacity of a silo
type SiloQuotas struct {
	// Cpus is number of virtual CPUs
	Cpus int `json:"cpus,omitempty" yaml:"cpus,omitempty"`
	// Memory is amount of memory in bytes
	Memory ByteCount `json:"memory,omitempty" yaml:"memory,omitempty"`
	SiloId string    `json:"silo_id,omitempty" yaml:"silo_id,omitempty"`
	// Storage is amount of disk storage in bytes
	Storage ByteCount `json:"storage,omitempty" yaml:"storage,omitempty"`
}

// SiloQuotasCreate is the amount of provisionable resources for a Silo
type SiloQuotasCreate struct {
	// Cpus is the amount of virtual CPUs available for running instances in the Silo
	Cpus int `json:"cpus,omitempty" yaml:"cpus,omitempty"`
	// Memory is the amount of RAM (in bytes) available for running instances in the Silo
	Memory ByteCount `json:"memory,omitempty" yaml:"memory,omitempty"`
	// Storage is the amount of storage (in bytes) available for disks or snapshots
	Storage ByteCount `json:"storage,omitempty" yaml:"storage,omitempty"`
}

// SiloQuotasResultsPage is a single page of results
type SiloQuotasResultsPage struct {
	// Items is list of items on this page of results
	Items []SiloQuotas `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// SiloQuotasUpdate is updateable properties of a Silo's resource limits. If a value is omitted it will not be updated.
type SiloQuotasUpdate struct {
	// Cpus is the amount of virtual CPUs available for running instances in the Silo
	Cpus int `json:"cpus,omitempty" yaml:"cpus,omitempty"`
	// Memory is the amount of RAM (in bytes) available for running instances in the Silo
	Memory ByteCount `json:"memory,omitempty" yaml:"memory,omitempty"`
	// Storage is the amount of storage (in bytes) available for disks or snapshots
	Storage ByteCount `json:"storage,omitempty" yaml:"storage,omitempty"`
}

// SiloResultsPage is a single page of results
type SiloResultsPage struct {
	// Items is list of items on this page of results
	Items []Silo `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// SiloRole is the type definition for a SiloRole.
type SiloRole string

// SiloRolePolicy is policy for a particular resource
//
// Note that the Policy only describes access granted explicitly for this resource.  The policies of parent resources can also cause a user to have access to this resource.
type SiloRolePolicy struct {
	// RoleAssignments is roles directly assigned on this resource
	RoleAssignments []SiloRoleRoleAssignment `json:"role_assignments,omitempty" yaml:"role_assignments,omitempty"`
}

// SiloRoleRoleAssignment is describes the assignment of a particular role on a particular resource to a particular identity (user, group, etc.)
//
// The resource is not part of this structure.  Rather, `RoleAssignment`s are put into a `Policy` and that Policy is applied to a particular resource.
type SiloRoleRoleAssignment struct {
	IdentityId string `json:"identity_id,omitempty" yaml:"identity_id,omitempty"`
	// IdentityType is describes what kind of identity is described by an id
	IdentityType IdentityType `json:"identity_type,omitempty" yaml:"identity_type,omitempty"`
	RoleName     SiloRole     `json:"role_name,omitempty" yaml:"role_name,omitempty"`
}

// SiloUtilization is view of a silo's resource utilization and capacity
type SiloUtilization struct {
	// Allocated is accounts for the total amount of resources reserved for silos via their quotas
	Allocated VirtualResourceCounts `json:"allocated,omitempty" yaml:"allocated,omitempty"`
	// Provisioned is accounts for resources allocated by in silos like CPU or memory for running instances and storage for disks and snapshots Note that CPU and memory resources associated with a stopped instances are not counted here
	Provisioned VirtualResourceCounts `json:"provisioned,omitempty" yaml:"provisioned,omitempty"`
	SiloId      string                `json:"silo_id,omitempty" yaml:"silo_id,omitempty"`
	// SiloName is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	SiloName Name `json:"silo_name,omitempty" yaml:"silo_name,omitempty"`
}

// SiloUtilizationResultsPage is a single page of results
type SiloUtilizationResultsPage struct {
	// Items is list of items on this page of results
	Items []SiloUtilization `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Sled is an operator's view of a Sled.
type Sled struct {
	// Baseboard is properties that uniquely identify an Oxide hardware component
	Baseboard Baseboard `json:"baseboard,omitempty" yaml:"baseboard,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// ProvisionState is the provision state of the sled.
	ProvisionState SledProvisionState `json:"provision_state,omitempty" yaml:"provision_state,omitempty"`
	// RackId is the rack to which this Sled is currently attached
	RackId string `json:"rack_id,omitempty" yaml:"rack_id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// UsableHardwareThreads is the number of hardware threads which can execute on this sled
	UsableHardwareThreads int `json:"usable_hardware_threads,omitempty" yaml:"usable_hardware_threads,omitempty"`
	// UsablePhysicalRam is amount of RAM which may be used by the Sled's OS
	UsablePhysicalRam ByteCount `json:"usable_physical_ram,omitempty" yaml:"usable_physical_ram,omitempty"`
}

// SledInstance is an operator's view of an instance running on a given sled
type SledInstance struct {
	ActiveSledId string `json:"active_sled_id,omitempty" yaml:"active_sled_id,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id          string `json:"id,omitempty" yaml:"id,omitempty"`
	Memory      int    `json:"memory,omitempty" yaml:"memory,omitempty"`
	MigrationId string `json:"migration_id,omitempty" yaml:"migration_id,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name  Name `json:"name,omitempty" yaml:"name,omitempty"`
	Ncpus int  `json:"ncpus,omitempty" yaml:"ncpus,omitempty"`
	// ProjectName is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	ProjectName Name `json:"project_name,omitempty" yaml:"project_name,omitempty"`
	// SiloName is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	SiloName Name `json:"silo_name,omitempty" yaml:"silo_name,omitempty"`
	// State is running state of an Instance (primarily: booted or stopped)
	//
	// This typically reflects whether it's starting, running, stopping, or stopped, but also includes states related to the Instance's lifecycle
	State InstanceState `json:"state,omitempty" yaml:"state,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// SledInstanceResultsPage is a single page of results
type SledInstanceResultsPage struct {
	// Items is list of items on this page of results
	Items []SledInstance `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// SledProvisionState is new resources will be provisioned on this sled.
type SledProvisionState string

// SledProvisionStateParams is parameters for `sled_set_provision_state`.
type SledProvisionStateParams struct {
	// State is the provision state.
	State SledProvisionState `json:"state,omitempty" yaml:"state,omitempty"`
}

// SledProvisionStateResponse is response to `sled_set_provision_state`.
type SledProvisionStateResponse struct {
	// NewState is the new provision state.
	NewState SledProvisionState `json:"new_state,omitempty" yaml:"new_state,omitempty"`
	// OldState is the old provision state.
	OldState SledProvisionState `json:"old_state,omitempty" yaml:"old_state,omitempty"`
}

// SledResultsPage is a single page of results
type SledResultsPage struct {
	// Items is list of items on this page of results
	Items []Sled `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Snapshot is view of a Snapshot
type Snapshot struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	DiskId      string `json:"disk_id,omitempty" yaml:"disk_id,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name      Name   `json:"name,omitempty" yaml:"name,omitempty"`
	ProjectId string `json:"project_id,omitempty" yaml:"project_id,omitempty"`
	// Size is byte count to express memory or storage capacity.
	Size  ByteCount     `json:"size,omitempty" yaml:"size,omitempty"`
	State SnapshotState `json:"state,omitempty" yaml:"state,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// SnapshotCreate is create-time parameters for a `Snapshot`
type SnapshotCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Disk is the disk to be snapshotted
	Disk NameOrId `json:"disk,omitempty" yaml:"disk,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// SnapshotResultsPage is a single page of results
type SnapshotResultsPage struct {
	// Items is list of items on this page of results
	Items []Snapshot `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// SnapshotState is the type definition for a SnapshotState.
type SnapshotState string

// SshKey is view of an SSH Key
type SshKey struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// PublicKey is sSH public key, e.g., `"ssh-ed25519 AAAAC3NzaC..."`
	PublicKey string `json:"public_key,omitempty" yaml:"public_key,omitempty"`
	// SiloUserId is the user to whom this key belongs
	SiloUserId string `json:"silo_user_id,omitempty" yaml:"silo_user_id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// SshKeyCreate is create-time parameters for an `SshKey`
type SshKeyCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// PublicKey is sSH public key, e.g., `"ssh-ed25519 AAAAC3NzaC..."`
	PublicKey string `json:"public_key,omitempty" yaml:"public_key,omitempty"`
}

// SshKeyResultsPage is a single page of results
type SshKeyResultsPage struct {
	// Items is list of items on this page of results
	Items []SshKey `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Switch is an operator's view of a Switch.
type Switch struct {
	// Baseboard is properties that uniquely identify an Oxide hardware component
	Baseboard Baseboard `json:"baseboard,omitempty" yaml:"baseboard,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// RackId is the rack to which this Switch is currently attached
	RackId string `json:"rack_id,omitempty" yaml:"rack_id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// SwitchInterfaceConfig is a switch port interface configuration for a port settings object.
type SwitchInterfaceConfig struct {
	// Id is a unique identifier for this switch interface.
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// InterfaceName is the name of this switch interface.
	InterfaceName string `json:"interface_name,omitempty" yaml:"interface_name,omitempty"`
	// Kind is the switch interface kind.
	Kind SwitchInterfaceKind2 `json:"kind,omitempty" yaml:"kind,omitempty"`
	// PortSettingsId is the port settings object this switch interface configuration belongs to.
	PortSettingsId string `json:"port_settings_id,omitempty" yaml:"port_settings_id,omitempty"`
	// V6Enabled is whether or not IPv6 is enabled on this interface.
	V6Enabled *bool `json:"v6_enabled,omitempty" yaml:"v6_enabled,omitempty"`
}

// SwitchInterfaceConfigCreate is a layer-3 switch interface configuration. When IPv6 is enabled, a link local address will be created for the interface.
type SwitchInterfaceConfigCreate struct {
	// Kind is what kind of switch interface this configuration represents.
	Kind SwitchInterfaceKind `json:"kind,omitempty" yaml:"kind,omitempty"`
	// V6Enabled is whether or not IPv6 is enabled.
	V6Enabled *bool `json:"v6_enabled,omitempty" yaml:"v6_enabled,omitempty"`
}

// SwitchInterfaceKindType is the type definition for a SwitchInterfaceKindType.
type SwitchInterfaceKindType string

// SwitchInterfaceKindPrimary is primary interfaces are associated with physical links. There is exactly one primary interface per physical link.
type SwitchInterfaceKindPrimary struct {
	Type SwitchInterfaceKindType `json:"type,omitempty" yaml:"type,omitempty"`
}

// SwitchInterfaceKindVlan is vLAN interfaces allow physical interfaces to be multiplexed onto multiple logical links, each distinguished by a 12-bit 802.1Q Ethernet tag.
type SwitchInterfaceKindVlan struct {
	Type SwitchInterfaceKindType `json:"type,omitempty" yaml:"type,omitempty"`
	// Vid is the virtual network id (VID) that distinguishes this interface and is used for producing and consuming 802.1Q Ethernet tags. This field has a maximum value of 4095 as 802.1Q tags are twelve bits.
	Vid int `json:"vid,omitempty" yaml:"vid,omitempty"`
}

// SwitchInterfaceKindLoopback is loopback interfaces are anchors for IP addresses that are not specific to any particular port.
type SwitchInterfaceKindLoopback struct {
	Type SwitchInterfaceKindType `json:"type,omitempty" yaml:"type,omitempty"`
}

// SwitchInterfaceKind is indicates the kind for a switch interface.
type SwitchInterfaceKind struct {
	// Type is the type definition for a Type.
	Type SwitchInterfaceKindType `json:"type,omitempty" yaml:"type,omitempty"`
	// Vid is the virtual network id (VID) that distinguishes this interface and is used for producing and consuming 802.1Q Ethernet tags. This field has a maximum value of 4095 as 802.1Q tags are twelve bits.
	Vid int `json:"vid,omitempty" yaml:"vid,omitempty"`
}

// SwitchInterfaceKind2 is primary interfaces are associated with physical links. There is exactly one primary interface per physical link.
type SwitchInterfaceKind2 string

// SwitchLocation is switch in upper slot
type SwitchLocation string

// SwitchPort is a switch port represents a physical external port on a rack switch.
type SwitchPort struct {
	// Id is the id of the switch port.
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// PortName is the name of this switch port.
	PortName string `json:"port_name,omitempty" yaml:"port_name,omitempty"`
	// PortSettingsId is the primary settings group of this switch port. Will be `None` until this switch port is configured.
	PortSettingsId string `json:"port_settings_id,omitempty" yaml:"port_settings_id,omitempty"`
	// RackId is the rack this switch port belongs to.
	RackId string `json:"rack_id,omitempty" yaml:"rack_id,omitempty"`
	// SwitchLocation is the switch location of this switch port.
	SwitchLocation string `json:"switch_location,omitempty" yaml:"switch_location,omitempty"`
}

// SwitchPortAddressConfig is an IP address configuration for a port settings object.
type SwitchPortAddressConfig struct {
	// Address is the IP address and prefix.
	Address IpNet `json:"address,omitempty" yaml:"address,omitempty"`
	// AddressLotBlockId is the id of the address lot block this address is drawn from.
	AddressLotBlockId string `json:"address_lot_block_id,omitempty" yaml:"address_lot_block_id,omitempty"`
	// InterfaceName is the interface name this address belongs to.
	InterfaceName string `json:"interface_name,omitempty" yaml:"interface_name,omitempty"`
	// PortSettingsId is the port settings object this address configuration belongs to.
	PortSettingsId string `json:"port_settings_id,omitempty" yaml:"port_settings_id,omitempty"`
}

// SwitchPortApplySettings is parameters for applying settings to switch ports.
type SwitchPortApplySettings struct {
	// PortSettings is a name or id to use when applying switch port settings.
	PortSettings NameOrId `json:"port_settings,omitempty" yaml:"port_settings,omitempty"`
}

// SwitchPortBgpPeerConfig is a BGP peer configuration for a port settings object.
type SwitchPortBgpPeerConfig struct {
	// Addr is the address of the peer.
	Addr string `json:"addr,omitempty" yaml:"addr,omitempty"`
	// BgpConfigId is the id of the global BGP configuration referenced by this peer configuration.
	BgpConfigId string `json:"bgp_config_id,omitempty" yaml:"bgp_config_id,omitempty"`
	// InterfaceName is the interface name used to establish a peer session.
	InterfaceName string `json:"interface_name,omitempty" yaml:"interface_name,omitempty"`
	// PortSettingsId is the port settings object this BGP configuration belongs to.
	PortSettingsId string `json:"port_settings_id,omitempty" yaml:"port_settings_id,omitempty"`
}

// SwitchPortConfig is a physical port configuration for a port settings object.
type SwitchPortConfig struct {
	// Geometry is the physical link geometry of the port.
	Geometry SwitchPortGeometry2 `json:"geometry,omitempty" yaml:"geometry,omitempty"`
	// PortSettingsId is the id of the port settings object this configuration belongs to.
	PortSettingsId string `json:"port_settings_id,omitempty" yaml:"port_settings_id,omitempty"`
}

// SwitchPortConfigCreate is physical switch port configuration.
type SwitchPortConfigCreate struct {
	// Geometry is link geometry for the switch port.
	Geometry SwitchPortGeometry `json:"geometry,omitempty" yaml:"geometry,omitempty"`
}

// SwitchPortGeometry is the port contains a single QSFP28 link with four lanes.
type SwitchPortGeometry string

// SwitchPortGeometry2 is the port contains a single QSFP28 link with four lanes.
type SwitchPortGeometry2 string

// SwitchPortLinkConfig is a link configuration for a port settings object.
type SwitchPortLinkConfig struct {
	// LinkName is the name of this link.
	LinkName string `json:"link_name,omitempty" yaml:"link_name,omitempty"`
	// LldpServiceConfigId is the link-layer discovery protocol service configuration id for this link.
	LldpServiceConfigId string `json:"lldp_service_config_id,omitempty" yaml:"lldp_service_config_id,omitempty"`
	// Mtu is the maximum transmission unit for this link.
	Mtu int `json:"mtu,omitempty" yaml:"mtu,omitempty"`
	// PortSettingsId is the port settings this link configuration belongs to.
	PortSettingsId string `json:"port_settings_id,omitempty" yaml:"port_settings_id,omitempty"`
}

// SwitchPortResultsPage is a single page of results
type SwitchPortResultsPage struct {
	// Items is list of items on this page of results
	Items []SwitchPort `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// SwitchPortRouteConfig is a route configuration for a port settings object.
type SwitchPortRouteConfig struct {
	// Dst is the route's destination network.
	Dst IpNet `json:"dst,omitempty" yaml:"dst,omitempty"`
	// Gw is the route's gateway address.
	Gw IpNet `json:"gw,omitempty" yaml:"gw,omitempty"`
	// InterfaceName is the interface name this route configuration is assigned to.
	InterfaceName string `json:"interface_name,omitempty" yaml:"interface_name,omitempty"`
	// PortSettingsId is the port settings object this route configuration belongs to.
	PortSettingsId string `json:"port_settings_id,omitempty" yaml:"port_settings_id,omitempty"`
	// VlanId is the VLAN identifier for the route. Use this if the gateway is reachable over an 802.1Q tagged L2 segment.
	VlanId int `json:"vlan_id,omitempty" yaml:"vlan_id,omitempty"`
}

// SwitchPortSettings is a switch port settings identity whose id may be used to view additional details.
type SwitchPortSettings struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// SwitchPortSettingsCreate is parameters for creating switch port settings. Switch port settings are the central data structure for setting up external networking. Switch port settings include link, interface, route, address and dynamic network protocol configuration.
type SwitchPortSettingsCreate struct {
	// Addresses is addresses indexed by interface name.
	Addresses AddressConfig `json:"addresses,omitempty" yaml:"addresses,omitempty"`
	// BgpPeers is bGP peers indexed by interface name.
	BgpPeers    BgpPeerConfig `json:"bgp_peers,omitempty" yaml:"bgp_peers,omitempty"`
	Description string        `json:"description,omitempty" yaml:"description,omitempty"`
	Groups      []NameOrId    `json:"groups" yaml:"groups"`
	// Interfaces is interfaces indexed by link name.
	Interfaces SwitchInterfaceConfigCreate `json:"interfaces,omitempty" yaml:"interfaces,omitempty"`
	// Links is links indexed by phy name. On ports that are not broken out, this is always phy0. On a 2x breakout the options are phy0 and phy1, on 4x phy0-phy3, etc.
	Links LinkConfigCreate `json:"links,omitempty" yaml:"links,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// PortConfig is physical switch port configuration.
	PortConfig SwitchPortConfigCreate `json:"port_config,omitempty" yaml:"port_config,omitempty"`
	// Routes is routes indexed by interface name.
	Routes RouteConfig `json:"routes,omitempty" yaml:"routes,omitempty"`
}

// SwitchPortSettingsGroups is this structure maps a port settings object to a port settings groups. Port settings objects may inherit settings from groups. This mapping defines the relationship between settings objects and the groups they reference.
type SwitchPortSettingsGroups struct {
	// PortSettingsGroupId is the id of a port settings group being referenced by a port settings object.
	PortSettingsGroupId string `json:"port_settings_group_id,omitempty" yaml:"port_settings_group_id,omitempty"`
	// PortSettingsId is the id of a port settings object referencing a port settings group.
	PortSettingsId string `json:"port_settings_id,omitempty" yaml:"port_settings_id,omitempty"`
}

// SwitchPortSettingsResultsPage is a single page of results
type SwitchPortSettingsResultsPage struct {
	// Items is list of items on this page of results
	Items []SwitchPortSettings `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// SwitchPortSettingsView is this structure contains all port settings information in one place. It's a convenience data structure for getting a complete view of a particular port's settings.
type SwitchPortSettingsView struct {
	// Addresses is layer 3 IP address settings.
	Addresses []SwitchPortAddressConfig `json:"addresses,omitempty" yaml:"addresses,omitempty"`
	// BgpPeers is bGP peer settings.
	BgpPeers []SwitchPortBgpPeerConfig `json:"bgp_peers,omitempty" yaml:"bgp_peers,omitempty"`
	// Groups is switch port settings included from other switch port settings groups.
	Groups []SwitchPortSettingsGroups `json:"groups,omitempty" yaml:"groups,omitempty"`
	// Interfaces is layer 3 interface settings.
	Interfaces []SwitchInterfaceConfig `json:"interfaces,omitempty" yaml:"interfaces,omitempty"`
	// LinkLldp is link-layer discovery protocol (LLDP) settings.
	LinkLldp []LldpServiceConfig `json:"link_lldp,omitempty" yaml:"link_lldp,omitempty"`
	// Links is layer 2 link settings.
	Links []SwitchPortLinkConfig `json:"links,omitempty" yaml:"links,omitempty"`
	// Port is layer 1 physical port settings.
	Port SwitchPortConfig `json:"port,omitempty" yaml:"port,omitempty"`
	// Routes is iP route settings.
	Routes []SwitchPortRouteConfig `json:"routes,omitempty" yaml:"routes,omitempty"`
	// Settings is the primary switch port settings handle.
	Settings SwitchPortSettings `json:"settings,omitempty" yaml:"settings,omitempty"`
	// VlanInterfaces is vlan interface settings.
	VlanInterfaces []SwitchVlanInterfaceConfig `json:"vlan_interfaces,omitempty" yaml:"vlan_interfaces,omitempty"`
}

// SwitchResultsPage is a single page of results
type SwitchResultsPage struct {
	// Items is list of items on this page of results
	Items []Switch `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// SwitchVlanInterfaceConfig is a switch port VLAN interface configuration for a port settings object.
type SwitchVlanInterfaceConfig struct {
	// InterfaceConfigId is the switch interface configuration this VLAN interface configuration belongs to.
	InterfaceConfigId string `json:"interface_config_id,omitempty" yaml:"interface_config_id,omitempty"`
	// VlanId is the virtual network id for this interface that is used for producing and consuming 802.1Q Ethernet tags. This field has a maximum value of 4095 as 802.1Q tags are twelve bits.
	VlanId int `json:"vlan_id,omitempty" yaml:"vlan_id,omitempty"`
}

// SystemMetricName is the type definition for a SystemMetricName.
type SystemMetricName string

// UninitializedSled is a sled that has not been added to an initialized rack yet
type UninitializedSled struct {
	// Baseboard is properties that uniquely identify an Oxide hardware component
	Baseboard Baseboard `json:"baseboard,omitempty" yaml:"baseboard,omitempty"`
	Cubby     int       `json:"cubby,omitempty" yaml:"cubby,omitempty"`
	RackId    string    `json:"rack_id,omitempty" yaml:"rack_id,omitempty"`
}

// UninitializedSledId is the unique hardware ID for a sled
type UninitializedSledId struct {
	Part   string `json:"part,omitempty" yaml:"part,omitempty"`
	Serial string `json:"serial,omitempty" yaml:"serial,omitempty"`
}

// UninitializedSledResultsPage is a single page of results
type UninitializedSledResultsPage struct {
	// Items is list of items on this page of results
	Items []UninitializedSled `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// User is view of a User
type User struct {
	// DisplayName is human-readable name that can identify the user
	DisplayName string `json:"display_name,omitempty" yaml:"display_name,omitempty"`
	Id          string `json:"id,omitempty" yaml:"id,omitempty"`
	// SiloId is uuid of the silo to which this user belongs
	SiloId string `json:"silo_id,omitempty" yaml:"silo_id,omitempty"`
}

// UserBuiltin is view of a Built-in User
//
// A Built-in User is explicitly created as opposed to being derived from an Identify Provider.
type UserBuiltin struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// UserBuiltinResultsPage is a single page of results
type UserBuiltinResultsPage struct {
	// Items is list of items on this page of results
	Items []UserBuiltin `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// UserCreate is create-time parameters for a `User`
type UserCreate struct {
	// ExternalId is username used to log in
	ExternalId UserId `json:"external_id,omitempty" yaml:"external_id,omitempty"`
	// Password is how to set the user's login password
	Password UserPassword `json:"password,omitempty" yaml:"password,omitempty"`
}

// UserId is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
type UserId string

// UserPasswordMode is the type definition for a UserPasswordMode.
type UserPasswordMode string

// UserPasswordPassword is sets the user's password to the provided value
type UserPasswordPassword struct {
	Mode UserPasswordMode `json:"mode,omitempty" yaml:"mode,omitempty"`
	// Value is passwords may be subject to additional constraints.
	Value Password `json:"value,omitempty" yaml:"value,omitempty"`
}

// UserPasswordLoginDisallowed is invalidates any current password (disabling password authentication)
type UserPasswordLoginDisallowed struct {
	Mode UserPasswordMode `json:"mode,omitempty" yaml:"mode,omitempty"`
}

// UserPassword is parameters for setting a user's password
type UserPassword struct {
	// Mode is the type definition for a Mode.
	Mode UserPasswordMode `json:"mode,omitempty" yaml:"mode,omitempty"`
	// Value is passwords may be subject to additional constraints.
	Value Password `json:"value,omitempty" yaml:"value,omitempty"`
}

// UserResultsPage is a single page of results
type UserResultsPage struct {
	// Items is list of items on this page of results
	Items []User `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// UsernamePasswordCredentials is credentials for local user login
type UsernamePasswordCredentials struct {
	// Password is passwords may be subject to additional constraints.
	Password Password `json:"password,omitempty" yaml:"password,omitempty"`
	// Username is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Username UserId `json:"username,omitempty" yaml:"username,omitempty"`
}

// Utilization is view of the current silo's resource utilization and capacity
type Utilization struct {
	// Capacity is the total amount of resources that can be provisioned in this silo Actions that would exceed this limit will fail
	Capacity VirtualResourceCounts `json:"capacity,omitempty" yaml:"capacity,omitempty"`
	// Provisioned is accounts for resources allocated to running instances or storage allocated via disks or snapshots Note that CPU and memory resources associated with a stopped instances are not counted here whereas associated disks will still be counted
	Provisioned VirtualResourceCounts `json:"provisioned,omitempty" yaml:"provisioned,omitempty"`
}

// VirtualResourceCounts is a collection of resource counts used to describe capacity and utilization
type VirtualResourceCounts struct {
	// Cpus is number of virtual CPUs
	Cpus int `json:"cpus,omitempty" yaml:"cpus,omitempty"`
	// Memory is amount of memory in bytes
	Memory ByteCount `json:"memory,omitempty" yaml:"memory,omitempty"`
	// Storage is amount of disk storage in bytes
	Storage ByteCount `json:"storage,omitempty" yaml:"storage,omitempty"`
}

// Vpc is view of a VPC
type Vpc struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// DnsName is the name used for the VPC in DNS.
	DnsName Name `json:"dns_name,omitempty" yaml:"dns_name,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Ipv6Prefix is the unique local IPv6 address range for subnets in this VPC
	Ipv6Prefix Ipv6Net `json:"ipv6_prefix,omitempty" yaml:"ipv6_prefix,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// ProjectId is id for the project containing this VPC
	ProjectId string `json:"project_id,omitempty" yaml:"project_id,omitempty"`
	// SystemRouterId is id for the system router where subnet default routes are registered
	SystemRouterId string `json:"system_router_id,omitempty" yaml:"system_router_id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// VpcCreate is create-time parameters for a `Vpc`
type VpcCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// DnsName is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	DnsName Name `json:"dns_name,omitempty" yaml:"dns_name,omitempty"`
	// Ipv6Prefix is the IPv6 prefix for this VPC
	//
	// All IPv6 subnets created from this VPC must be taken from this range, which should be a Unique Local Address in the range `fd00::/48`. The default VPC Subnet will have the first `/64` range from this prefix.
	Ipv6Prefix Ipv6Net `json:"ipv6_prefix,omitempty" yaml:"ipv6_prefix,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// VpcFirewallRule is a single rule in a VPC firewall
type VpcFirewallRule struct {
	// Action is whether traffic matching the rule should be allowed or dropped
	Action VpcFirewallRuleAction `json:"action,omitempty" yaml:"action,omitempty"`
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Direction is whether this rule is for incoming or outgoing traffic
	Direction VpcFirewallRuleDirection `json:"direction,omitempty" yaml:"direction,omitempty"`
	// Filters is reductions on the scope of the rule
	Filters VpcFirewallRuleFilter `json:"filters,omitempty" yaml:"filters,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Priority is the relative priority of this rule
	Priority int `json:"priority,omitempty" yaml:"priority,omitempty"`
	// Status is whether this rule is in effect
	Status VpcFirewallRuleStatus `json:"status,omitempty" yaml:"status,omitempty"`
	// Targets is list of sets of instances that the rule applies to
	Targets []VpcFirewallRuleTarget `json:"targets,omitempty" yaml:"targets,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// VpcId is the VPC to which this rule belongs
	VpcId string `json:"vpc_id,omitempty" yaml:"vpc_id,omitempty"`
}

// VpcFirewallRuleAction is the type definition for a VpcFirewallRuleAction.
type VpcFirewallRuleAction string

// VpcFirewallRuleDirection is the type definition for a VpcFirewallRuleDirection.
type VpcFirewallRuleDirection string

// VpcFirewallRuleFilter is filter for a firewall rule. A given packet must match every field that is present for the rule to apply to it. A packet matches a field if any entry in that field matches the packet.
type VpcFirewallRuleFilter struct {
	// Hosts is if present, the sources (if incoming) or destinations (if outgoing) this rule applies to.
	Hosts []VpcFirewallRuleHostFilter `json:"hosts,omitempty" yaml:"hosts,omitempty"`
	// Ports is if present, the destination ports this rule applies to.
	Ports []L4PortRange `json:"ports,omitempty" yaml:"ports,omitempty"`
	// Protocols is if present, the networking protocols this rule applies to.
	Protocols []VpcFirewallRuleProtocol `json:"protocols,omitempty" yaml:"protocols,omitempty"`
}

// VpcFirewallRuleHostFilterType is the type definition for a VpcFirewallRuleHostFilterType.
type VpcFirewallRuleHostFilterType string

// VpcFirewallRuleHostFilterVpc is the rule applies to traffic from/to all instances in the VPC
type VpcFirewallRuleHostFilterVpc struct {
	Type VpcFirewallRuleHostFilterType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleHostFilterSubnet is the rule applies to traffic from/to all instances in the VPC Subnet
type VpcFirewallRuleHostFilterSubnet struct {
	Type VpcFirewallRuleHostFilterType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleHostFilterInstance is the rule applies to traffic from/to this specific instance
type VpcFirewallRuleHostFilterInstance struct {
	Type VpcFirewallRuleHostFilterType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleHostFilterIp is the rule applies to traffic from/to a specific IP address
type VpcFirewallRuleHostFilterIp struct {
	Type  VpcFirewallRuleHostFilterType `json:"type,omitempty" yaml:"type,omitempty"`
	Value string                        `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleHostFilterIpNet is the rule applies to traffic from/to a specific IP subnet
type VpcFirewallRuleHostFilterIpNet struct {
	Type  VpcFirewallRuleHostFilterType `json:"type,omitempty" yaml:"type,omitempty"`
	Value IpNet                         `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleHostFilter is the `VpcFirewallRuleHostFilter` is used to filter traffic on the basis of its source or destination host.
type VpcFirewallRuleHostFilter struct {
	// Type is the type definition for a Type.
	Type VpcFirewallRuleHostFilterType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleProtocol is the protocols that may be specified in a firewall rule's filter
type VpcFirewallRuleProtocol string

// VpcFirewallRuleStatus is the type definition for a VpcFirewallRuleStatus.
type VpcFirewallRuleStatus string

// VpcFirewallRuleTargetType is the type definition for a VpcFirewallRuleTargetType.
type VpcFirewallRuleTargetType string

// VpcFirewallRuleTargetVpc is the rule applies to all instances in the VPC
type VpcFirewallRuleTargetVpc struct {
	Type VpcFirewallRuleTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleTargetSubnet is the rule applies to all instances in the VPC Subnet
type VpcFirewallRuleTargetSubnet struct {
	Type VpcFirewallRuleTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleTargetInstance is the rule applies to this specific instance
type VpcFirewallRuleTargetInstance struct {
	Type VpcFirewallRuleTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleTargetIp is the rule applies to a specific IP address
type VpcFirewallRuleTargetIp struct {
	Type  VpcFirewallRuleTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	Value string                    `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleTargetIpNet is the rule applies to a specific IP subnet
type VpcFirewallRuleTargetIpNet struct {
	Type  VpcFirewallRuleTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	Value IpNet                     `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleTarget is a `VpcFirewallRuleTarget` is used to specify the set of `Instance`s to which a firewall rule applies.
type VpcFirewallRuleTarget struct {
	// Type is the type definition for a Type.
	Type VpcFirewallRuleTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// VpcFirewallRuleUpdate is a single rule in a VPC firewall
type VpcFirewallRuleUpdate struct {
	// Action is whether traffic matching the rule should be allowed or dropped
	Action VpcFirewallRuleAction `json:"action,omitempty" yaml:"action,omitempty"`
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Direction is whether this rule is for incoming or outgoing traffic
	Direction VpcFirewallRuleDirection `json:"direction,omitempty" yaml:"direction,omitempty"`
	// Filters is reductions on the scope of the rule
	Filters VpcFirewallRuleFilter `json:"filters,omitempty" yaml:"filters,omitempty"`
	// Name is name of the rule, unique to this VPC
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Priority is the relative priority of this rule
	Priority int `json:"priority,omitempty" yaml:"priority,omitempty"`
	// Status is whether this rule is in effect
	Status VpcFirewallRuleStatus `json:"status,omitempty" yaml:"status,omitempty"`
	// Targets is list of sets of instances that the rule applies to
	Targets []VpcFirewallRuleTarget `json:"targets,omitempty" yaml:"targets,omitempty"`
}

// VpcFirewallRuleUpdateParams is updateable properties of a `Vpc`'s firewall Note that VpcFirewallRules are implicitly created along with a Vpc, so there is no explicit creation.
type VpcFirewallRuleUpdateParams struct {
	Rules []VpcFirewallRuleUpdate `json:"rules" yaml:"rules"`
}

// VpcFirewallRules is collection of a Vpc's firewall rules
type VpcFirewallRules struct {
	Rules []VpcFirewallRule `json:"rules,omitempty" yaml:"rules,omitempty"`
}

// VpcResultsPage is a single page of results
type VpcResultsPage struct {
	// Items is list of items on this page of results
	Items []Vpc `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// VpcSubnet is a VPC subnet represents a logical grouping for instances that allows network traffic between them, within a IPv4 subnetwork or optionall an IPv6 subnetwork.
type VpcSubnet struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Id is unique, immutable, system-controlled identifier for each resource
	Id string `json:"id,omitempty" yaml:"id,omitempty"`
	// Ipv4Block is the IPv4 subnet CIDR block.
	Ipv4Block Ipv4Net `json:"ipv4_block,omitempty" yaml:"ipv4_block,omitempty"`
	// Ipv6Block is the IPv6 subnet CIDR block.
	Ipv6Block Ipv6Net `json:"ipv6_block,omitempty" yaml:"ipv6_block,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// VpcId is the VPC to which the subnet belongs.
	VpcId string `json:"vpc_id,omitempty" yaml:"vpc_id,omitempty"`
}

// VpcSubnetCreate is create-time parameters for a `VpcSubnet`
type VpcSubnetCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Ipv4Block is the IPv4 address range for this subnet.
	//
	// It must be allocated from an RFC 1918 private address range, and must not overlap with any other existing subnet in the VPC.
	Ipv4Block Ipv4Net `json:"ipv4_block,omitempty" yaml:"ipv4_block,omitempty"`
	// Ipv6Block is the IPv6 address range for this subnet.
	//
	// It must be allocated from the RFC 4193 Unique Local Address range, with the prefix equal to the parent VPC's prefix. A random `/64` block will be assigned if one is not provided. It must not overlap with any existing subnet in the VPC.
	Ipv6Block Ipv6Net `json:"ipv6_block,omitempty" yaml:"ipv6_block,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// VpcSubnetResultsPage is a single page of results
type VpcSubnetResultsPage struct {
	// Items is list of items on this page of results
	Items []VpcSubnet `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// VpcSubnetUpdate is updateable properties of a `VpcSubnet`
type VpcSubnetUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	Name        Name   `json:"name,omitempty" yaml:"name,omitempty"`
}

// VpcUpdate is updateable properties of a `Vpc`
type VpcUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	DnsName     Name   `json:"dns_name,omitempty" yaml:"dns_name,omitempty"`
	Name        Name   `json:"name,omitempty" yaml:"name,omitempty"`
}

// DeviceAuthRequestParams is the request parameters for DeviceAuthRequest
type DeviceAuthRequestParams struct {
	Body io.Reader `json:"body,omitempty" yaml:"body,omitempty"`
}

// DeviceAuthConfirmParams is the request parameters for DeviceAuthConfirm
type DeviceAuthConfirmParams struct {
	Body *DeviceAuthVerify `json:"body,omitempty" yaml:"body,omitempty"`
}

// DeviceAccessTokenParams is the request parameters for DeviceAccessToken
type DeviceAccessTokenParams struct {
	Body io.Reader `json:"body,omitempty" yaml:"body,omitempty"`
}

// LoginSamlParams is the request parameters for LoginSaml
type LoginSamlParams struct {
	ProviderName Name      `json:"provider_name,omitempty" yaml:"provider_name,omitempty"`
	SiloName     Name      `json:"silo_name,omitempty" yaml:"silo_name,omitempty"`
	Body         io.Reader `json:"body,omitempty" yaml:"body,omitempty"`
}

// CertificateListParams is the request parameters for CertificateList
type CertificateListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// CertificateCreateParams is the request parameters for CertificateCreate
type CertificateCreateParams struct {
	Body *CertificateCreate `json:"body,omitempty" yaml:"body,omitempty"`
}

// CertificateDeleteParams is the request parameters for CertificateDelete
type CertificateDeleteParams struct {
	Certificate NameOrId `json:"certificate,omitempty" yaml:"certificate,omitempty"`
}

// CertificateViewParams is the request parameters for CertificateView
type CertificateViewParams struct {
	Certificate NameOrId `json:"certificate,omitempty" yaml:"certificate,omitempty"`
}

// DiskListParams is the request parameters for DiskList
type DiskListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Project   NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// DiskCreateParams is the request parameters for DiskCreate
type DiskCreateParams struct {
	Project NameOrId    `json:"project,omitempty" yaml:"project,omitempty"`
	Body    *DiskCreate `json:"body,omitempty" yaml:"body,omitempty"`
}

// DiskDeleteParams is the request parameters for DiskDelete
type DiskDeleteParams struct {
	Disk    NameOrId `json:"disk,omitempty" yaml:"disk,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// DiskViewParams is the request parameters for DiskView
type DiskViewParams struct {
	Disk    NameOrId `json:"disk,omitempty" yaml:"disk,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// DiskBulkWriteImportParams is the request parameters for DiskBulkWriteImport
type DiskBulkWriteImportParams struct {
	Disk    NameOrId               `json:"disk,omitempty" yaml:"disk,omitempty"`
	Project NameOrId               `json:"project,omitempty" yaml:"project,omitempty"`
	Body    *ImportBlocksBulkWrite `json:"body,omitempty" yaml:"body,omitempty"`
}

// DiskBulkWriteImportStartParams is the request parameters for DiskBulkWriteImportStart
type DiskBulkWriteImportStartParams struct {
	Disk    NameOrId `json:"disk,omitempty" yaml:"disk,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// DiskBulkWriteImportStopParams is the request parameters for DiskBulkWriteImportStop
type DiskBulkWriteImportStopParams struct {
	Disk    NameOrId `json:"disk,omitempty" yaml:"disk,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// DiskFinalizeImportParams is the request parameters for DiskFinalizeImport
type DiskFinalizeImportParams struct {
	Disk    NameOrId      `json:"disk,omitempty" yaml:"disk,omitempty"`
	Project NameOrId      `json:"project,omitempty" yaml:"project,omitempty"`
	Body    *FinalizeDisk `json:"body,omitempty" yaml:"body,omitempty"`
}

// DiskMetricsListParams is the request parameters for DiskMetricsList
type DiskMetricsListParams struct {
	Disk      NameOrId        `json:"disk,omitempty" yaml:"disk,omitempty"`
	Metric    DiskMetricName  `json:"metric,omitempty" yaml:"metric,omitempty"`
	EndTime   *time.Time      `json:"end_time,omitempty" yaml:"end_time,omitempty"`
	Limit     int             `json:"limit,omitempty" yaml:"limit,omitempty"`
	Order     PaginationOrder `json:"order,omitempty" yaml:"order,omitempty"`
	PageToken string          `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	StartTime *time.Time      `json:"start_time,omitempty" yaml:"start_time,omitempty"`
	Project   NameOrId        `json:"project,omitempty" yaml:"project,omitempty"`
}

// FloatingIpListParams is the request parameters for FloatingIpList
type FloatingIpListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Project   NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// FloatingIpCreateParams is the request parameters for FloatingIpCreate
type FloatingIpCreateParams struct {
	Project NameOrId          `json:"project,omitempty" yaml:"project,omitempty"`
	Body    *FloatingIpCreate `json:"body,omitempty" yaml:"body,omitempty"`
}

// FloatingIpDeleteParams is the request parameters for FloatingIpDelete
type FloatingIpDeleteParams struct {
	FloatingIp NameOrId `json:"floating_ip,omitempty" yaml:"floating_ip,omitempty"`
	Project    NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// FloatingIpViewParams is the request parameters for FloatingIpView
type FloatingIpViewParams struct {
	FloatingIp NameOrId `json:"floating_ip,omitempty" yaml:"floating_ip,omitempty"`
	Project    NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// FloatingIpAttachParams is the request parameters for FloatingIpAttach
type FloatingIpAttachParams struct {
	FloatingIp NameOrId          `json:"floating_ip,omitempty" yaml:"floating_ip,omitempty"`
	Project    NameOrId          `json:"project,omitempty" yaml:"project,omitempty"`
	Body       *FloatingIpAttach `json:"body,omitempty" yaml:"body,omitempty"`
}

// FloatingIpDetachParams is the request parameters for FloatingIpDetach
type FloatingIpDetachParams struct {
	FloatingIp NameOrId `json:"floating_ip,omitempty" yaml:"floating_ip,omitempty"`
	Project    NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// GroupListParams is the request parameters for GroupList
type GroupListParams struct {
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// GroupViewParams is the request parameters for GroupView
type GroupViewParams struct {
	GroupId string `json:"group_id,omitempty" yaml:"group_id,omitempty"`
}

// ImageListParams is the request parameters for ImageList
type ImageListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Project   NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// ImageCreateParams is the request parameters for ImageCreate
type ImageCreateParams struct {
	Project NameOrId     `json:"project,omitempty" yaml:"project,omitempty"`
	Body    *ImageCreate `json:"body,omitempty" yaml:"body,omitempty"`
}

// ImageDeleteParams is the request parameters for ImageDelete
type ImageDeleteParams struct {
	Image   NameOrId `json:"image,omitempty" yaml:"image,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// ImageViewParams is the request parameters for ImageView
type ImageViewParams struct {
	Image   NameOrId `json:"image,omitempty" yaml:"image,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// ImageDemoteParams is the request parameters for ImageDemote
type ImageDemoteParams struct {
	Image   NameOrId `json:"image,omitempty" yaml:"image,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// ImagePromoteParams is the request parameters for ImagePromote
type ImagePromoteParams struct {
	Image   NameOrId `json:"image,omitempty" yaml:"image,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// InstanceListParams is the request parameters for InstanceList
type InstanceListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Project   NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// InstanceCreateParams is the request parameters for InstanceCreate
type InstanceCreateParams struct {
	Project NameOrId        `json:"project,omitempty" yaml:"project,omitempty"`
	Body    *InstanceCreate `json:"body,omitempty" yaml:"body,omitempty"`
}

// InstanceDeleteParams is the request parameters for InstanceDelete
type InstanceDeleteParams struct {
	Project  NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Instance NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
}

// InstanceViewParams is the request parameters for InstanceView
type InstanceViewParams struct {
	Project  NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Instance NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
}

// InstanceDiskListParams is the request parameters for InstanceDiskList
type InstanceDiskListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Project   NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
	Instance  NameOrId         `json:"instance,omitempty" yaml:"instance,omitempty"`
}

// InstanceDiskAttachParams is the request parameters for InstanceDiskAttach
type InstanceDiskAttachParams struct {
	Instance NameOrId  `json:"instance,omitempty" yaml:"instance,omitempty"`
	Project  NameOrId  `json:"project,omitempty" yaml:"project,omitempty"`
	Body     *DiskPath `json:"body,omitempty" yaml:"body,omitempty"`
}

// InstanceDiskDetachParams is the request parameters for InstanceDiskDetach
type InstanceDiskDetachParams struct {
	Instance NameOrId  `json:"instance,omitempty" yaml:"instance,omitempty"`
	Project  NameOrId  `json:"project,omitempty" yaml:"project,omitempty"`
	Body     *DiskPath `json:"body,omitempty" yaml:"body,omitempty"`
}

// InstanceExternalIpListParams is the request parameters for InstanceExternalIpList
type InstanceExternalIpListParams struct {
	Project  NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Instance NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
}

// InstanceEphemeralIpDetachParams is the request parameters for InstanceEphemeralIpDetach
type InstanceEphemeralIpDetachParams struct {
	Instance NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
	Project  NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// InstanceEphemeralIpAttachParams is the request parameters for InstanceEphemeralIpAttach
type InstanceEphemeralIpAttachParams struct {
	Instance NameOrId           `json:"instance,omitempty" yaml:"instance,omitempty"`
	Project  NameOrId           `json:"project,omitempty" yaml:"project,omitempty"`
	Body     *EphemeralIpCreate `json:"body,omitempty" yaml:"body,omitempty"`
}

// InstanceMigrateParams is the request parameters for InstanceMigrate
type InstanceMigrateParams struct {
	Project  NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	Instance NameOrId         `json:"instance,omitempty" yaml:"instance,omitempty"`
	Body     *InstanceMigrate `json:"body,omitempty" yaml:"body,omitempty"`
}

// InstanceRebootParams is the request parameters for InstanceReboot
type InstanceRebootParams struct {
	Project  NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Instance NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
}

// InstanceSerialConsoleParams is the request parameters for InstanceSerialConsole
type InstanceSerialConsoleParams struct {
	Instance   NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
	FromStart  int      `json:"from_start,omitempty" yaml:"from_start,omitempty"`
	MaxBytes   int      `json:"max_bytes,omitempty" yaml:"max_bytes,omitempty"`
	MostRecent int      `json:"most_recent,omitempty" yaml:"most_recent,omitempty"`
	Project    NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// InstanceSerialConsoleStreamParams is the request parameters for InstanceSerialConsoleStream
type InstanceSerialConsoleStreamParams struct {
	Instance   NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
	MostRecent int      `json:"most_recent,omitempty" yaml:"most_recent,omitempty"`
	Project    NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// InstanceSshPublicKeyListParams is the request parameters for InstanceSshPublicKeyList
type InstanceSshPublicKeyListParams struct {
	Instance  NameOrId         `json:"instance,omitempty" yaml:"instance,omitempty"`
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Project   NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// InstanceStartParams is the request parameters for InstanceStart
type InstanceStartParams struct {
	Project  NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Instance NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
}

// InstanceStopParams is the request parameters for InstanceStop
type InstanceStopParams struct {
	Project  NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Instance NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
}

// ProjectIpPoolListParams is the request parameters for ProjectIpPoolList
type ProjectIpPoolListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// ProjectIpPoolViewParams is the request parameters for ProjectIpPoolView
type ProjectIpPoolViewParams struct {
	Pool NameOrId `json:"pool,omitempty" yaml:"pool,omitempty"`
}

// LoginLocalParams is the request parameters for LoginLocal
type LoginLocalParams struct {
	SiloName Name                         `json:"silo_name,omitempty" yaml:"silo_name,omitempty"`
	Body     *UsernamePasswordCredentials `json:"body,omitempty" yaml:"body,omitempty"`
}

// CurrentUserGroupsParams is the request parameters for CurrentUserGroups
type CurrentUserGroupsParams struct {
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// CurrentUserSshKeyListParams is the request parameters for CurrentUserSshKeyList
type CurrentUserSshKeyListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// CurrentUserSshKeyCreateParams is the request parameters for CurrentUserSshKeyCreate
type CurrentUserSshKeyCreateParams struct {
	Body *SshKeyCreate `json:"body,omitempty" yaml:"body,omitempty"`
}

// CurrentUserSshKeyDeleteParams is the request parameters for CurrentUserSshKeyDelete
type CurrentUserSshKeyDeleteParams struct {
	SshKey NameOrId `json:"ssh_key,omitempty" yaml:"ssh_key,omitempty"`
}

// CurrentUserSshKeyViewParams is the request parameters for CurrentUserSshKeyView
type CurrentUserSshKeyViewParams struct {
	SshKey NameOrId `json:"ssh_key,omitempty" yaml:"ssh_key,omitempty"`
}

// SiloMetricParams is the request parameters for SiloMetric
type SiloMetricParams struct {
	MetricName SystemMetricName `json:"metric_name,omitempty" yaml:"metric_name,omitempty"`
	EndTime    *time.Time       `json:"end_time,omitempty" yaml:"end_time,omitempty"`
	Limit      int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	Order      PaginationOrder  `json:"order,omitempty" yaml:"order,omitempty"`
	PageToken  string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	StartTime  *time.Time       `json:"start_time,omitempty" yaml:"start_time,omitempty"`
	Project    NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
}

// InstanceNetworkInterfaceListParams is the request parameters for InstanceNetworkInterfaceList
type InstanceNetworkInterfaceListParams struct {
	Instance  NameOrId         `json:"instance,omitempty" yaml:"instance,omitempty"`
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Project   NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// InstanceNetworkInterfaceCreateParams is the request parameters for InstanceNetworkInterfaceCreate
type InstanceNetworkInterfaceCreateParams struct {
	Instance NameOrId                        `json:"instance,omitempty" yaml:"instance,omitempty"`
	Project  NameOrId                        `json:"project,omitempty" yaml:"project,omitempty"`
	Body     *InstanceNetworkInterfaceCreate `json:"body,omitempty" yaml:"body,omitempty"`
}

// InstanceNetworkInterfaceDeleteParams is the request parameters for InstanceNetworkInterfaceDelete
type InstanceNetworkInterfaceDeleteParams struct {
	Interface NameOrId `json:"interface,omitempty" yaml:"interface,omitempty"`
	Instance  NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
	Project   NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// InstanceNetworkInterfaceViewParams is the request parameters for InstanceNetworkInterfaceView
type InstanceNetworkInterfaceViewParams struct {
	Interface NameOrId `json:"interface,omitempty" yaml:"interface,omitempty"`
	Instance  NameOrId `json:"instance,omitempty" yaml:"instance,omitempty"`
	Project   NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// InstanceNetworkInterfaceUpdateParams is the request parameters for InstanceNetworkInterfaceUpdate
type InstanceNetworkInterfaceUpdateParams struct {
	Interface NameOrId                        `json:"interface,omitempty" yaml:"interface,omitempty"`
	Instance  NameOrId                        `json:"instance,omitempty" yaml:"instance,omitempty"`
	Project   NameOrId                        `json:"project,omitempty" yaml:"project,omitempty"`
	Body      *InstanceNetworkInterfaceUpdate `json:"body,omitempty" yaml:"body,omitempty"`
}

// PolicyUpdateParams is the request parameters for PolicyUpdate
type PolicyUpdateParams struct {
	Body *SiloRolePolicy `json:"body,omitempty" yaml:"body,omitempty"`
}

// ProjectListParams is the request parameters for ProjectList
type ProjectListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// ProjectCreateParams is the request parameters for ProjectCreate
type ProjectCreateParams struct {
	Body *ProjectCreate `json:"body,omitempty" yaml:"body,omitempty"`
}

// ProjectDeleteParams is the request parameters for ProjectDelete
type ProjectDeleteParams struct {
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// ProjectViewParams is the request parameters for ProjectView
type ProjectViewParams struct {
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// ProjectUpdateParams is the request parameters for ProjectUpdate
type ProjectUpdateParams struct {
	Project NameOrId       `json:"project,omitempty" yaml:"project,omitempty"`
	Body    *ProjectUpdate `json:"body,omitempty" yaml:"body,omitempty"`
}

// ProjectPolicyViewParams is the request parameters for ProjectPolicyView
type ProjectPolicyViewParams struct {
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// ProjectPolicyUpdateParams is the request parameters for ProjectPolicyUpdate
type ProjectPolicyUpdateParams struct {
	Project NameOrId           `json:"project,omitempty" yaml:"project,omitempty"`
	Body    *ProjectRolePolicy `json:"body,omitempty" yaml:"body,omitempty"`
}

// SnapshotListParams is the request parameters for SnapshotList
type SnapshotListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Project   NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// SnapshotCreateParams is the request parameters for SnapshotCreate
type SnapshotCreateParams struct {
	Project NameOrId        `json:"project,omitempty" yaml:"project,omitempty"`
	Body    *SnapshotCreate `json:"body,omitempty" yaml:"body,omitempty"`
}

// SnapshotDeleteParams is the request parameters for SnapshotDelete
type SnapshotDeleteParams struct {
	Snapshot NameOrId `json:"snapshot,omitempty" yaml:"snapshot,omitempty"`
	Project  NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// SnapshotViewParams is the request parameters for SnapshotView
type SnapshotViewParams struct {
	Snapshot NameOrId `json:"snapshot,omitempty" yaml:"snapshot,omitempty"`
	Project  NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// PhysicalDiskListParams is the request parameters for PhysicalDiskList
type PhysicalDiskListParams struct {
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// RackListParams is the request parameters for RackList
type RackListParams struct {
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// RackViewParams is the request parameters for RackView
type RackViewParams struct {
	RackId string `json:"rack_id,omitempty" yaml:"rack_id,omitempty"`
}

// SledListParams is the request parameters for SledList
type SledListParams struct {
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// SledAddParams is the request parameters for SledAdd
type SledAddParams struct {
	Body *UninitializedSledId `json:"body,omitempty" yaml:"body,omitempty"`
}

// SledListUninitializedParams is the request parameters for SledListUninitialized
type SledListUninitializedParams struct {
	Limit     int    `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string `json:"page_token,omitempty" yaml:"page_token,omitempty"`
}

// SledViewParams is the request parameters for SledView
type SledViewParams struct {
	SledId string `json:"sled_id,omitempty" yaml:"sled_id,omitempty"`
}

// SledPhysicalDiskListParams is the request parameters for SledPhysicalDiskList
type SledPhysicalDiskListParams struct {
	SledId    string     `json:"sled_id,omitempty" yaml:"sled_id,omitempty"`
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// SledInstanceListParams is the request parameters for SledInstanceList
type SledInstanceListParams struct {
	SledId    string     `json:"sled_id,omitempty" yaml:"sled_id,omitempty"`
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// SledSetProvisionStateParams is the request parameters for SledSetProvisionState
type SledSetProvisionStateParams struct {
	SledId string                    `json:"sled_id,omitempty" yaml:"sled_id,omitempty"`
	Body   *SledProvisionStateParams `json:"body,omitempty" yaml:"body,omitempty"`
}

// NetworkingSwitchPortListParams is the request parameters for NetworkingSwitchPortList
type NetworkingSwitchPortListParams struct {
	Limit        int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken    string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy       IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
	SwitchPortId string     `json:"switch_port_id,omitempty" yaml:"switch_port_id,omitempty"`
}

// NetworkingSwitchPortClearSettingsParams is the request parameters for NetworkingSwitchPortClearSettings
type NetworkingSwitchPortClearSettingsParams struct {
	Port           Name   `json:"port,omitempty" yaml:"port,omitempty"`
	RackId         string `json:"rack_id,omitempty" yaml:"rack_id,omitempty"`
	SwitchLocation Name   `json:"switch_location,omitempty" yaml:"switch_location,omitempty"`
}

// NetworkingSwitchPortApplySettingsParams is the request parameters for NetworkingSwitchPortApplySettings
type NetworkingSwitchPortApplySettingsParams struct {
	Port           Name                     `json:"port,omitempty" yaml:"port,omitempty"`
	RackId         string                   `json:"rack_id,omitempty" yaml:"rack_id,omitempty"`
	SwitchLocation Name                     `json:"switch_location,omitempty" yaml:"switch_location,omitempty"`
	Body           *SwitchPortApplySettings `json:"body,omitempty" yaml:"body,omitempty"`
}

// SwitchListParams is the request parameters for SwitchList
type SwitchListParams struct {
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// SwitchViewParams is the request parameters for SwitchView
type SwitchViewParams struct {
	SwitchId string `json:"switch_id,omitempty" yaml:"switch_id,omitempty"`
}

// SiloIdentityProviderListParams is the request parameters for SiloIdentityProviderList
type SiloIdentityProviderListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Silo      NameOrId         `json:"silo,omitempty" yaml:"silo,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// LocalIdpUserCreateParams is the request parameters for LocalIdpUserCreate
type LocalIdpUserCreateParams struct {
	Silo NameOrId    `json:"silo,omitempty" yaml:"silo,omitempty"`
	Body *UserCreate `json:"body,omitempty" yaml:"body,omitempty"`
}

// LocalIdpUserDeleteParams is the request parameters for LocalIdpUserDelete
type LocalIdpUserDeleteParams struct {
	UserId string   `json:"user_id,omitempty" yaml:"user_id,omitempty"`
	Silo   NameOrId `json:"silo,omitempty" yaml:"silo,omitempty"`
}

// LocalIdpUserSetPasswordParams is the request parameters for LocalIdpUserSetPassword
type LocalIdpUserSetPasswordParams struct {
	UserId string        `json:"user_id,omitempty" yaml:"user_id,omitempty"`
	Silo   NameOrId      `json:"silo,omitempty" yaml:"silo,omitempty"`
	Body   *UserPassword `json:"body,omitempty" yaml:"body,omitempty"`
}

// SamlIdentityProviderCreateParams is the request parameters for SamlIdentityProviderCreate
type SamlIdentityProviderCreateParams struct {
	Silo NameOrId                    `json:"silo,omitempty" yaml:"silo,omitempty"`
	Body *SamlIdentityProviderCreate `json:"body,omitempty" yaml:"body,omitempty"`
}

// SamlIdentityProviderViewParams is the request parameters for SamlIdentityProviderView
type SamlIdentityProviderViewParams struct {
	Provider NameOrId `json:"provider,omitempty" yaml:"provider,omitempty"`
	Silo     NameOrId `json:"silo,omitempty" yaml:"silo,omitempty"`
}

// IpPoolListParams is the request parameters for IpPoolList
type IpPoolListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// IpPoolCreateParams is the request parameters for IpPoolCreate
type IpPoolCreateParams struct {
	Body *IpPoolCreate `json:"body,omitempty" yaml:"body,omitempty"`
}

// IpPoolServiceRangeListParams is the request parameters for IpPoolServiceRangeList
type IpPoolServiceRangeListParams struct {
	Limit     int    `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string `json:"page_token,omitempty" yaml:"page_token,omitempty"`
}

// IpPoolServiceRangeAddParams is the request parameters for IpPoolServiceRangeAdd
type IpPoolServiceRangeAddParams struct {
	Body *IpRange `json:"body,omitempty" yaml:"body,omitempty"`
}

// IpPoolServiceRangeRemoveParams is the request parameters for IpPoolServiceRangeRemove
type IpPoolServiceRangeRemoveParams struct {
	Body *IpRange `json:"body,omitempty" yaml:"body,omitempty"`
}

// IpPoolDeleteParams is the request parameters for IpPoolDelete
type IpPoolDeleteParams struct {
	Pool NameOrId `json:"pool,omitempty" yaml:"pool,omitempty"`
}

// IpPoolViewParams is the request parameters for IpPoolView
type IpPoolViewParams struct {
	Pool NameOrId `json:"pool,omitempty" yaml:"pool,omitempty"`
}

// IpPoolUpdateParams is the request parameters for IpPoolUpdate
type IpPoolUpdateParams struct {
	Pool NameOrId      `json:"pool,omitempty" yaml:"pool,omitempty"`
	Body *IpPoolUpdate `json:"body,omitempty" yaml:"body,omitempty"`
}

// IpPoolRangeListParams is the request parameters for IpPoolRangeList
type IpPoolRangeListParams struct {
	Pool      NameOrId `json:"pool,omitempty" yaml:"pool,omitempty"`
	Limit     int      `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string   `json:"page_token,omitempty" yaml:"page_token,omitempty"`
}

// IpPoolRangeAddParams is the request parameters for IpPoolRangeAdd
type IpPoolRangeAddParams struct {
	Pool NameOrId `json:"pool,omitempty" yaml:"pool,omitempty"`
	Body *IpRange `json:"body,omitempty" yaml:"body,omitempty"`
}

// IpPoolRangeRemoveParams is the request parameters for IpPoolRangeRemove
type IpPoolRangeRemoveParams struct {
	Pool NameOrId `json:"pool,omitempty" yaml:"pool,omitempty"`
	Body *IpRange `json:"body,omitempty" yaml:"body,omitempty"`
}

// IpPoolSiloListParams is the request parameters for IpPoolSiloList
type IpPoolSiloListParams struct {
	Pool      NameOrId   `json:"pool,omitempty" yaml:"pool,omitempty"`
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// IpPoolSiloLinkParams is the request parameters for IpPoolSiloLink
type IpPoolSiloLinkParams struct {
	Pool NameOrId        `json:"pool,omitempty" yaml:"pool,omitempty"`
	Body *IpPoolLinkSilo `json:"body,omitempty" yaml:"body,omitempty"`
}

// IpPoolSiloUnlinkParams is the request parameters for IpPoolSiloUnlink
type IpPoolSiloUnlinkParams struct {
	Pool NameOrId `json:"pool,omitempty" yaml:"pool,omitempty"`
	Silo NameOrId `json:"silo,omitempty" yaml:"silo,omitempty"`
}

// IpPoolSiloUpdateParams is the request parameters for IpPoolSiloUpdate
type IpPoolSiloUpdateParams struct {
	Pool NameOrId          `json:"pool,omitempty" yaml:"pool,omitempty"`
	Silo NameOrId          `json:"silo,omitempty" yaml:"silo,omitempty"`
	Body *IpPoolSiloUpdate `json:"body,omitempty" yaml:"body,omitempty"`
}

// SystemMetricParams is the request parameters for SystemMetric
type SystemMetricParams struct {
	MetricName SystemMetricName `json:"metric_name,omitempty" yaml:"metric_name,omitempty"`
	EndTime    *time.Time       `json:"end_time,omitempty" yaml:"end_time,omitempty"`
	Limit      int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	Order      PaginationOrder  `json:"order,omitempty" yaml:"order,omitempty"`
	PageToken  string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	StartTime  *time.Time       `json:"start_time,omitempty" yaml:"start_time,omitempty"`
	Silo       NameOrId         `json:"silo,omitempty" yaml:"silo,omitempty"`
}

// NetworkingAddressLotListParams is the request parameters for NetworkingAddressLotList
type NetworkingAddressLotListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// NetworkingAddressLotCreateParams is the request parameters for NetworkingAddressLotCreate
type NetworkingAddressLotCreateParams struct {
	Body *AddressLotCreate `json:"body,omitempty" yaml:"body,omitempty"`
}

// NetworkingAddressLotDeleteParams is the request parameters for NetworkingAddressLotDelete
type NetworkingAddressLotDeleteParams struct {
	AddressLot NameOrId `json:"address_lot,omitempty" yaml:"address_lot,omitempty"`
}

// NetworkingAddressLotBlockListParams is the request parameters for NetworkingAddressLotBlockList
type NetworkingAddressLotBlockListParams struct {
	AddressLot NameOrId   `json:"address_lot,omitempty" yaml:"address_lot,omitempty"`
	Limit      int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken  string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy     IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// NetworkingBfdDisableParams is the request parameters for NetworkingBfdDisable
type NetworkingBfdDisableParams struct {
	Body *BfdSessionDisable `json:"body,omitempty" yaml:"body,omitempty"`
}

// NetworkingBfdEnableParams is the request parameters for NetworkingBfdEnable
type NetworkingBfdEnableParams struct {
	Body *BfdSessionEnable `json:"body,omitempty" yaml:"body,omitempty"`
}

// NetworkingBgpConfigDeleteParams is the request parameters for NetworkingBgpConfigDelete
type NetworkingBgpConfigDeleteParams struct {
	NameOrId NameOrId `json:"name_or_id,omitempty" yaml:"name_or_id,omitempty"`
}

// NetworkingBgpConfigListParams is the request parameters for NetworkingBgpConfigList
type NetworkingBgpConfigListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	NameOrId  NameOrId         `json:"name_or_id,omitempty" yaml:"name_or_id,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// NetworkingBgpConfigCreateParams is the request parameters for NetworkingBgpConfigCreate
type NetworkingBgpConfigCreateParams struct {
	Body *BgpConfigCreate `json:"body,omitempty" yaml:"body,omitempty"`
}

// NetworkingBgpAnnounceSetDeleteParams is the request parameters for NetworkingBgpAnnounceSetDelete
type NetworkingBgpAnnounceSetDeleteParams struct {
	NameOrId NameOrId `json:"name_or_id,omitempty" yaml:"name_or_id,omitempty"`
}

// NetworkingBgpAnnounceSetListParams is the request parameters for NetworkingBgpAnnounceSetList
type NetworkingBgpAnnounceSetListParams struct {
	NameOrId NameOrId `json:"name_or_id,omitempty" yaml:"name_or_id,omitempty"`
}

// NetworkingBgpAnnounceSetCreateParams is the request parameters for NetworkingBgpAnnounceSetCreate
type NetworkingBgpAnnounceSetCreateParams struct {
	Body *BgpAnnounceSetCreate `json:"body,omitempty" yaml:"body,omitempty"`
}

// NetworkingBgpImportedRoutesIpv4Params is the request parameters for NetworkingBgpImportedRoutesIpv4
type NetworkingBgpImportedRoutesIpv4Params struct {
	Asn int `json:"asn,omitempty" yaml:"asn,omitempty"`
}

// NetworkingLoopbackAddressListParams is the request parameters for NetworkingLoopbackAddressList
type NetworkingLoopbackAddressListParams struct {
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// NetworkingLoopbackAddressCreateParams is the request parameters for NetworkingLoopbackAddressCreate
type NetworkingLoopbackAddressCreateParams struct {
	Body *LoopbackAddressCreate `json:"body,omitempty" yaml:"body,omitempty"`
}

// NetworkingLoopbackAddressDeleteParams is the request parameters for NetworkingLoopbackAddressDelete
type NetworkingLoopbackAddressDeleteParams struct {
	Address        string `json:"address,omitempty" yaml:"address,omitempty"`
	RackId         string `json:"rack_id,omitempty" yaml:"rack_id,omitempty"`
	SubnetMask     int    `json:"subnet_mask,omitempty" yaml:"subnet_mask,omitempty"`
	SwitchLocation Name   `json:"switch_location,omitempty" yaml:"switch_location,omitempty"`
}

// NetworkingSwitchPortSettingsDeleteParams is the request parameters for NetworkingSwitchPortSettingsDelete
type NetworkingSwitchPortSettingsDeleteParams struct {
	PortSettings NameOrId `json:"port_settings,omitempty" yaml:"port_settings,omitempty"`
}

// NetworkingSwitchPortSettingsListParams is the request parameters for NetworkingSwitchPortSettingsList
type NetworkingSwitchPortSettingsListParams struct {
	Limit        int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken    string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	PortSettings NameOrId         `json:"port_settings,omitempty" yaml:"port_settings,omitempty"`
	SortBy       NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// NetworkingSwitchPortSettingsCreateParams is the request parameters for NetworkingSwitchPortSettingsCreate
type NetworkingSwitchPortSettingsCreateParams struct {
	Body *SwitchPortSettingsCreate `json:"body,omitempty" yaml:"body,omitempty"`
}

// NetworkingSwitchPortSettingsViewParams is the request parameters for NetworkingSwitchPortSettingsView
type NetworkingSwitchPortSettingsViewParams struct {
	Port NameOrId `json:"port,omitempty" yaml:"port,omitempty"`
}

// SystemPolicyUpdateParams is the request parameters for SystemPolicyUpdate
type SystemPolicyUpdateParams struct {
	Body *FleetRolePolicy `json:"body,omitempty" yaml:"body,omitempty"`
}

// RoleListParams is the request parameters for RoleList
type RoleListParams struct {
	Limit     int    `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string `json:"page_token,omitempty" yaml:"page_token,omitempty"`
}

// RoleViewParams is the request parameters for RoleView
type RoleViewParams struct {
	RoleName string `json:"role_name,omitempty" yaml:"role_name,omitempty"`
}

// SystemQuotasListParams is the request parameters for SystemQuotasList
type SystemQuotasListParams struct {
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// SiloListParams is the request parameters for SiloList
type SiloListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// SiloCreateParams is the request parameters for SiloCreate
type SiloCreateParams struct {
	Body *SiloCreate `json:"body,omitempty" yaml:"body,omitempty"`
}

// SiloDeleteParams is the request parameters for SiloDelete
type SiloDeleteParams struct {
	Silo NameOrId `json:"silo,omitempty" yaml:"silo,omitempty"`
}

// SiloViewParams is the request parameters for SiloView
type SiloViewParams struct {
	Silo NameOrId `json:"silo,omitempty" yaml:"silo,omitempty"`
}

// SiloIpPoolListParams is the request parameters for SiloIpPoolList
type SiloIpPoolListParams struct {
	Silo      NameOrId         `json:"silo,omitempty" yaml:"silo,omitempty"`
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// SiloPolicyViewParams is the request parameters for SiloPolicyView
type SiloPolicyViewParams struct {
	Silo NameOrId `json:"silo,omitempty" yaml:"silo,omitempty"`
}

// SiloPolicyUpdateParams is the request parameters for SiloPolicyUpdate
type SiloPolicyUpdateParams struct {
	Silo NameOrId        `json:"silo,omitempty" yaml:"silo,omitempty"`
	Body *SiloRolePolicy `json:"body,omitempty" yaml:"body,omitempty"`
}

// SiloQuotasViewParams is the request parameters for SiloQuotasView
type SiloQuotasViewParams struct {
	Silo NameOrId `json:"silo,omitempty" yaml:"silo,omitempty"`
}

// SiloQuotasUpdateParams is the request parameters for SiloQuotasUpdate
type SiloQuotasUpdateParams struct {
	Silo NameOrId          `json:"silo,omitempty" yaml:"silo,omitempty"`
	Body *SiloQuotasUpdate `json:"body,omitempty" yaml:"body,omitempty"`
}

// SiloUserListParams is the request parameters for SiloUserList
type SiloUserListParams struct {
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Silo      NameOrId   `json:"silo,omitempty" yaml:"silo,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// UserBuiltinListParams is the request parameters for UserBuiltinList
type UserBuiltinListParams struct {
	Limit     int          `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string       `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    NameSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// UserBuiltinViewParams is the request parameters for UserBuiltinView
type UserBuiltinViewParams struct {
	User NameOrId `json:"user,omitempty" yaml:"user,omitempty"`
}

// SiloUserViewParams is the request parameters for SiloUserView
type SiloUserViewParams struct {
	UserId string   `json:"user_id,omitempty" yaml:"user_id,omitempty"`
	Silo   NameOrId `json:"silo,omitempty" yaml:"silo,omitempty"`
}

// SiloUtilizationListParams is the request parameters for SiloUtilizationList
type SiloUtilizationListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// SiloUtilizationViewParams is the request parameters for SiloUtilizationView
type SiloUtilizationViewParams struct {
	Silo NameOrId `json:"silo,omitempty" yaml:"silo,omitempty"`
}

// UserListParams is the request parameters for UserList
type UserListParams struct {
	Group     string     `json:"group,omitempty" yaml:"group,omitempty"`
	Limit     int        `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string     `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	SortBy    IdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// VpcFirewallRulesViewParams is the request parameters for VpcFirewallRulesView
type VpcFirewallRulesViewParams struct {
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Vpc     NameOrId `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

// VpcFirewallRulesUpdateParams is the request parameters for VpcFirewallRulesUpdate
type VpcFirewallRulesUpdateParams struct {
	Project NameOrId                     `json:"project,omitempty" yaml:"project,omitempty"`
	Vpc     NameOrId                     `json:"vpc,omitempty" yaml:"vpc,omitempty"`
	Body    *VpcFirewallRuleUpdateParams `json:"body,omitempty" yaml:"body,omitempty"`
}

// VpcSubnetListParams is the request parameters for VpcSubnetList
type VpcSubnetListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Project   NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
	Vpc       NameOrId         `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

// VpcSubnetCreateParams is the request parameters for VpcSubnetCreate
type VpcSubnetCreateParams struct {
	Project NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	Vpc     NameOrId         `json:"vpc,omitempty" yaml:"vpc,omitempty"`
	Body    *VpcSubnetCreate `json:"body,omitempty" yaml:"body,omitempty"`
}

// VpcSubnetDeleteParams is the request parameters for VpcSubnetDelete
type VpcSubnetDeleteParams struct {
	Subnet  NameOrId `json:"subnet,omitempty" yaml:"subnet,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Vpc     NameOrId `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

// VpcSubnetViewParams is the request parameters for VpcSubnetView
type VpcSubnetViewParams struct {
	Subnet  NameOrId `json:"subnet,omitempty" yaml:"subnet,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
	Vpc     NameOrId `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

// VpcSubnetUpdateParams is the request parameters for VpcSubnetUpdate
type VpcSubnetUpdateParams struct {
	Subnet  NameOrId         `json:"subnet,omitempty" yaml:"subnet,omitempty"`
	Project NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	Vpc     NameOrId         `json:"vpc,omitempty" yaml:"vpc,omitempty"`
	Body    *VpcSubnetUpdate `json:"body,omitempty" yaml:"body,omitempty"`
}

// VpcSubnetListNetworkInterfacesParams is the request parameters for VpcSubnetListNetworkInterfaces
type VpcSubnetListNetworkInterfacesParams struct {
	Subnet    NameOrId         `json:"subnet,omitempty" yaml:"subnet,omitempty"`
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Project   NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
	Vpc       NameOrId         `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

// VpcListParams is the request parameters for VpcList
type VpcListParams struct {
	Limit     int              `json:"limit,omitempty" yaml:"limit,omitempty"`
	PageToken string           `json:"page_token,omitempty" yaml:"page_token,omitempty"`
	Project   NameOrId         `json:"project,omitempty" yaml:"project,omitempty"`
	SortBy    NameOrIdSortMode `json:"sort_by,omitempty" yaml:"sort_by,omitempty"`
}

// VpcCreateParams is the request parameters for VpcCreate
type VpcCreateParams struct {
	Project NameOrId   `json:"project,omitempty" yaml:"project,omitempty"`
	Body    *VpcCreate `json:"body,omitempty" yaml:"body,omitempty"`
}

// VpcDeleteParams is the request parameters for VpcDelete
type VpcDeleteParams struct {
	Vpc     NameOrId `json:"vpc,omitempty" yaml:"vpc,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// VpcViewParams is the request parameters for VpcView
type VpcViewParams struct {
	Vpc     NameOrId `json:"vpc,omitempty" yaml:"vpc,omitempty"`
	Project NameOrId `json:"project,omitempty" yaml:"project,omitempty"`
}

// VpcUpdateParams is the request parameters for VpcUpdate
type VpcUpdateParams struct {
	Vpc     NameOrId   `json:"vpc,omitempty" yaml:"vpc,omitempty"`
	Project NameOrId   `json:"project,omitempty" yaml:"project,omitempty"`
	Body    *VpcUpdate `json:"body,omitempty" yaml:"body,omitempty"`
}

// Validate verifies all required fields for DeviceAuthRequestParams are set
func (p *DeviceAuthRequestParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for DeviceAuthConfirmParams are set
func (p *DeviceAuthConfirmParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for DeviceAccessTokenParams are set
func (p *DeviceAccessTokenParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for LoginSamlParams are set
func (p *LoginSamlParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.ProviderName), "ProviderName")
	v.HasRequiredStr(string(p.SiloName), "SiloName")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for CertificateListParams are set
func (p *CertificateListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for CertificateCreateParams are set
func (p *CertificateCreateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for CertificateDeleteParams are set
func (p *CertificateDeleteParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Certificate), "Certificate")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for CertificateViewParams are set
func (p *CertificateViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Certificate), "Certificate")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for DiskListParams are set
func (p *DiskListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for DiskCreateParams are set
func (p *DiskCreateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Project), "Project")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for DiskDeleteParams are set
func (p *DiskDeleteParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Disk), "Disk")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for DiskViewParams are set
func (p *DiskViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Disk), "Disk")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for DiskBulkWriteImportParams are set
func (p *DiskBulkWriteImportParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Disk), "Disk")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for DiskBulkWriteImportStartParams are set
func (p *DiskBulkWriteImportStartParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Disk), "Disk")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for DiskBulkWriteImportStopParams are set
func (p *DiskBulkWriteImportStopParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Disk), "Disk")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for DiskFinalizeImportParams are set
func (p *DiskFinalizeImportParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Disk), "Disk")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for DiskMetricsListParams are set
func (p *DiskMetricsListParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Disk), "Disk")
	v.HasRequiredStr(string(p.Metric), "Metric")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for FloatingIpListParams are set
func (p *FloatingIpListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for FloatingIpCreateParams are set
func (p *FloatingIpCreateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Project), "Project")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for FloatingIpDeleteParams are set
func (p *FloatingIpDeleteParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.FloatingIp), "FloatingIp")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for FloatingIpViewParams are set
func (p *FloatingIpViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.FloatingIp), "FloatingIp")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for FloatingIpAttachParams are set
func (p *FloatingIpAttachParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.FloatingIp), "FloatingIp")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for FloatingIpDetachParams are set
func (p *FloatingIpDetachParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.FloatingIp), "FloatingIp")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for GroupListParams are set
func (p *GroupListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for GroupViewParams are set
func (p *GroupViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.GroupId), "GroupId")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for ImageListParams are set
func (p *ImageListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for ImageCreateParams are set
func (p *ImageCreateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for ImageDeleteParams are set
func (p *ImageDeleteParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Image), "Image")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for ImageViewParams are set
func (p *ImageViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Image), "Image")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for ImageDemoteParams are set
func (p *ImageDemoteParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Image), "Image")
	v.HasRequiredStr(string(p.Project), "Project")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for ImagePromoteParams are set
func (p *ImagePromoteParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Image), "Image")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for InstanceListParams are set
func (p *InstanceListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for InstanceCreateParams are set
func (p *InstanceCreateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Project), "Project")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for InstanceDeleteParams are set
func (p *InstanceDeleteParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Instance), "Instance")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for InstanceViewParams are set
func (p *InstanceViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Instance), "Instance")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for InstanceDiskListParams are set
func (p *InstanceDiskListParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Instance), "Instance")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for InstanceDiskAttachParams are set
func (p *InstanceDiskAttachParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Instance), "Instance")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for InstanceDiskDetachParams are set
func (p *InstanceDiskDetachParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Instance), "Instance")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for InstanceExternalIpListParams are set
func (p *InstanceExternalIpListParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Instance), "Instance")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for InstanceEphemeralIpDetachParams are set
func (p *InstanceEphemeralIpDetachParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Instance), "Instance")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for InstanceEphemeralIpAttachParams are set
func (p *InstanceEphemeralIpAttachParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Instance), "Instance")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for InstanceMigrateParams are set
func (p *InstanceMigrateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Instance), "Instance")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for InstanceRebootParams are set
func (p *InstanceRebootParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Instance), "Instance")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for InstanceSerialConsoleParams are set
func (p *InstanceSerialConsoleParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Instance), "Instance")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for InstanceSerialConsoleStreamParams are set
func (p *InstanceSerialConsoleStreamParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Instance), "Instance")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for InstanceSshPublicKeyListParams are set
func (p *InstanceSshPublicKeyListParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Instance), "Instance")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for InstanceStartParams are set
func (p *InstanceStartParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Instance), "Instance")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for InstanceStopParams are set
func (p *InstanceStopParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Instance), "Instance")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for ProjectIpPoolListParams are set
func (p *ProjectIpPoolListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for ProjectIpPoolViewParams are set
func (p *ProjectIpPoolViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Pool), "Pool")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for LoginLocalParams are set
func (p *LoginLocalParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.SiloName), "SiloName")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for CurrentUserGroupsParams are set
func (p *CurrentUserGroupsParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for CurrentUserSshKeyListParams are set
func (p *CurrentUserSshKeyListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for CurrentUserSshKeyCreateParams are set
func (p *CurrentUserSshKeyCreateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for CurrentUserSshKeyDeleteParams are set
func (p *CurrentUserSshKeyDeleteParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.SshKey), "SshKey")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for CurrentUserSshKeyViewParams are set
func (p *CurrentUserSshKeyViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.SshKey), "SshKey")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SiloMetricParams are set
func (p *SiloMetricParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.MetricName), "MetricName")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for InstanceNetworkInterfaceListParams are set
func (p *InstanceNetworkInterfaceListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for InstanceNetworkInterfaceCreateParams are set
func (p *InstanceNetworkInterfaceCreateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Instance), "Instance")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for InstanceNetworkInterfaceDeleteParams are set
func (p *InstanceNetworkInterfaceDeleteParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Interface), "Interface")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for InstanceNetworkInterfaceViewParams are set
func (p *InstanceNetworkInterfaceViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Interface), "Interface")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for InstanceNetworkInterfaceUpdateParams are set
func (p *InstanceNetworkInterfaceUpdateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Interface), "Interface")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for PolicyUpdateParams are set
func (p *PolicyUpdateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for ProjectListParams are set
func (p *ProjectListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for ProjectCreateParams are set
func (p *ProjectCreateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for ProjectDeleteParams are set
func (p *ProjectDeleteParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Project), "Project")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for ProjectViewParams are set
func (p *ProjectViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Project), "Project")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for ProjectUpdateParams are set
func (p *ProjectUpdateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Project), "Project")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for ProjectPolicyViewParams are set
func (p *ProjectPolicyViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Project), "Project")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for ProjectPolicyUpdateParams are set
func (p *ProjectPolicyUpdateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Project), "Project")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SnapshotListParams are set
func (p *SnapshotListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SnapshotCreateParams are set
func (p *SnapshotCreateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Project), "Project")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SnapshotDeleteParams are set
func (p *SnapshotDeleteParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Snapshot), "Snapshot")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SnapshotViewParams are set
func (p *SnapshotViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Snapshot), "Snapshot")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for PhysicalDiskListParams are set
func (p *PhysicalDiskListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for RackListParams are set
func (p *RackListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for RackViewParams are set
func (p *RackViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.RackId), "RackId")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SledListParams are set
func (p *SledListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SledAddParams are set
func (p *SledAddParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SledListUninitializedParams are set
func (p *SledListUninitializedParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SledViewParams are set
func (p *SledViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.SledId), "SledId")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SledPhysicalDiskListParams are set
func (p *SledPhysicalDiskListParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.SledId), "SledId")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SledInstanceListParams are set
func (p *SledInstanceListParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.SledId), "SledId")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SledSetProvisionStateParams are set
func (p *SledSetProvisionStateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.SledId), "SledId")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for NetworkingSwitchPortListParams are set
func (p *NetworkingSwitchPortListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for NetworkingSwitchPortClearSettingsParams are set
func (p *NetworkingSwitchPortClearSettingsParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Port), "Port")
	v.HasRequiredStr(string(p.RackId), "RackId")
	v.HasRequiredStr(string(p.SwitchLocation), "SwitchLocation")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for NetworkingSwitchPortApplySettingsParams are set
func (p *NetworkingSwitchPortApplySettingsParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Port), "Port")
	v.HasRequiredStr(string(p.RackId), "RackId")
	v.HasRequiredStr(string(p.SwitchLocation), "SwitchLocation")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SwitchListParams are set
func (p *SwitchListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SwitchViewParams are set
func (p *SwitchViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.SwitchId), "SwitchId")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SiloIdentityProviderListParams are set
func (p *SiloIdentityProviderListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for LocalIdpUserCreateParams are set
func (p *LocalIdpUserCreateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Silo), "Silo")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for LocalIdpUserDeleteParams are set
func (p *LocalIdpUserDeleteParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.UserId), "UserId")
	v.HasRequiredStr(string(p.Silo), "Silo")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for LocalIdpUserSetPasswordParams are set
func (p *LocalIdpUserSetPasswordParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.UserId), "UserId")
	v.HasRequiredStr(string(p.Silo), "Silo")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SamlIdentityProviderCreateParams are set
func (p *SamlIdentityProviderCreateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Silo), "Silo")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SamlIdentityProviderViewParams are set
func (p *SamlIdentityProviderViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Provider), "Provider")
	v.HasRequiredStr(string(p.Silo), "Silo")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for IpPoolListParams are set
func (p *IpPoolListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for IpPoolCreateParams are set
func (p *IpPoolCreateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for IpPoolServiceRangeListParams are set
func (p *IpPoolServiceRangeListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for IpPoolServiceRangeAddParams are set
func (p *IpPoolServiceRangeAddParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for IpPoolServiceRangeRemoveParams are set
func (p *IpPoolServiceRangeRemoveParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for IpPoolDeleteParams are set
func (p *IpPoolDeleteParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Pool), "Pool")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for IpPoolViewParams are set
func (p *IpPoolViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Pool), "Pool")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for IpPoolUpdateParams are set
func (p *IpPoolUpdateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Pool), "Pool")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for IpPoolRangeListParams are set
func (p *IpPoolRangeListParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Pool), "Pool")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for IpPoolRangeAddParams are set
func (p *IpPoolRangeAddParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Pool), "Pool")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for IpPoolRangeRemoveParams are set
func (p *IpPoolRangeRemoveParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Pool), "Pool")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for IpPoolSiloListParams are set
func (p *IpPoolSiloListParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Pool), "Pool")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for IpPoolSiloLinkParams are set
func (p *IpPoolSiloLinkParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Pool), "Pool")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for IpPoolSiloUnlinkParams are set
func (p *IpPoolSiloUnlinkParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Pool), "Pool")
	v.HasRequiredStr(string(p.Silo), "Silo")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for IpPoolSiloUpdateParams are set
func (p *IpPoolSiloUpdateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Pool), "Pool")
	v.HasRequiredStr(string(p.Silo), "Silo")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SystemMetricParams are set
func (p *SystemMetricParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.MetricName), "MetricName")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for NetworkingAddressLotListParams are set
func (p *NetworkingAddressLotListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for NetworkingAddressLotCreateParams are set
func (p *NetworkingAddressLotCreateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for NetworkingAddressLotDeleteParams are set
func (p *NetworkingAddressLotDeleteParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.AddressLot), "AddressLot")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for NetworkingAddressLotBlockListParams are set
func (p *NetworkingAddressLotBlockListParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.AddressLot), "AddressLot")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for NetworkingBfdDisableParams are set
func (p *NetworkingBfdDisableParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for NetworkingBfdEnableParams are set
func (p *NetworkingBfdEnableParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for NetworkingBgpConfigDeleteParams are set
func (p *NetworkingBgpConfigDeleteParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.NameOrId), "NameOrId")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for NetworkingBgpConfigListParams are set
func (p *NetworkingBgpConfigListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for NetworkingBgpConfigCreateParams are set
func (p *NetworkingBgpConfigCreateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for NetworkingBgpAnnounceSetDeleteParams are set
func (p *NetworkingBgpAnnounceSetDeleteParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.NameOrId), "NameOrId")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for NetworkingBgpAnnounceSetListParams are set
func (p *NetworkingBgpAnnounceSetListParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.NameOrId), "NameOrId")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for NetworkingBgpAnnounceSetCreateParams are set
func (p *NetworkingBgpAnnounceSetCreateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for NetworkingBgpImportedRoutesIpv4Params are set
func (p *NetworkingBgpImportedRoutesIpv4Params) Validate() error {
	v := new(Validator)
	v.HasRequiredNum(int(p.Asn), "Asn")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for NetworkingLoopbackAddressListParams are set
func (p *NetworkingLoopbackAddressListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for NetworkingLoopbackAddressCreateParams are set
func (p *NetworkingLoopbackAddressCreateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for NetworkingLoopbackAddressDeleteParams are set
func (p *NetworkingLoopbackAddressDeleteParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Address), "Address")
	v.HasRequiredStr(string(p.RackId), "RackId")
	v.HasRequiredStr(string(p.SwitchLocation), "SwitchLocation")
	v.HasRequiredNum(int(p.SubnetMask), "SubnetMask")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for NetworkingSwitchPortSettingsDeleteParams are set
func (p *NetworkingSwitchPortSettingsDeleteParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for NetworkingSwitchPortSettingsListParams are set
func (p *NetworkingSwitchPortSettingsListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for NetworkingSwitchPortSettingsCreateParams are set
func (p *NetworkingSwitchPortSettingsCreateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for NetworkingSwitchPortSettingsViewParams are set
func (p *NetworkingSwitchPortSettingsViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Port), "Port")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SystemPolicyUpdateParams are set
func (p *SystemPolicyUpdateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for RoleListParams are set
func (p *RoleListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for RoleViewParams are set
func (p *RoleViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.RoleName), "RoleName")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SystemQuotasListParams are set
func (p *SystemQuotasListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SiloListParams are set
func (p *SiloListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SiloCreateParams are set
func (p *SiloCreateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SiloDeleteParams are set
func (p *SiloDeleteParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Silo), "Silo")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SiloViewParams are set
func (p *SiloViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Silo), "Silo")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SiloIpPoolListParams are set
func (p *SiloIpPoolListParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Silo), "Silo")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SiloPolicyViewParams are set
func (p *SiloPolicyViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Silo), "Silo")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SiloPolicyUpdateParams are set
func (p *SiloPolicyUpdateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Silo), "Silo")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SiloQuotasViewParams are set
func (p *SiloQuotasViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Silo), "Silo")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SiloQuotasUpdateParams are set
func (p *SiloQuotasUpdateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Silo), "Silo")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SiloUserListParams are set
func (p *SiloUserListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for UserBuiltinListParams are set
func (p *UserBuiltinListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for UserBuiltinViewParams are set
func (p *UserBuiltinViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.User), "User")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SiloUserViewParams are set
func (p *SiloUserViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.UserId), "UserId")
	v.HasRequiredStr(string(p.Silo), "Silo")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SiloUtilizationListParams are set
func (p *SiloUtilizationListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for SiloUtilizationViewParams are set
func (p *SiloUtilizationViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Silo), "Silo")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for UserListParams are set
func (p *UserListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for VpcFirewallRulesViewParams are set
func (p *VpcFirewallRulesViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Vpc), "Vpc")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for VpcFirewallRulesUpdateParams are set
func (p *VpcFirewallRulesUpdateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Vpc), "Vpc")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for VpcSubnetListParams are set
func (p *VpcSubnetListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for VpcSubnetCreateParams are set
func (p *VpcSubnetCreateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Vpc), "Vpc")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for VpcSubnetDeleteParams are set
func (p *VpcSubnetDeleteParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Subnet), "Subnet")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for VpcSubnetViewParams are set
func (p *VpcSubnetViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Subnet), "Subnet")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for VpcSubnetUpdateParams are set
func (p *VpcSubnetUpdateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Subnet), "Subnet")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for VpcSubnetListNetworkInterfacesParams are set
func (p *VpcSubnetListNetworkInterfacesParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Subnet), "Subnet")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for VpcListParams are set
func (p *VpcListParams) Validate() error {
	v := new(Validator)
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for VpcCreateParams are set
func (p *VpcCreateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Project), "Project")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for VpcDeleteParams are set
func (p *VpcDeleteParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Vpc), "Vpc")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for VpcViewParams are set
func (p *VpcViewParams) Validate() error {
	v := new(Validator)
	v.HasRequiredStr(string(p.Vpc), "Vpc")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// Validate verifies all required fields for VpcUpdateParams are set
func (p *VpcUpdateParams) Validate() error {
	v := new(Validator)
	v.HasRequiredObj(p.Body, "Body")
	v.HasRequiredStr(string(p.Vpc), "Vpc")
	if !v.IsValid() {
		return fmt.Errorf("validation error:\n%v", v.Error())
	}
	return nil
}

// AddressLotKindInfra represents the AddressLotKind `"infra"`.
const AddressLotKindInfra AddressLotKind = "infra"

// AddressLotKindPool represents the AddressLotKind `"pool"`.
const AddressLotKindPool AddressLotKind = "pool"

// BfdModeSingleHop represents the BfdMode `"single_hop"`.
const BfdModeSingleHop BfdMode = "single_hop"

// BfdModeMultiHop represents the BfdMode `"multi_hop"`.
const BfdModeMultiHop BfdMode = "multi_hop"

// BfdStateAdminDown represents the BfdState `"admin_down"`.
const BfdStateAdminDown BfdState = "admin_down"

// BfdStateDown represents the BfdState `"down"`.
const BfdStateDown BfdState = "down"

// BfdStateInit represents the BfdState `"init"`.
const BfdStateInit BfdState = "init"

// BfdStateUp represents the BfdState `"up"`.
const BfdStateUp BfdState = "up"

// BgpPeerStateIdle represents the BgpPeerState `"idle"`.
const BgpPeerStateIdle BgpPeerState = "idle"

// BgpPeerStateConnect represents the BgpPeerState `"connect"`.
const BgpPeerStateConnect BgpPeerState = "connect"

// BgpPeerStateActive represents the BgpPeerState `"active"`.
const BgpPeerStateActive BgpPeerState = "active"

// BgpPeerStateOpenSent represents the BgpPeerState `"open_sent"`.
const BgpPeerStateOpenSent BgpPeerState = "open_sent"

// BgpPeerStateOpenConfirm represents the BgpPeerState `"open_confirm"`.
const BgpPeerStateOpenConfirm BgpPeerState = "open_confirm"

// BgpPeerStateSessionSetup represents the BgpPeerState `"session_setup"`.
const BgpPeerStateSessionSetup BgpPeerState = "session_setup"

// BgpPeerStateEstablished represents the BgpPeerState `"established"`.
const BgpPeerStateEstablished BgpPeerState = "established"

// BinRangedoubleTypeRangeTo represents the BinRangedoubleType `"range_to"`.
const BinRangedoubleTypeRangeTo BinRangedoubleType = "range_to"

// BinRangedoubleTypeRange represents the BinRangedoubleType `"range"`.
const BinRangedoubleTypeRange BinRangedoubleType = "range"

// BinRangedoubleTypeRangeFrom represents the BinRangedoubleType `"range_from"`.
const BinRangedoubleTypeRangeFrom BinRangedoubleType = "range_from"

// BinRangefloatTypeRangeTo represents the BinRangefloatType `"range_to"`.
const BinRangefloatTypeRangeTo BinRangefloatType = "range_to"

// BinRangefloatTypeRange represents the BinRangefloatType `"range"`.
const BinRangefloatTypeRange BinRangefloatType = "range"

// BinRangefloatTypeRangeFrom represents the BinRangefloatType `"range_from"`.
const BinRangefloatTypeRangeFrom BinRangefloatType = "range_from"

// BinRangeint16TypeRangeTo represents the BinRangeint16Type `"range_to"`.
const BinRangeint16TypeRangeTo BinRangeint16Type = "range_to"

// BinRangeint16TypeRange represents the BinRangeint16Type `"range"`.
const BinRangeint16TypeRange BinRangeint16Type = "range"

// BinRangeint16TypeRangeFrom represents the BinRangeint16Type `"range_from"`.
const BinRangeint16TypeRangeFrom BinRangeint16Type = "range_from"

// BinRangeint32TypeRangeTo represents the BinRangeint32Type `"range_to"`.
const BinRangeint32TypeRangeTo BinRangeint32Type = "range_to"

// BinRangeint32TypeRange represents the BinRangeint32Type `"range"`.
const BinRangeint32TypeRange BinRangeint32Type = "range"

// BinRangeint32TypeRangeFrom represents the BinRangeint32Type `"range_from"`.
const BinRangeint32TypeRangeFrom BinRangeint32Type = "range_from"

// BinRangeint64TypeRangeTo represents the BinRangeint64Type `"range_to"`.
const BinRangeint64TypeRangeTo BinRangeint64Type = "range_to"

// BinRangeint64TypeRange represents the BinRangeint64Type `"range"`.
const BinRangeint64TypeRange BinRangeint64Type = "range"

// BinRangeint64TypeRangeFrom represents the BinRangeint64Type `"range_from"`.
const BinRangeint64TypeRangeFrom BinRangeint64Type = "range_from"

// BinRangeint8TypeRangeTo represents the BinRangeint8Type `"range_to"`.
const BinRangeint8TypeRangeTo BinRangeint8Type = "range_to"

// BinRangeint8TypeRange represents the BinRangeint8Type `"range"`.
const BinRangeint8TypeRange BinRangeint8Type = "range"

// BinRangeint8TypeRangeFrom represents the BinRangeint8Type `"range_from"`.
const BinRangeint8TypeRangeFrom BinRangeint8Type = "range_from"

// BinRangeuint16TypeRangeTo represents the BinRangeuint16Type `"range_to"`.
const BinRangeuint16TypeRangeTo BinRangeuint16Type = "range_to"

// BinRangeuint16TypeRange represents the BinRangeuint16Type `"range"`.
const BinRangeuint16TypeRange BinRangeuint16Type = "range"

// BinRangeuint16TypeRangeFrom represents the BinRangeuint16Type `"range_from"`.
const BinRangeuint16TypeRangeFrom BinRangeuint16Type = "range_from"

// BinRangeuint32TypeRangeTo represents the BinRangeuint32Type `"range_to"`.
const BinRangeuint32TypeRangeTo BinRangeuint32Type = "range_to"

// BinRangeuint32TypeRange represents the BinRangeuint32Type `"range"`.
const BinRangeuint32TypeRange BinRangeuint32Type = "range"

// BinRangeuint32TypeRangeFrom represents the BinRangeuint32Type `"range_from"`.
const BinRangeuint32TypeRangeFrom BinRangeuint32Type = "range_from"

// BinRangeuint64TypeRangeTo represents the BinRangeuint64Type `"range_to"`.
const BinRangeuint64TypeRangeTo BinRangeuint64Type = "range_to"

// BinRangeuint64TypeRange represents the BinRangeuint64Type `"range"`.
const BinRangeuint64TypeRange BinRangeuint64Type = "range"

// BinRangeuint64TypeRangeFrom represents the BinRangeuint64Type `"range_from"`.
const BinRangeuint64TypeRangeFrom BinRangeuint64Type = "range_from"

// BinRangeuint8TypeRangeTo represents the BinRangeuint8Type `"range_to"`.
const BinRangeuint8TypeRangeTo BinRangeuint8Type = "range_to"

// BinRangeuint8TypeRange represents the BinRangeuint8Type `"range"`.
const BinRangeuint8TypeRange BinRangeuint8Type = "range"

// BinRangeuint8TypeRangeFrom represents the BinRangeuint8Type `"range_from"`.
const BinRangeuint8TypeRangeFrom BinRangeuint8Type = "range_from"

// DatumTypeBool represents the DatumType `"bool"`.
const DatumTypeBool DatumType = "bool"

// DatumTypeI8 represents the DatumType `"i8"`.
const DatumTypeI8 DatumType = "i8"

// DatumTypeU8 represents the DatumType `"u8"`.
const DatumTypeU8 DatumType = "u8"

// DatumTypeI16 represents the DatumType `"i16"`.
const DatumTypeI16 DatumType = "i16"

// DatumTypeU16 represents the DatumType `"u16"`.
const DatumTypeU16 DatumType = "u16"

// DatumTypeI32 represents the DatumType `"i32"`.
const DatumTypeI32 DatumType = "i32"

// DatumTypeU32 represents the DatumType `"u32"`.
const DatumTypeU32 DatumType = "u32"

// DatumTypeI64 represents the DatumType `"i64"`.
const DatumTypeI64 DatumType = "i64"

// DatumTypeU64 represents the DatumType `"u64"`.
const DatumTypeU64 DatumType = "u64"

// DatumTypeF32 represents the DatumType `"f32"`.
const DatumTypeF32 DatumType = "f32"

// DatumTypeF64 represents the DatumType `"f64"`.
const DatumTypeF64 DatumType = "f64"

// DatumTypeString represents the DatumType `"string"`.
const DatumTypeString DatumType = "string"

// DatumTypeBytes represents the DatumType `"bytes"`.
const DatumTypeBytes DatumType = "bytes"

// DatumTypeCumulativeI64 represents the DatumType `"cumulative_i64"`.
const DatumTypeCumulativeI64 DatumType = "cumulative_i64"

// DatumTypeCumulativeU64 represents the DatumType `"cumulative_u64"`.
const DatumTypeCumulativeU64 DatumType = "cumulative_u64"

// DatumTypeCumulativeF32 represents the DatumType `"cumulative_f32"`.
const DatumTypeCumulativeF32 DatumType = "cumulative_f32"

// DatumTypeCumulativeF64 represents the DatumType `"cumulative_f64"`.
const DatumTypeCumulativeF64 DatumType = "cumulative_f64"

// DatumTypeHistogramI8 represents the DatumType `"histogram_i8"`.
const DatumTypeHistogramI8 DatumType = "histogram_i8"

// DatumTypeHistogramU8 represents the DatumType `"histogram_u8"`.
const DatumTypeHistogramU8 DatumType = "histogram_u8"

// DatumTypeHistogramI16 represents the DatumType `"histogram_i16"`.
const DatumTypeHistogramI16 DatumType = "histogram_i16"

// DatumTypeHistogramU16 represents the DatumType `"histogram_u16"`.
const DatumTypeHistogramU16 DatumType = "histogram_u16"

// DatumTypeHistogramI32 represents the DatumType `"histogram_i32"`.
const DatumTypeHistogramI32 DatumType = "histogram_i32"

// DatumTypeHistogramU32 represents the DatumType `"histogram_u32"`.
const DatumTypeHistogramU32 DatumType = "histogram_u32"

// DatumTypeHistogramI64 represents the DatumType `"histogram_i64"`.
const DatumTypeHistogramI64 DatumType = "histogram_i64"

// DatumTypeHistogramU64 represents the DatumType `"histogram_u64"`.
const DatumTypeHistogramU64 DatumType = "histogram_u64"

// DatumTypeHistogramF32 represents the DatumType `"histogram_f32"`.
const DatumTypeHistogramF32 DatumType = "histogram_f32"

// DatumTypeHistogramF64 represents the DatumType `"histogram_f64"`.
const DatumTypeHistogramF64 DatumType = "histogram_f64"

// DatumTypeMissing represents the DatumType `"missing"`.
const DatumTypeMissing DatumType = "missing"

// DigestTypeSha256 represents the DigestType `"sha256"`.
const DigestTypeSha256 DigestType = "sha256"

// DiskMetricNameActivated represents the DiskMetricName `"activated"`.
const DiskMetricNameActivated DiskMetricName = "activated"

// DiskMetricNameFlush represents the DiskMetricName `"flush"`.
const DiskMetricNameFlush DiskMetricName = "flush"

// DiskMetricNameRead represents the DiskMetricName `"read"`.
const DiskMetricNameRead DiskMetricName = "read"

// DiskMetricNameReadBytes represents the DiskMetricName `"read_bytes"`.
const DiskMetricNameReadBytes DiskMetricName = "read_bytes"

// DiskMetricNameWrite represents the DiskMetricName `"write"`.
const DiskMetricNameWrite DiskMetricName = "write"

// DiskMetricNameWriteBytes represents the DiskMetricName `"write_bytes"`.
const DiskMetricNameWriteBytes DiskMetricName = "write_bytes"

// DiskSourceTypeBlank represents the DiskSourceType `"blank"`.
const DiskSourceTypeBlank DiskSourceType = "blank"

// DiskSourceTypeSnapshot represents the DiskSourceType `"snapshot"`.
const DiskSourceTypeSnapshot DiskSourceType = "snapshot"

// DiskSourceTypeImage represents the DiskSourceType `"image"`.
const DiskSourceTypeImage DiskSourceType = "image"

// DiskSourceTypeImportingBlocks represents the DiskSourceType `"importing_blocks"`.
const DiskSourceTypeImportingBlocks DiskSourceType = "importing_blocks"

// DiskStateStateCreating represents the DiskStateState `"creating"`.
const DiskStateStateCreating DiskStateState = "creating"

// DiskStateStateDetached represents the DiskStateState `"detached"`.
const DiskStateStateDetached DiskStateState = "detached"

// DiskStateStateImportReady represents the DiskStateState `"import_ready"`.
const DiskStateStateImportReady DiskStateState = "import_ready"

// DiskStateStateImportingFromUrl represents the DiskStateState `"importing_from_url"`.
const DiskStateStateImportingFromUrl DiskStateState = "importing_from_url"

// DiskStateStateImportingFromBulkWrites represents the DiskStateState `"importing_from_bulk_writes"`.
const DiskStateStateImportingFromBulkWrites DiskStateState = "importing_from_bulk_writes"

// DiskStateStateFinalizing represents the DiskStateState `"finalizing"`.
const DiskStateStateFinalizing DiskStateState = "finalizing"

// DiskStateStateMaintenance represents the DiskStateState `"maintenance"`.
const DiskStateStateMaintenance DiskStateState = "maintenance"

// DiskStateStateAttaching represents the DiskStateState `"attaching"`.
const DiskStateStateAttaching DiskStateState = "attaching"

// DiskStateStateAttached represents the DiskStateState `"attached"`.
const DiskStateStateAttached DiskStateState = "attached"

// DiskStateStateDetaching represents the DiskStateState `"detaching"`.
const DiskStateStateDetaching DiskStateState = "detaching"

// DiskStateStateDestroyed represents the DiskStateState `"destroyed"`.
const DiskStateStateDestroyed DiskStateState = "destroyed"

// DiskStateStateFaulted represents the DiskStateState `"faulted"`.
const DiskStateStateFaulted DiskStateState = "faulted"

// ExternalIpKindEphemeral represents the ExternalIpKind `"ephemeral"`.
const ExternalIpKindEphemeral ExternalIpKind = "ephemeral"

// ExternalIpKindFloating represents the ExternalIpKind `"floating"`.
const ExternalIpKindFloating ExternalIpKind = "floating"

// ExternalIpCreateTypeEphemeral represents the ExternalIpCreateType `"ephemeral"`.
const ExternalIpCreateTypeEphemeral ExternalIpCreateType = "ephemeral"

// ExternalIpCreateTypeFloating represents the ExternalIpCreateType `"floating"`.
const ExternalIpCreateTypeFloating ExternalIpCreateType = "floating"

// FleetRoleAdmin represents the FleetRole `"admin"`.
const FleetRoleAdmin FleetRole = "admin"

// FleetRoleCollaborator represents the FleetRole `"collaborator"`.
const FleetRoleCollaborator FleetRole = "collaborator"

// FleetRoleViewer represents the FleetRole `"viewer"`.
const FleetRoleViewer FleetRole = "viewer"

// FloatingIpParentKindInstance represents the FloatingIpParentKind `"instance"`.
const FloatingIpParentKindInstance FloatingIpParentKind = "instance"

// IdSortModeIdAscending represents the IdSortMode `"id_ascending"`.
const IdSortModeIdAscending IdSortMode = "id_ascending"

// IdentityProviderTypeSaml represents the IdentityProviderType `"saml"`.
const IdentityProviderTypeSaml IdentityProviderType = "saml"

// IdentityTypeSiloUser represents the IdentityType `"silo_user"`.
const IdentityTypeSiloUser IdentityType = "silo_user"

// IdentityTypeSiloGroup represents the IdentityType `"silo_group"`.
const IdentityTypeSiloGroup IdentityType = "silo_group"

// IdpMetadataSourceTypeUrl represents the IdpMetadataSourceType `"url"`.
const IdpMetadataSourceTypeUrl IdpMetadataSourceType = "url"

// IdpMetadataSourceTypeBase64EncodedXml represents the IdpMetadataSourceType `"base64_encoded_xml"`.
const IdpMetadataSourceTypeBase64EncodedXml IdpMetadataSourceType = "base64_encoded_xml"

// ImageSourceTypeSnapshot represents the ImageSourceType `"snapshot"`.
const ImageSourceTypeSnapshot ImageSourceType = "snapshot"

// ImageSourceTypeYouCanBootAnythingAsLongAsItsAlpine represents the ImageSourceType `"you_can_boot_anything_as_long_as_its_alpine"`.
const ImageSourceTypeYouCanBootAnythingAsLongAsItsAlpine ImageSourceType = "you_can_boot_anything_as_long_as_its_alpine"

// InstanceDiskAttachmentTypeCreate represents the InstanceDiskAttachmentType `"create"`.
const InstanceDiskAttachmentTypeCreate InstanceDiskAttachmentType = "create"

// InstanceDiskAttachmentTypeAttach represents the InstanceDiskAttachmentType `"attach"`.
const InstanceDiskAttachmentTypeAttach InstanceDiskAttachmentType = "attach"

// InstanceNetworkInterfaceAttachmentTypeCreate represents the InstanceNetworkInterfaceAttachmentType `"create"`.
const InstanceNetworkInterfaceAttachmentTypeCreate InstanceNetworkInterfaceAttachmentType = "create"

// InstanceNetworkInterfaceAttachmentTypeDefault represents the InstanceNetworkInterfaceAttachmentType `"default"`.
const InstanceNetworkInterfaceAttachmentTypeDefault InstanceNetworkInterfaceAttachmentType = "default"

// InstanceNetworkInterfaceAttachmentTypeNone represents the InstanceNetworkInterfaceAttachmentType `"none"`.
const InstanceNetworkInterfaceAttachmentTypeNone InstanceNetworkInterfaceAttachmentType = "none"

// InstanceStateCreating represents the InstanceState `"creating"`.
const InstanceStateCreating InstanceState = "creating"

// InstanceStateStarting represents the InstanceState `"starting"`.
const InstanceStateStarting InstanceState = "starting"

// InstanceStateRunning represents the InstanceState `"running"`.
const InstanceStateRunning InstanceState = "running"

// InstanceStateStopping represents the InstanceState `"stopping"`.
const InstanceStateStopping InstanceState = "stopping"

// InstanceStateStopped represents the InstanceState `"stopped"`.
const InstanceStateStopped InstanceState = "stopped"

// InstanceStateRebooting represents the InstanceState `"rebooting"`.
const InstanceStateRebooting InstanceState = "rebooting"

// InstanceStateMigrating represents the InstanceState `"migrating"`.
const InstanceStateMigrating InstanceState = "migrating"

// InstanceStateRepairing represents the InstanceState `"repairing"`.
const InstanceStateRepairing InstanceState = "repairing"

// InstanceStateFailed represents the InstanceState `"failed"`.
const InstanceStateFailed InstanceState = "failed"

// InstanceStateDestroyed represents the InstanceState `"destroyed"`.
const InstanceStateDestroyed InstanceState = "destroyed"

// LinkFecFirecode represents the LinkFec `"firecode"`.
const LinkFecFirecode LinkFec = "firecode"

// LinkFecNone represents the LinkFec `"none"`.
const LinkFecNone LinkFec = "none"

// LinkFecRs represents the LinkFec `"rs"`.
const LinkFecRs LinkFec = "rs"

// LinkSpeedSpeed0G represents the LinkSpeed `"speed0_g"`.
const LinkSpeedSpeed0G LinkSpeed = "speed0_g"

// LinkSpeedSpeed1G represents the LinkSpeed `"speed1_g"`.
const LinkSpeedSpeed1G LinkSpeed = "speed1_g"

// LinkSpeedSpeed10G represents the LinkSpeed `"speed10_g"`.
const LinkSpeedSpeed10G LinkSpeed = "speed10_g"

// LinkSpeedSpeed25G represents the LinkSpeed `"speed25_g"`.
const LinkSpeedSpeed25G LinkSpeed = "speed25_g"

// LinkSpeedSpeed40G represents the LinkSpeed `"speed40_g"`.
const LinkSpeedSpeed40G LinkSpeed = "speed40_g"

// LinkSpeedSpeed50G represents the LinkSpeed `"speed50_g"`.
const LinkSpeedSpeed50G LinkSpeed = "speed50_g"

// LinkSpeedSpeed100G represents the LinkSpeed `"speed100_g"`.
const LinkSpeedSpeed100G LinkSpeed = "speed100_g"

// LinkSpeedSpeed200G represents the LinkSpeed `"speed200_g"`.
const LinkSpeedSpeed200G LinkSpeed = "speed200_g"

// LinkSpeedSpeed400G represents the LinkSpeed `"speed400_g"`.
const LinkSpeedSpeed400G LinkSpeed = "speed400_g"

// NameOrIdSortModeNameAscending represents the NameOrIdSortMode `"name_ascending"`.
const NameOrIdSortModeNameAscending NameOrIdSortMode = "name_ascending"

// NameOrIdSortModeNameDescending represents the NameOrIdSortMode `"name_descending"`.
const NameOrIdSortModeNameDescending NameOrIdSortMode = "name_descending"

// NameOrIdSortModeIdAscending represents the NameOrIdSortMode `"id_ascending"`.
const NameOrIdSortModeIdAscending NameOrIdSortMode = "id_ascending"

// NameSortModeNameAscending represents the NameSortMode `"name_ascending"`.
const NameSortModeNameAscending NameSortMode = "name_ascending"

// PaginationOrderAscending represents the PaginationOrder `"ascending"`.
const PaginationOrderAscending PaginationOrder = "ascending"

// PaginationOrderDescending represents the PaginationOrder `"descending"`.
const PaginationOrderDescending PaginationOrder = "descending"

// PhysicalDiskKindM2 represents the PhysicalDiskKind `"m2"`.
const PhysicalDiskKindM2 PhysicalDiskKind = "m2"

// PhysicalDiskKindU2 represents the PhysicalDiskKind `"u2"`.
const PhysicalDiskKindU2 PhysicalDiskKind = "u2"

// PingStatusOk represents the PingStatus `"ok"`.
const PingStatusOk PingStatus = "ok"

// ProjectRoleAdmin represents the ProjectRole `"admin"`.
const ProjectRoleAdmin ProjectRole = "admin"

// ProjectRoleCollaborator represents the ProjectRole `"collaborator"`.
const ProjectRoleCollaborator ProjectRole = "collaborator"

// ProjectRoleViewer represents the ProjectRole `"viewer"`.
const ProjectRoleViewer ProjectRole = "viewer"

// ServiceUsingCertificateExternalApi represents the ServiceUsingCertificate `"external_api"`.
const ServiceUsingCertificateExternalApi ServiceUsingCertificate = "external_api"

// SiloIdentityModeSamlJit represents the SiloIdentityMode `"saml_jit"`.
const SiloIdentityModeSamlJit SiloIdentityMode = "saml_jit"

// SiloIdentityModeLocalOnly represents the SiloIdentityMode `"local_only"`.
const SiloIdentityModeLocalOnly SiloIdentityMode = "local_only"

// SiloRoleAdmin represents the SiloRole `"admin"`.
const SiloRoleAdmin SiloRole = "admin"

// SiloRoleCollaborator represents the SiloRole `"collaborator"`.
const SiloRoleCollaborator SiloRole = "collaborator"

// SiloRoleViewer represents the SiloRole `"viewer"`.
const SiloRoleViewer SiloRole = "viewer"

// SledProvisionStateProvisionable represents the SledProvisionState `"provisionable"`.
const SledProvisionStateProvisionable SledProvisionState = "provisionable"

// SledProvisionStateNonProvisionable represents the SledProvisionState `"non_provisionable"`.
const SledProvisionStateNonProvisionable SledProvisionState = "non_provisionable"

// SnapshotStateCreating represents the SnapshotState `"creating"`.
const SnapshotStateCreating SnapshotState = "creating"

// SnapshotStateReady represents the SnapshotState `"ready"`.
const SnapshotStateReady SnapshotState = "ready"

// SnapshotStateFaulted represents the SnapshotState `"faulted"`.
const SnapshotStateFaulted SnapshotState = "faulted"

// SnapshotStateDestroyed represents the SnapshotState `"destroyed"`.
const SnapshotStateDestroyed SnapshotState = "destroyed"

// SwitchInterfaceKindTypePrimary represents the SwitchInterfaceKindType `"primary"`.
const SwitchInterfaceKindTypePrimary SwitchInterfaceKindType = "primary"

// SwitchInterfaceKindTypeVlan represents the SwitchInterfaceKindType `"vlan"`.
const SwitchInterfaceKindTypeVlan SwitchInterfaceKindType = "vlan"

// SwitchInterfaceKindTypeLoopback represents the SwitchInterfaceKindType `"loopback"`.
const SwitchInterfaceKindTypeLoopback SwitchInterfaceKindType = "loopback"

// SwitchInterfaceKind2Primary represents the SwitchInterfaceKind2 `"primary"`.
const SwitchInterfaceKind2Primary SwitchInterfaceKind2 = "primary"

// SwitchInterfaceKind2Vlan represents the SwitchInterfaceKind2 `"vlan"`.
const SwitchInterfaceKind2Vlan SwitchInterfaceKind2 = "vlan"

// SwitchInterfaceKind2Loopback represents the SwitchInterfaceKind2 `"loopback"`.
const SwitchInterfaceKind2Loopback SwitchInterfaceKind2 = "loopback"

// SwitchLocationSwitch0 represents the SwitchLocation `"switch0"`.
const SwitchLocationSwitch0 SwitchLocation = "switch0"

// SwitchLocationSwitch1 represents the SwitchLocation `"switch1"`.
const SwitchLocationSwitch1 SwitchLocation = "switch1"

// SwitchPortGeometryQsfp28X1 represents the SwitchPortGeometry `"qsfp28x1"`.
const SwitchPortGeometryQsfp28X1 SwitchPortGeometry = "qsfp28x1"

// SwitchPortGeometryQsfp28X2 represents the SwitchPortGeometry `"qsfp28x2"`.
const SwitchPortGeometryQsfp28X2 SwitchPortGeometry = "qsfp28x2"

// SwitchPortGeometrySfp28X4 represents the SwitchPortGeometry `"sfp28x4"`.
const SwitchPortGeometrySfp28X4 SwitchPortGeometry = "sfp28x4"

// SwitchPortGeometry2Qsfp28X1 represents the SwitchPortGeometry2 `"qsfp28x1"`.
const SwitchPortGeometry2Qsfp28X1 SwitchPortGeometry2 = "qsfp28x1"

// SwitchPortGeometry2Qsfp28X2 represents the SwitchPortGeometry2 `"qsfp28x2"`.
const SwitchPortGeometry2Qsfp28X2 SwitchPortGeometry2 = "qsfp28x2"

// SwitchPortGeometry2Sfp28X4 represents the SwitchPortGeometry2 `"sfp28x4"`.
const SwitchPortGeometry2Sfp28X4 SwitchPortGeometry2 = "sfp28x4"

// SystemMetricNameVirtualDiskSpaceProvisioned represents the SystemMetricName `"virtual_disk_space_provisioned"`.
const SystemMetricNameVirtualDiskSpaceProvisioned SystemMetricName = "virtual_disk_space_provisioned"

// SystemMetricNameCpusProvisioned represents the SystemMetricName `"cpus_provisioned"`.
const SystemMetricNameCpusProvisioned SystemMetricName = "cpus_provisioned"

// SystemMetricNameRamProvisioned represents the SystemMetricName `"ram_provisioned"`.
const SystemMetricNameRamProvisioned SystemMetricName = "ram_provisioned"

// UserPasswordModePassword represents the UserPasswordMode `"password"`.
const UserPasswordModePassword UserPasswordMode = "password"

// UserPasswordModeLoginDisallowed represents the UserPasswordMode `"login_disallowed"`.
const UserPasswordModeLoginDisallowed UserPasswordMode = "login_disallowed"

// VpcFirewallRuleActionAllow represents the VpcFirewallRuleAction `"allow"`.
const VpcFirewallRuleActionAllow VpcFirewallRuleAction = "allow"

// VpcFirewallRuleActionDeny represents the VpcFirewallRuleAction `"deny"`.
const VpcFirewallRuleActionDeny VpcFirewallRuleAction = "deny"

// VpcFirewallRuleDirectionInbound represents the VpcFirewallRuleDirection `"inbound"`.
const VpcFirewallRuleDirectionInbound VpcFirewallRuleDirection = "inbound"

// VpcFirewallRuleDirectionOutbound represents the VpcFirewallRuleDirection `"outbound"`.
const VpcFirewallRuleDirectionOutbound VpcFirewallRuleDirection = "outbound"

// VpcFirewallRuleHostFilterTypeVpc represents the VpcFirewallRuleHostFilterType `"vpc"`.
const VpcFirewallRuleHostFilterTypeVpc VpcFirewallRuleHostFilterType = "vpc"

// VpcFirewallRuleHostFilterTypeSubnet represents the VpcFirewallRuleHostFilterType `"subnet"`.
const VpcFirewallRuleHostFilterTypeSubnet VpcFirewallRuleHostFilterType = "subnet"

// VpcFirewallRuleHostFilterTypeInstance represents the VpcFirewallRuleHostFilterType `"instance"`.
const VpcFirewallRuleHostFilterTypeInstance VpcFirewallRuleHostFilterType = "instance"

// VpcFirewallRuleHostFilterTypeIp represents the VpcFirewallRuleHostFilterType `"ip"`.
const VpcFirewallRuleHostFilterTypeIp VpcFirewallRuleHostFilterType = "ip"

// VpcFirewallRuleHostFilterTypeIpNet represents the VpcFirewallRuleHostFilterType `"ip_net"`.
const VpcFirewallRuleHostFilterTypeIpNet VpcFirewallRuleHostFilterType = "ip_net"

// VpcFirewallRuleProtocolTcp represents the VpcFirewallRuleProtocol `"TCP"`.
const VpcFirewallRuleProtocolTcp VpcFirewallRuleProtocol = "TCP"

// VpcFirewallRuleProtocolUdp represents the VpcFirewallRuleProtocol `"UDP"`.
const VpcFirewallRuleProtocolUdp VpcFirewallRuleProtocol = "UDP"

// VpcFirewallRuleProtocolIcmp represents the VpcFirewallRuleProtocol `"ICMP"`.
const VpcFirewallRuleProtocolIcmp VpcFirewallRuleProtocol = "ICMP"

// VpcFirewallRuleStatusDisabled represents the VpcFirewallRuleStatus `"disabled"`.
const VpcFirewallRuleStatusDisabled VpcFirewallRuleStatus = "disabled"

// VpcFirewallRuleStatusEnabled represents the VpcFirewallRuleStatus `"enabled"`.
const VpcFirewallRuleStatusEnabled VpcFirewallRuleStatus = "enabled"

// VpcFirewallRuleTargetTypeVpc represents the VpcFirewallRuleTargetType `"vpc"`.
const VpcFirewallRuleTargetTypeVpc VpcFirewallRuleTargetType = "vpc"

// VpcFirewallRuleTargetTypeSubnet represents the VpcFirewallRuleTargetType `"subnet"`.
const VpcFirewallRuleTargetTypeSubnet VpcFirewallRuleTargetType = "subnet"

// VpcFirewallRuleTargetTypeInstance represents the VpcFirewallRuleTargetType `"instance"`.
const VpcFirewallRuleTargetTypeInstance VpcFirewallRuleTargetType = "instance"

// VpcFirewallRuleTargetTypeIp represents the VpcFirewallRuleTargetType `"ip"`.
const VpcFirewallRuleTargetTypeIp VpcFirewallRuleTargetType = "ip"

// VpcFirewallRuleTargetTypeIpNet represents the VpcFirewallRuleTargetType `"ip_net"`.
const VpcFirewallRuleTargetTypeIpNet VpcFirewallRuleTargetType = "ip_net"

// AddressLotKinds is the collection of all AddressLotKind values.
var AddressLotKinds = []AddressLotKind{
	AddressLotKindInfra,
	AddressLotKindPool,
}

// BfdModes is the collection of all BfdMode values.
var BfdModes = []BfdMode{
	BfdModeMultiHop,
	BfdModeSingleHop,
}

// BfdStates is the collection of all BfdState values.
var BfdStates = []BfdState{
	BfdStateAdminDown,
	BfdStateDown,
	BfdStateInit,
	BfdStateUp,
}

// BgpPeerStates is the collection of all BgpPeerState values.
var BgpPeerStates = []BgpPeerState{
	BgpPeerStateActive,
	BgpPeerStateConnect,
	BgpPeerStateEstablished,
	BgpPeerStateIdle,
	BgpPeerStateOpenConfirm,
	BgpPeerStateOpenSent,
	BgpPeerStateSessionSetup,
}

// BinRangedoubleTypes is the collection of all BinRangedoubleType values.
var BinRangedoubleTypes = []BinRangedoubleType{
	BinRangedoubleTypeRange,
	BinRangedoubleTypeRangeFrom,
	BinRangedoubleTypeRangeTo,
}

// BinRangefloatTypes is the collection of all BinRangefloatType values.
var BinRangefloatTypes = []BinRangefloatType{
	BinRangefloatTypeRange,
	BinRangefloatTypeRangeFrom,
	BinRangefloatTypeRangeTo,
}

// BinRangeint16Types is the collection of all BinRangeint16Type values.
var BinRangeint16Types = []BinRangeint16Type{
	BinRangeint16TypeRange,
	BinRangeint16TypeRangeFrom,
	BinRangeint16TypeRangeTo,
}

// BinRangeint32Types is the collection of all BinRangeint32Type values.
var BinRangeint32Types = []BinRangeint32Type{
	BinRangeint32TypeRange,
	BinRangeint32TypeRangeFrom,
	BinRangeint32TypeRangeTo,
}

// BinRangeint64Types is the collection of all BinRangeint64Type values.
var BinRangeint64Types = []BinRangeint64Type{
	BinRangeint64TypeRange,
	BinRangeint64TypeRangeFrom,
	BinRangeint64TypeRangeTo,
}

// BinRangeint8Types is the collection of all BinRangeint8Type values.
var BinRangeint8Types = []BinRangeint8Type{
	BinRangeint8TypeRange,
	BinRangeint8TypeRangeFrom,
	BinRangeint8TypeRangeTo,
}

// BinRangeuint16Types is the collection of all BinRangeuint16Type values.
var BinRangeuint16Types = []BinRangeuint16Type{
	BinRangeuint16TypeRange,
	BinRangeuint16TypeRangeFrom,
	BinRangeuint16TypeRangeTo,
}

// BinRangeuint32Types is the collection of all BinRangeuint32Type values.
var BinRangeuint32Types = []BinRangeuint32Type{
	BinRangeuint32TypeRange,
	BinRangeuint32TypeRangeFrom,
	BinRangeuint32TypeRangeTo,
}

// BinRangeuint64Types is the collection of all BinRangeuint64Type values.
var BinRangeuint64Types = []BinRangeuint64Type{
	BinRangeuint64TypeRange,
	BinRangeuint64TypeRangeFrom,
	BinRangeuint64TypeRangeTo,
}

// BinRangeuint8Types is the collection of all BinRangeuint8Type values.
var BinRangeuint8Types = []BinRangeuint8Type{
	BinRangeuint8TypeRange,
	BinRangeuint8TypeRangeFrom,
	BinRangeuint8TypeRangeTo,
}

// DatumTypes is the collection of all DatumType values.
var DatumTypes = []DatumType{
	DatumTypeBool,
	DatumTypeBytes,
	DatumTypeCumulativeF32,
	DatumTypeCumulativeF64,
	DatumTypeCumulativeI64,
	DatumTypeCumulativeU64,
	DatumTypeF32,
	DatumTypeF64,
	DatumTypeHistogramF32,
	DatumTypeHistogramF64,
	DatumTypeHistogramI16,
	DatumTypeHistogramI32,
	DatumTypeHistogramI64,
	DatumTypeHistogramI8,
	DatumTypeHistogramU16,
	DatumTypeHistogramU32,
	DatumTypeHistogramU64,
	DatumTypeHistogramU8,
	DatumTypeI16,
	DatumTypeI32,
	DatumTypeI64,
	DatumTypeI8,
	DatumTypeMissing,
	DatumTypeString,
	DatumTypeU16,
	DatumTypeU32,
	DatumTypeU64,
	DatumTypeU8,
}

// DigestTypes is the collection of all DigestType values.
var DigestTypes = []DigestType{
	DigestTypeSha256,
}

// DiskMetricNames is the collection of all DiskMetricName values.
var DiskMetricNames = []DiskMetricName{
	DiskMetricNameActivated,
	DiskMetricNameFlush,
	DiskMetricNameRead,
	DiskMetricNameReadBytes,
	DiskMetricNameWrite,
	DiskMetricNameWriteBytes,
}

// DiskSourceTypes is the collection of all DiskSourceType values.
var DiskSourceTypes = []DiskSourceType{
	DiskSourceTypeBlank,
	DiskSourceTypeImage,
	DiskSourceTypeImportingBlocks,
	DiskSourceTypeSnapshot,
}

// DiskStateStates is the collection of all DiskStateState values.
var DiskStateStates = []DiskStateState{
	DiskStateStateAttached,
	DiskStateStateAttaching,
	DiskStateStateCreating,
	DiskStateStateDestroyed,
	DiskStateStateDetached,
	DiskStateStateDetaching,
	DiskStateStateFaulted,
	DiskStateStateFinalizing,
	DiskStateStateImportReady,
	DiskStateStateImportingFromBulkWrites,
	DiskStateStateImportingFromUrl,
	DiskStateStateMaintenance,
}

// ExternalIpCreateTypes is the collection of all ExternalIpCreateType values.
var ExternalIpCreateTypes = []ExternalIpCreateType{
	ExternalIpCreateTypeEphemeral,
	ExternalIpCreateTypeFloating,
}

// ExternalIpKinds is the collection of all ExternalIpKind values.
var ExternalIpKinds = []ExternalIpKind{
	ExternalIpKindEphemeral,
	ExternalIpKindFloating,
}

// FleetRoles is the collection of all FleetRole values.
var FleetRoles = []FleetRole{
	FleetRoleAdmin,
	FleetRoleCollaborator,
	FleetRoleViewer,
}

// FloatingIpParentKinds is the collection of all FloatingIpParentKind values.
var FloatingIpParentKinds = []FloatingIpParentKind{
	FloatingIpParentKindInstance,
}

// IdSortModes is the collection of all IdSortMode values.
var IdSortModes = []IdSortMode{
	IdSortModeIdAscending,
}

// IdentityProviderTypes is the collection of all IdentityProviderType values.
var IdentityProviderTypes = []IdentityProviderType{
	IdentityProviderTypeSaml,
}

// IdentityTypes is the collection of all IdentityType values.
var IdentityTypes = []IdentityType{
	IdentityTypeSiloGroup,
	IdentityTypeSiloUser,
}

// IdpMetadataSourceTypes is the collection of all IdpMetadataSourceType values.
var IdpMetadataSourceTypes = []IdpMetadataSourceType{
	IdpMetadataSourceTypeBase64EncodedXml,
	IdpMetadataSourceTypeUrl,
}

// ImageSourceTypes is the collection of all ImageSourceType values.
var ImageSourceTypes = []ImageSourceType{
	ImageSourceTypeSnapshot,
	ImageSourceTypeYouCanBootAnythingAsLongAsItsAlpine,
}

// InstanceDiskAttachmentTypes is the collection of all InstanceDiskAttachmentType values.
var InstanceDiskAttachmentTypes = []InstanceDiskAttachmentType{
	InstanceDiskAttachmentTypeAttach,
	InstanceDiskAttachmentTypeCreate,
}

// InstanceNetworkInterfaceAttachmentTypes is the collection of all InstanceNetworkInterfaceAttachmentType values.
var InstanceNetworkInterfaceAttachmentTypes = []InstanceNetworkInterfaceAttachmentType{
	InstanceNetworkInterfaceAttachmentTypeCreate,
	InstanceNetworkInterfaceAttachmentTypeDefault,
	InstanceNetworkInterfaceAttachmentTypeNone,
}

// InstanceStates is the collection of all InstanceState values.
var InstanceStates = []InstanceState{
	InstanceStateCreating,
	InstanceStateDestroyed,
	InstanceStateFailed,
	InstanceStateMigrating,
	InstanceStateRebooting,
	InstanceStateRepairing,
	InstanceStateRunning,
	InstanceStateStarting,
	InstanceStateStopped,
	InstanceStateStopping,
}

// LinkFecs is the collection of all LinkFec values.
var LinkFecs = []LinkFec{
	LinkFecFirecode,
	LinkFecNone,
	LinkFecRs,
}

// LinkSpeeds is the collection of all LinkSpeed values.
var LinkSpeeds = []LinkSpeed{
	LinkSpeedSpeed0G,
	LinkSpeedSpeed100G,
	LinkSpeedSpeed10G,
	LinkSpeedSpeed1G,
	LinkSpeedSpeed200G,
	LinkSpeedSpeed25G,
	LinkSpeedSpeed400G,
	LinkSpeedSpeed40G,
	LinkSpeedSpeed50G,
}

// NameOrIdSortModes is the collection of all NameOrIdSortMode values.
var NameOrIdSortModes = []NameOrIdSortMode{
	NameOrIdSortModeIdAscending,
	NameOrIdSortModeNameAscending,
	NameOrIdSortModeNameDescending,
}

// NameSortModes is the collection of all NameSortMode values.
var NameSortModes = []NameSortMode{
	NameSortModeNameAscending,
}

// PaginationOrders is the collection of all PaginationOrder values.
var PaginationOrders = []PaginationOrder{
	PaginationOrderAscending,
	PaginationOrderDescending,
}

// PhysicalDiskKinds is the collection of all PhysicalDiskKind values.
var PhysicalDiskKinds = []PhysicalDiskKind{
	PhysicalDiskKindM2,
	PhysicalDiskKindU2,
}

// PingStatuses is the collection of all PingStatus values.
var PingStatuses = []PingStatus{
	PingStatusOk,
}

// ProjectRoles is the collection of all ProjectRole values.
var ProjectRoles = []ProjectRole{
	ProjectRoleAdmin,
	ProjectRoleCollaborator,
	ProjectRoleViewer,
}

// ServiceUsingCertificates is the collection of all ServiceUsingCertificate values.
var ServiceUsingCertificates = []ServiceUsingCertificate{
	ServiceUsingCertificateExternalApi,
}

// SiloIdentityModes is the collection of all SiloIdentityMode values.
var SiloIdentityModes = []SiloIdentityMode{
	SiloIdentityModeLocalOnly,
	SiloIdentityModeSamlJit,
}

// SiloRoles is the collection of all SiloRole values.
var SiloRoles = []SiloRole{
	SiloRoleAdmin,
	SiloRoleCollaborator,
	SiloRoleViewer,
}

// SledProvisionStates is the collection of all SledProvisionState values.
var SledProvisionStates = []SledProvisionState{
	SledProvisionStateNonProvisionable,
	SledProvisionStateProvisionable,
}

// SnapshotStates is the collection of all SnapshotState values.
var SnapshotStates = []SnapshotState{
	SnapshotStateCreating,
	SnapshotStateDestroyed,
	SnapshotStateFaulted,
	SnapshotStateReady,
}

// SwitchInterfaceKind2s is the collection of all SwitchInterfaceKind2 values.
var SwitchInterfaceKind2s = []SwitchInterfaceKind2{
	SwitchInterfaceKind2Loopback,
	SwitchInterfaceKind2Primary,
	SwitchInterfaceKind2Vlan,
}

// SwitchInterfaceKindTypes is the collection of all SwitchInterfaceKindType values.
var SwitchInterfaceKindTypes = []SwitchInterfaceKindType{
	SwitchInterfaceKindTypeLoopback,
	SwitchInterfaceKindTypePrimary,
	SwitchInterfaceKindTypeVlan,
}

// SwitchLocations is the collection of all SwitchLocation values.
var SwitchLocations = []SwitchLocation{
	SwitchLocationSwitch0,
	SwitchLocationSwitch1,
}

// SwitchPortGeometrys is the collection of all SwitchPortGeometry values.
var SwitchPortGeometrys = []SwitchPortGeometry{
	SwitchPortGeometryQsfp28X1,
	SwitchPortGeometryQsfp28X2,
	SwitchPortGeometrySfp28X4,
}

// SwitchPortGeometry2s is the collection of all SwitchPortGeometry2 values.
var SwitchPortGeometry2s = []SwitchPortGeometry2{
	SwitchPortGeometry2Qsfp28X1,
	SwitchPortGeometry2Qsfp28X2,
	SwitchPortGeometry2Sfp28X4,
}

// SystemMetricNames is the collection of all SystemMetricName values.
var SystemMetricNames = []SystemMetricName{
	SystemMetricNameCpusProvisioned,
	SystemMetricNameRamProvisioned,
	SystemMetricNameVirtualDiskSpaceProvisioned,
}

// UserPasswordModes is the collection of all UserPasswordMode values.
var UserPasswordModes = []UserPasswordMode{
	UserPasswordModeLoginDisallowed,
	UserPasswordModePassword,
}

// VpcFirewallRuleActions is the collection of all VpcFirewallRuleAction values.
var VpcFirewallRuleActions = []VpcFirewallRuleAction{
	VpcFirewallRuleActionAllow,
	VpcFirewallRuleActionDeny,
}

// VpcFirewallRuleDirections is the collection of all VpcFirewallRuleDirection values.
var VpcFirewallRuleDirections = []VpcFirewallRuleDirection{
	VpcFirewallRuleDirectionInbound,
	VpcFirewallRuleDirectionOutbound,
}

// VpcFirewallRuleHostFilterTypes is the collection of all VpcFirewallRuleHostFilterType values.
var VpcFirewallRuleHostFilterTypes = []VpcFirewallRuleHostFilterType{
	VpcFirewallRuleHostFilterTypeInstance,
	VpcFirewallRuleHostFilterTypeIp,
	VpcFirewallRuleHostFilterTypeIpNet,
	VpcFirewallRuleHostFilterTypeSubnet,
	VpcFirewallRuleHostFilterTypeVpc,
}

// VpcFirewallRuleProtocols is the collection of all VpcFirewallRuleProtocol values.
var VpcFirewallRuleProtocols = []VpcFirewallRuleProtocol{
	VpcFirewallRuleProtocolIcmp,
	VpcFirewallRuleProtocolTcp,
	VpcFirewallRuleProtocolUdp,
}

// VpcFirewallRuleStatuses is the collection of all VpcFirewallRuleStatus values.
var VpcFirewallRuleStatuses = []VpcFirewallRuleStatus{
	VpcFirewallRuleStatusDisabled,
	VpcFirewallRuleStatusEnabled,
}

// VpcFirewallRuleTargetTypes is the collection of all VpcFirewallRuleTargetType values.
var VpcFirewallRuleTargetTypes = []VpcFirewallRuleTargetType{
	VpcFirewallRuleTargetTypeInstance,
	VpcFirewallRuleTargetTypeIp,
	VpcFirewallRuleTargetTypeIpNet,
	VpcFirewallRuleTargetTypeSubnet,
	VpcFirewallRuleTargetTypeVpc,
}
