// Code generated by `generate`. DO NOT EDIT.

package oxide

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"strconv"
	"time"
)

// LoginLocal: Authenticate a user (i.e., log in) via username and password
//
// Parameters
// - `siloName`
func (c *Client) LoginLocal(siloName Name, j *UsernamePasswordCredentials) error {
	// Create the url.
	path := "/login/{{.silo_name}}/local"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"silo_name": string(siloName),
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// LoginSamlBegin: Prompt user login
// Either display a page asking a user for their credentials, or redirect them to their identity provider.
//
// Parameters
// - `providerName`
// - `siloName`
func (c *Client) LoginSamlBegin(providerName Name, siloName Name) error {
	// Create the url.
	path := "/login/{{.silo_name}}/saml/{{.provider_name}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"provider_name": string(providerName),
		"silo_name":     string(siloName),
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// LoginSaml: Authenticate a user (i.e., log in) via SAML
//
// Parameters
// - `providerName`
// - `siloName`
func (c *Client) LoginSaml(providerName Name, siloName Name, b io.Reader) error {
	// Create the url.
	path := "/login/{{.silo_name}}/saml/{{.provider_name}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"provider_name": string(providerName),
		"silo_name":     string(siloName),
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// SystemImageViewById: Fetch a system-wide image by id
//
// Parameters
// - `id`
func (c *Client) SystemImageViewById(id string) (*GlobalImage, error) {
	// Create the url.
	path := "/system/by-id/images/{{.id}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"id": id,
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body GlobalImage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SiloViewById: Fetch a silo by id
// Use `GET /v1/system/silos/{id}` instead.
//
// Parameters
// - `id`
func (c *Client) SiloViewById(id string) (*Silo, error) {
	// Create the url.
	path := "/system/by-id/silos/{{.id}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"id": id,
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Silo
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// PhysicalDiskList: List physical disks
// Use `GET /v1/system/hardware/disks` instead
//
// To iterate over all pages, use the `PhysicalDiskListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sortBy`
func (c *Client) PhysicalDiskList(limit int, pageToken string, sortBy IdSortMode) (*PhysicalDiskResultsPage, error) {
	// Create the url.
	path := "/system/hardware/disks"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body PhysicalDiskResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// PhysicalDiskListAllPages: List physical disks
// Use `GET /v1/system/hardware/disks` instead
//
// This method is a wrapper around the `PhysicalDiskList` method.
// This method returns all the pages at once.
//
// Parameters
// - `sortBy`
func (c *Client) PhysicalDiskListAllPages(sortBy IdSortMode) (*[]PhysicalDisk, error) {
	var allPages []PhysicalDisk
	pageToken := ""
	limit := 100
	for {
		page, err := c.PhysicalDiskList(limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// RackList: List racks
// Use `GET /v1/system/hardware/racks` instead
//
// To iterate over all pages, use the `RackListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sortBy`
func (c *Client) RackList(limit int, pageToken string, sortBy IdSortMode) (*RackResultsPage, error) {
	// Create the url.
	path := "/system/hardware/racks"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body RackResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// RackListAllPages: List racks
// Use `GET /v1/system/hardware/racks` instead
//
// This method is a wrapper around the `RackList` method.
// This method returns all the pages at once.
//
// Parameters
// - `sortBy`
func (c *Client) RackListAllPages(sortBy IdSortMode) (*[]Rack, error) {
	var allPages []Rack
	pageToken := ""
	limit := 100
	for {
		page, err := c.RackList(limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// RackView: Fetch a rack
// Use `GET /v1/system/hardware/racks/{rack_id}` instead
//
// Parameters
// - `rackId` The rack's unique ID.
func (c *Client) RackView(rackId string) (*Rack, error) {
	// Create the url.
	path := "/system/hardware/racks/{{.rack_id}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"rack_id": rackId,
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Rack
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SledList: List sleds
// Use `GET /v1/system/hardware/sleds instead`
//
// To iterate over all pages, use the `SledListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sortBy`
func (c *Client) SledList(limit int, pageToken string, sortBy IdSortMode) (*SledResultsPage, error) {
	// Create the url.
	path := "/system/hardware/sleds"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body SledResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SledListAllPages: List sleds
// Use `GET /v1/system/hardware/sleds instead`
//
// This method is a wrapper around the `SledList` method.
// This method returns all the pages at once.
//
// Parameters
// - `sortBy`
func (c *Client) SledListAllPages(sortBy IdSortMode) (*[]Sled, error) {
	var allPages []Sled
	pageToken := ""
	limit := 100
	for {
		page, err := c.SledList(limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// SledView: Fetch a sled
// Use `GET /v1/system/hardware/sleds/{sled_id}` instead
//
// Parameters
// - `sledId` The sled's unique ID.
func (c *Client) SledView(sledId string) (*Sled, error) {
	// Create the url.
	path := "/system/hardware/sleds/{{.sled_id}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"sled_id": sledId,
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Sled
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SledPhysicalDiskList: List physical disks attached to sleds
// Use `GET /v1/system/hardware/sleds/{sled_id}/disks` instead
//
// To iterate over all pages, use the `SledPhysicalDiskListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sledId` The sled's unique ID.
// - `sortBy`
func (c *Client) SledPhysicalDiskList(sledId string, limit int, pageToken string, sortBy IdSortMode) (*PhysicalDiskResultsPage, error) {
	// Create the url.
	path := "/system/hardware/sleds/{{.sled_id}}/disks"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"sled_id": sledId,
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body PhysicalDiskResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SledPhysicalDiskListAllPages: List physical disks attached to sleds
// Use `GET /v1/system/hardware/sleds/{sled_id}/disks` instead
//
// This method is a wrapper around the `SledPhysicalDiskList` method.
// This method returns all the pages at once.
//
// Parameters
// - `sledId` The sled's unique ID.
// - `sortBy`
func (c *Client) SledPhysicalDiskListAllPages(sledId string, sortBy IdSortMode) (*[]PhysicalDisk, error) {
	var allPages []PhysicalDisk
	pageToken := ""
	limit := 100
	for {
		page, err := c.SledPhysicalDiskList(sledId, limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// SystemImageList: List system-wide images
// Returns a list of all the system-wide images. System-wide images are returned sorted by creation date, with the most recent images appearing first.
//
// To iterate over all pages, use the `SystemImageListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sortBy`
func (c *Client) SystemImageList(limit int, pageToken string, sortBy NameSortMode) (*GlobalImageResultsPage, error) {
	// Create the url.
	path := "/system/images"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body GlobalImageResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SystemImageListAllPages: List system-wide images
// Returns a list of all the system-wide images. System-wide images are returned sorted by creation date, with the most recent images appearing first.
//
// This method is a wrapper around the `SystemImageList` method.
// This method returns all the pages at once.
//
// Parameters
// - `sortBy`
func (c *Client) SystemImageListAllPages(sortBy NameSortMode) (*[]GlobalImage, error) {
	var allPages []GlobalImage
	pageToken := ""
	limit := 100
	for {
		page, err := c.SystemImageList(limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// SystemImageCreate: Create a system-wide image
// Create a new system-wide image. This image can then be used by any user in any silo as a base for instances.
func (c *Client) SystemImageCreate(j *GlobalImageCreate) (*GlobalImage, error) {
	// Create the url.
	path := "/system/images"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body GlobalImage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SystemImageView: Fetch a system-wide image
// Returns the details of a specific system-wide image.
//
// Parameters
// - `imageName`
func (c *Client) SystemImageView(imageName Name) (*GlobalImage, error) {
	// Create the url.
	path := "/system/images/{{.image_name}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"image_name": string(imageName),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body GlobalImage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SystemImageDelete: Delete a system-wide image
// Permanently delete a system-wide image. This operation cannot be undone. Any instances using the system-wide image will continue to run, however new instances can not be created with this image.
//
// Parameters
// - `imageName`
func (c *Client) SystemImageDelete(imageName Name) error {
	// Create the url.
	path := "/system/images/{{.image_name}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("DELETE", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"image_name": string(imageName),
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// SagaList: List sagas
// Use `GET v1/system/sagas` instead
//
// To iterate over all pages, use the `SagaListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sortBy`
func (c *Client) SagaList(limit int, pageToken string, sortBy IdSortMode) (*SagaResultsPage, error) {
	// Create the url.
	path := "/system/sagas"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body SagaResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SagaListAllPages: List sagas
// Use `GET v1/system/sagas` instead
//
// This method is a wrapper around the `SagaList` method.
// This method returns all the pages at once.
//
// Parameters
// - `sortBy`
func (c *Client) SagaListAllPages(sortBy IdSortMode) (*[]Saga, error) {
	var allPages []Saga
	pageToken := ""
	limit := 100
	for {
		page, err := c.SagaList(limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// SagaView: Fetch a saga
// Use `GET v1/system/sagas/{saga_id}` instead
//
// Parameters
// - `sagaId`
func (c *Client) SagaView(sagaId string) (*Saga, error) {
	// Create the url.
	path := "/system/sagas/{{.saga_id}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"saga_id": sagaId,
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Saga
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SiloList: List silos
// Lists silos that are discoverable based on the current permissions. Use `GET /v1/system/silos` instead
//
// To iterate over all pages, use the `SiloListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sortBy`
func (c *Client) SiloList(limit int, pageToken string, sortBy NameOrIdSortMode) (*SiloResultsPage, error) {
	// Create the url.
	path := "/system/silos"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body SiloResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SiloListAllPages: List silos
// Lists silos that are discoverable based on the current permissions. Use `GET /v1/system/silos` instead
//
// This method is a wrapper around the `SiloList` method.
// This method returns all the pages at once.
//
// Parameters
// - `sortBy`
func (c *Client) SiloListAllPages(sortBy NameOrIdSortMode) (*[]Silo, error) {
	var allPages []Silo
	pageToken := ""
	limit := 100
	for {
		page, err := c.SiloList(limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// SiloCreate: Create a silo
// Use `POST /v1/system/silos` instead
func (c *Client) SiloCreate(j *SiloCreate) (*Silo, error) {
	// Create the url.
	path := "/system/silos"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Silo
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SiloView: Fetch a silo
// Fetch a silo by name. Use `GET /v1/system/silos/{silo}` instead.
//
// Parameters
// - `siloName` The silo's unique name.
func (c *Client) SiloView(siloName Name) (*Silo, error) {
	// Create the url.
	path := "/system/silos/{{.silo_name}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"silo_name": string(siloName),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Silo
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SiloDelete: Delete a silo
// Delete a silo by name. Use `DELETE /v1/system/silos/{silo}` instead.
//
// Parameters
// - `siloName` The silo's unique name.
func (c *Client) SiloDelete(siloName Name) error {
	// Create the url.
	path := "/system/silos/{{.silo_name}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("DELETE", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"silo_name": string(siloName),
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// SiloPolicyView: Fetch a silo's IAM policy
// Use `GET /v1/system/silos/{silo}/policy` instead.
//
// Parameters
// - `siloName` The silo's unique name.
func (c *Client) SiloPolicyView(siloName Name) (*SiloRolePolicy, error) {
	// Create the url.
	path := "/system/silos/{{.silo_name}}/policy"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"silo_name": string(siloName),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body SiloRolePolicy
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SiloPolicyUpdate: Update a silo's IAM policy
// Use `PUT /v1/system/silos/{silo}/policy` instead
//
// Parameters
// - `siloName` The silo's unique name.
func (c *Client) SiloPolicyUpdate(siloName Name, j *SiloRolePolicy) (*SiloRolePolicy, error) {
	// Create the url.
	path := "/system/silos/{{.silo_name}}/policy"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("PUT", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"silo_name": string(siloName),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body SiloRolePolicy
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// DiskList: List disks
//
// To iterate over all pages, use the `DiskListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `project`
// - `sortBy`
func (c *Client) DiskList(limit int, pageToken string, project NameOrId, sortBy NameOrIdSortMode) (*DiskResultsPage, error) {
	// Create the url.
	path := "/v1/disks"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"project":    project.(string),
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body DiskResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// DiskListAllPages: List disks
//
// This method is a wrapper around the `DiskList` method.
// This method returns all the pages at once.
//
// Parameters
// - `project`
// - `sortBy`
func (c *Client) DiskListAllPages(project NameOrId, sortBy NameOrIdSortMode) (*[]Disk, error) {
	var allPages []Disk
	pageToken := ""
	limit := 100
	for {
		page, err := c.DiskList(limit, pageToken, project, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// DiskCreate: Create a disk
//
// Parameters
// - `project`
func (c *Client) DiskCreate(project NameOrId, j *DiskCreate) (*Disk, error) {
	// Create the url.
	path := "/v1/disks"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Disk
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// DiskView: Fetch a disk
//
// Parameters
// - `disk`
// - `project`
func (c *Client) DiskView(disk NameOrId, project NameOrId) (*Disk, error) {
	// Create the url.
	path := "/v1/disks/{{.disk}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"disk": disk.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Disk
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// DiskDelete: Delete a disk
//
// Parameters
// - `disk`
// - `project`
func (c *Client) DiskDelete(disk NameOrId, project NameOrId) error {
	// Create the url.
	path := "/v1/disks/{{.disk}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("DELETE", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"disk": disk.(string),
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// DiskMetricsList: Fetch disk metrics
//
// To iterate over all pages, use the `DiskMetricsListAllPages` method, instead.
//
// Parameters
// - `disk`
// - `endTime` An exclusive end time of metrics.
// - `limit` Maximum number of items returned by a single call
// - `metric`
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `project`
// - `startTime` An inclusive start time of metrics.
func (c *Client) DiskMetricsList(disk NameOrId, metric DiskMetricName, endTime *time.Time, limit int, pageToken string, startTime *time.Time, project NameOrId) (*MeasurementResultsPage, error) {
	// Create the url.
	path := "/v1/disks/{{.disk}}/metrics/{{.metric}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"disk":   disk.(string),
		"metric": string(metric),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"end_time":   endTime.String(),
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"project":    project.(string),
		"start_time": startTime.String(),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body MeasurementResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// DiskMetricsListAllPages: Fetch disk metrics
//
// This method is a wrapper around the `DiskMetricsList` method.
// This method returns all the pages at once.
//
// Parameters
// - `disk`
// - `endTime` An exclusive end time of metrics.
// - `metric`
// - `project`
// - `startTime` An inclusive start time of metrics.
func (c *Client) DiskMetricsListAllPages(disk NameOrId, metric DiskMetricName, endTime *time.Time, startTime *time.Time, project NameOrId) (*[]Measurement, error) {
	var allPages []Measurement
	pageToken := ""
	limit := 100
	for {
		page, err := c.DiskMetricsList(disk, metric, endTime, limit, pageToken, startTime, project)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// GroupListV1: List groups
//
// To iterate over all pages, use the `GroupListV1AllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sortBy`
func (c *Client) GroupListV1(limit int, pageToken string, sortBy IdSortMode) (*GroupResultsPage, error) {
	// Create the url.
	path := "/v1/groups"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body GroupResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// GroupListV1AllPages: List groups
//
// This method is a wrapper around the `GroupListV1` method.
// This method returns all the pages at once.
//
// Parameters
// - `sortBy`
func (c *Client) GroupListV1AllPages(sortBy IdSortMode) (*[]Group, error) {
	var allPages []Group
	pageToken := ""
	limit := 100
	for {
		page, err := c.GroupListV1(limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// GroupView: Fetch group
//
// Parameters
// - `group`
func (c *Client) GroupView(group string) (*Group, error) {
	// Create the url.
	path := "/v1/groups/{{.group}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"group": group,
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Group
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// ImageList: List images
// List images which are global or scoped to the specified project. The images are returned sorted by creation date, with the most recent images appearing first.
//
// To iterate over all pages, use the `ImageListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `project`
// - `sortBy`
func (c *Client) ImageList(limit int, pageToken string, project NameOrId, sortBy NameOrIdSortMode) (*ImageResultsPage, error) {
	// Create the url.
	path := "/v1/images"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"project":    project.(string),
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body ImageResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// ImageListAllPages: List images
// List images which are global or scoped to the specified project. The images are returned sorted by creation date, with the most recent images appearing first.
//
// This method is a wrapper around the `ImageList` method.
// This method returns all the pages at once.
//
// Parameters
// - `project`
// - `sortBy`
func (c *Client) ImageListAllPages(project NameOrId, sortBy NameOrIdSortMode) (*[]Image, error) {
	var allPages []Image
	pageToken := ""
	limit := 100
	for {
		page, err := c.ImageList(limit, pageToken, project, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// ImageCreate: Create an image
// Create a new image in a project.
//
// Parameters
// - `project`
func (c *Client) ImageCreate(project NameOrId, j *ImageCreate) (*Image, error) {
	// Create the url.
	path := "/v1/images"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Image
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// ImageView: Fetch an image
// Fetch the details for a specific image in a project.
//
// Parameters
// - `image`
// - `project`
func (c *Client) ImageView(image NameOrId, project NameOrId) (*Image, error) {
	// Create the url.
	path := "/v1/images/{{.image}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"image": image.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Image
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// ImageDelete: Delete an image
// Permanently delete an image from a project. This operation cannot be undone. Any instances in the project using the image will continue to run, however new instances can not be created with this image.
//
// Parameters
// - `image`
// - `project`
func (c *Client) ImageDelete(image NameOrId, project NameOrId) error {
	// Create the url.
	path := "/v1/images/{{.image}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("DELETE", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"image": image.(string),
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// InstanceList: List instances
//
// To iterate over all pages, use the `InstanceListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `project`
// - `sortBy`
func (c *Client) InstanceList(limit int, pageToken string, project NameOrId, sortBy NameOrIdSortMode) (*InstanceResultsPage, error) {
	// Create the url.
	path := "/v1/instances"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"project":    project.(string),
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body InstanceResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// InstanceListAllPages: List instances
//
// This method is a wrapper around the `InstanceList` method.
// This method returns all the pages at once.
//
// Parameters
// - `project`
// - `sortBy`
func (c *Client) InstanceListAllPages(project NameOrId, sortBy NameOrIdSortMode) (*[]Instance, error) {
	var allPages []Instance
	pageToken := ""
	limit := 100
	for {
		page, err := c.InstanceList(limit, pageToken, project, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// InstanceCreate: Create an instance
//
// Parameters
// - `project`
func (c *Client) InstanceCreate(project NameOrId, j *InstanceCreate) (*Instance, error) {
	// Create the url.
	path := "/v1/instances"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Instance
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// InstanceView: Fetch an instance
//
// Parameters
// - `instance`
// - `project`
func (c *Client) InstanceView(project NameOrId, instance NameOrId) (*Instance, error) {
	// Create the url.
	path := "/v1/instances/{{.instance}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"instance": instance.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Instance
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// InstanceDelete: Delete an instance
//
// Parameters
// - `instance`
// - `project`
func (c *Client) InstanceDelete(project NameOrId, instance NameOrId) error {
	// Create the url.
	path := "/v1/instances/{{.instance}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("DELETE", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"instance": instance.(string),
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// InstanceDiskList: List an instance's disks
//
// To iterate over all pages, use the `InstanceDiskListAllPages` method, instead.
//
// Parameters
// - `instance`
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `project`
// - `sortBy`
func (c *Client) InstanceDiskList(limit int, pageToken string, project NameOrId, sortBy NameOrIdSortMode, instance NameOrId) (*DiskResultsPage, error) {
	// Create the url.
	path := "/v1/instances/{{.instance}}/disks"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"instance": instance.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"project":    project.(string),
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body DiskResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// InstanceDiskListAllPages: List an instance's disks
//
// This method is a wrapper around the `InstanceDiskList` method.
// This method returns all the pages at once.
//
// Parameters
// - `instance`
// - `project`
// - `sortBy`
func (c *Client) InstanceDiskListAllPages(project NameOrId, sortBy NameOrIdSortMode, instance NameOrId) (*[]Disk, error) {
	var allPages []Disk
	pageToken := ""
	limit := 100
	for {
		page, err := c.InstanceDiskList(limit, pageToken, project, sortBy, instance)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// InstanceDiskAttach: Attach a disk to an instance
//
// Parameters
// - `instance`
// - `project`
func (c *Client) InstanceDiskAttach(instance NameOrId, project NameOrId, j *DiskPath) (*Disk, error) {
	// Create the url.
	path := "/v1/instances/{{.instance}}/disks/attach"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"instance": instance.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Disk
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// InstanceDiskDetach: Detach a disk from an instance
//
// Parameters
// - `instance`
// - `project`
func (c *Client) InstanceDiskDetach(instance NameOrId, project NameOrId, j *DiskPath) (*Disk, error) {
	// Create the url.
	path := "/v1/instances/{{.instance}}/disks/detach"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"instance": instance.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Disk
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// InstanceExternalIpList: List external IP addresses
//
// Parameters
// - `instance`
// - `project`
func (c *Client) InstanceExternalIpList(project NameOrId, instance NameOrId) (*ExternalIpResultsPage, error) {
	// Create the url.
	path := "/v1/instances/{{.instance}}/external-ips"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"instance": instance.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body ExternalIpResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// InstanceMigrate: Migrate an instance
//
// Parameters
// - `instance`
// - `project`
func (c *Client) InstanceMigrate(project NameOrId, instance NameOrId, j *InstanceMigrate) (*Instance, error) {
	// Create the url.
	path := "/v1/instances/{{.instance}}/migrate"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"instance": instance.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Instance
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// InstanceReboot: Reboot an instance
//
// Parameters
// - `instance`
// - `project`
func (c *Client) InstanceReboot(project NameOrId, instance NameOrId) (*Instance, error) {
	// Create the url.
	path := "/v1/instances/{{.instance}}/reboot"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("POST", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"instance": instance.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Instance
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// InstanceSerialConsole: Fetch an instance's serial console
//
// Parameters
// - `fromStart` Character index in the serial buffer from which to read, counting the bytes output since instance start. If this is not provided, `most_recent` must be provided, and if this *is* provided, `most_recent` must *not* be provided.
// - `instance`
// - `maxBytes` Maximum number of bytes of buffered serial console contents to return. If the requested range runs to the end of the available buffer, the data returned will be shorter than `max_bytes`.
// - `mostRecent` Character index in the serial buffer from which to read, counting *backward* from the most recently buffered data retrieved from the instance. (See note on `from_start` about mutual exclusivity)
// - `project`
func (c *Client) InstanceSerialConsole(instance NameOrId, fromStart int, maxBytes int, mostRecent int, project NameOrId) (*InstanceSerialConsoleData, error) {
	// Create the url.
	path := "/v1/instances/{{.instance}}/serial-console"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"instance": instance.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"from_start":  strconv.Itoa(fromStart),
		"max_bytes":   strconv.Itoa(maxBytes),
		"most_recent": strconv.Itoa(mostRecent),
		"project":     project.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body InstanceSerialConsoleData
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// InstanceSerialConsoleStream: Stream an instance's serial console
//
// Parameters
// - `instance`
// - `project`
func (c *Client) InstanceSerialConsoleStream(instance NameOrId, project NameOrId) error {
	// Create the url.
	path := "/v1/instances/{{.instance}}/serial-console/stream"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"instance": instance.(string),
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// InstanceStart: Boot an instance
//
// Parameters
// - `instance`
// - `project`
func (c *Client) InstanceStart(project NameOrId, instance NameOrId) (*Instance, error) {
	// Create the url.
	path := "/v1/instances/{{.instance}}/start"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("POST", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"instance": instance.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Instance
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// InstanceStop: Stop an instance
//
// Parameters
// - `instance`
// - `project`
func (c *Client) InstanceStop(project NameOrId, instance NameOrId) (*Instance, error) {
	// Create the url.
	path := "/v1/instances/{{.instance}}/stop"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("POST", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"instance": instance.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Instance
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// CurrentUserView: Fetch the user associated with the current session
func (c *Client) CurrentUserView() (*User, error) {
	// Create the url.
	path := "/v1/me"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body User
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// CurrentUserGroups: Fetch the silo groups the current user belongs to
//
// To iterate over all pages, use the `CurrentUserGroupsAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sortBy`
func (c *Client) CurrentUserGroups(limit int, pageToken string, sortBy IdSortMode) (*GroupResultsPage, error) {
	// Create the url.
	path := "/v1/me/groups"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body GroupResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// CurrentUserGroupsAllPages: Fetch the silo groups the current user belongs to
//
// This method is a wrapper around the `CurrentUserGroups` method.
// This method returns all the pages at once.
//
// Parameters
// - `sortBy`
func (c *Client) CurrentUserGroupsAllPages(sortBy IdSortMode) (*[]Group, error) {
	var allPages []Group
	pageToken := ""
	limit := 100
	for {
		page, err := c.CurrentUserGroups(limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// CurrentUserSshKeyList: List SSH public keys
// Lists SSH public keys for the currently authenticated user.
//
// To iterate over all pages, use the `CurrentUserSshKeyListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sortBy`
func (c *Client) CurrentUserSshKeyList(limit int, pageToken string, sortBy NameOrIdSortMode) (*SshKeyResultsPage, error) {
	// Create the url.
	path := "/v1/me/ssh-keys"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body SshKeyResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// CurrentUserSshKeyListAllPages: List SSH public keys
// Lists SSH public keys for the currently authenticated user.
//
// This method is a wrapper around the `CurrentUserSshKeyList` method.
// This method returns all the pages at once.
//
// Parameters
// - `sortBy`
func (c *Client) CurrentUserSshKeyListAllPages(sortBy NameOrIdSortMode) (*[]SshKey, error) {
	var allPages []SshKey
	pageToken := ""
	limit := 100
	for {
		page, err := c.CurrentUserSshKeyList(limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// CurrentUserSshKeyCreate: Create an SSH public key
// Create an SSH public key for the currently authenticated user.
func (c *Client) CurrentUserSshKeyCreate(j *SshKeyCreate) (*SshKey, error) {
	// Create the url.
	path := "/v1/me/ssh-keys"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body SshKey
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// CurrentUserSshKeyView: Fetch an SSH public key
// Fetch an SSH public key associated with the currently authenticated user.
//
// Parameters
// - `sshKey`
func (c *Client) CurrentUserSshKeyView(sshKey NameOrId) (*SshKey, error) {
	// Create the url.
	path := "/v1/me/ssh-keys/{{.ssh_key}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"ssh_key": sshKey.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body SshKey
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// CurrentUserSshKeyDelete: Delete an SSH public key
// Delete an SSH public key associated with the currently authenticated user.
//
// Parameters
// - `sshKey`
func (c *Client) CurrentUserSshKeyDelete(sshKey NameOrId) error {
	// Create the url.
	path := "/v1/me/ssh-keys/{{.ssh_key}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("DELETE", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"ssh_key": sshKey.(string),
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// InstanceNetworkInterfaceList: List network interfaces
//
// To iterate over all pages, use the `InstanceNetworkInterfaceListAllPages` method, instead.
//
// Parameters
// - `instance`
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `project`
// - `sortBy`
func (c *Client) InstanceNetworkInterfaceList(instance NameOrId, limit int, pageToken string, project NameOrId, sortBy NameOrIdSortMode) (*NetworkInterfaceResultsPage, error) {
	// Create the url.
	path := "/v1/network-interfaces"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"instance":   instance.(string),
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"project":    project.(string),
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body NetworkInterfaceResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// InstanceNetworkInterfaceListAllPages: List network interfaces
//
// This method is a wrapper around the `InstanceNetworkInterfaceList` method.
// This method returns all the pages at once.
//
// Parameters
// - `instance`
// - `project`
// - `sortBy`
func (c *Client) InstanceNetworkInterfaceListAllPages(instance NameOrId, project NameOrId, sortBy NameOrIdSortMode) (*[]NetworkInterface, error) {
	var allPages []NetworkInterface
	pageToken := ""
	limit := 100
	for {
		page, err := c.InstanceNetworkInterfaceList(instance, limit, pageToken, project, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// InstanceNetworkInterfaceCreate: Create a network interface
//
// Parameters
// - `instance`
// - `project`
func (c *Client) InstanceNetworkInterfaceCreate(instance NameOrId, project NameOrId, j *NetworkInterfaceCreate) (*NetworkInterface, error) {
	// Create the url.
	path := "/v1/network-interfaces"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"instance": instance.(string),
		"project":  project.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body NetworkInterface
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// InstanceNetworkInterfaceView: Fetch a network interface
//
// Parameters
// - `instance`
// - `itf`
// - `project`
func (c *Client) InstanceNetworkInterfaceView(itf NameOrId, instance NameOrId, project NameOrId) (*NetworkInterface, error) {
	// Create the url.
	path := "/v1/network-interfaces/{{.interface}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"interface": itf.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"instance": instance.(string),
		"project":  project.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body NetworkInterface
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// InstanceNetworkInterfaceUpdate: Update a network interface
//
// Parameters
// - `instance`
// - `itf`
// - `project`
func (c *Client) InstanceNetworkInterfaceUpdate(itf NameOrId, instance NameOrId, project NameOrId, j *NetworkInterfaceUpdate) (*NetworkInterface, error) {
	// Create the url.
	path := "/v1/network-interfaces/{{.interface}}"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("PUT", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"interface": itf.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"instance": instance.(string),
		"project":  project.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body NetworkInterface
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// InstanceNetworkInterfaceDelete: Delete a network interface
// Note that the primary interface for an instance cannot be deleted if there are any secondary interfaces. A new primary interface must be designated first. The primary interface can be deleted if there are no secondary interfaces.
//
// Parameters
// - `instance`
// - `itf`
// - `project`
func (c *Client) InstanceNetworkInterfaceDelete(itf NameOrId, instance NameOrId, project NameOrId) error {
	// Create the url.
	path := "/v1/network-interfaces/{{.interface}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("DELETE", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"interface": itf.(string),
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"instance": instance.(string),
		"project":  project.(string),
	}); err != nil {
		return fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// PolicyView: Fetch the current silo's IAM policy
func (c *Client) PolicyView() (*SiloRolePolicy, error) {
	// Create the url.
	path := "/v1/policy"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body SiloRolePolicy
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// PolicyUpdate: Update the current silo's IAM policy
func (c *Client) PolicyUpdate(j *SiloRolePolicy) (*SiloRolePolicy, error) {
	// Create the url.
	path := "/v1/policy"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("PUT", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body SiloRolePolicy
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// ProjectList: List projects
//
// To iterate over all pages, use the `ProjectListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sortBy`
func (c *Client) ProjectList(limit int, pageToken string, sortBy NameOrIdSortMode) (*ProjectResultsPage, error) {
	// Create the url.
	path := "/v1/projects"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body ProjectResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// ProjectListAllPages: List projects
//
// This method is a wrapper around the `ProjectList` method.
// This method returns all the pages at once.
//
// Parameters
// - `sortBy`
func (c *Client) ProjectListAllPages(sortBy NameOrIdSortMode) (*[]Project, error) {
	var allPages []Project
	pageToken := ""
	limit := 100
	for {
		page, err := c.ProjectList(limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// ProjectCreate: Create a project
func (c *Client) ProjectCreate(j *ProjectCreate) (*Project, error) {
	// Create the url.
	path := "/v1/projects"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Project
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// ProjectView: Fetch a project
//
// Parameters
// - `project`
func (c *Client) ProjectView(project NameOrId) (*Project, error) {
	// Create the url.
	path := "/v1/projects/{{.project}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Project
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// ProjectUpdate: Update a project
//
// Parameters
// - `project`
func (c *Client) ProjectUpdate(project NameOrId, j *ProjectUpdate) (*Project, error) {
	// Create the url.
	path := "/v1/projects/{{.project}}"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("PUT", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Project
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// ProjectDelete: Delete a project
//
// Parameters
// - `project`
func (c *Client) ProjectDelete(project NameOrId) error {
	// Create the url.
	path := "/v1/projects/{{.project}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("DELETE", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// ProjectPolicyView: Fetch a project's IAM policy
//
// Parameters
// - `project`
func (c *Client) ProjectPolicyView(project NameOrId) (*ProjectRolePolicy, error) {
	// Create the url.
	path := "/v1/projects/{{.project}}/policy"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body ProjectRolePolicy
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// ProjectPolicyUpdate: Update a project's IAM policy
//
// Parameters
// - `project`
func (c *Client) ProjectPolicyUpdate(project NameOrId, j *ProjectRolePolicy) (*ProjectRolePolicy, error) {
	// Create the url.
	path := "/v1/projects/{{.project}}/policy"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("PUT", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body ProjectRolePolicy
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SnapshotList: List snapshots
//
// To iterate over all pages, use the `SnapshotListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `project`
// - `sortBy`
func (c *Client) SnapshotList(limit int, pageToken string, project NameOrId, sortBy NameOrIdSortMode) (*SnapshotResultsPage, error) {
	// Create the url.
	path := "/v1/snapshots"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"project":    project.(string),
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body SnapshotResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SnapshotListAllPages: List snapshots
//
// This method is a wrapper around the `SnapshotList` method.
// This method returns all the pages at once.
//
// Parameters
// - `project`
// - `sortBy`
func (c *Client) SnapshotListAllPages(project NameOrId, sortBy NameOrIdSortMode) (*[]Snapshot, error) {
	var allPages []Snapshot
	pageToken := ""
	limit := 100
	for {
		page, err := c.SnapshotList(limit, pageToken, project, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// SnapshotCreate: Create a snapshot
// Creates a point-in-time snapshot from a disk.
//
// Parameters
// - `project`
func (c *Client) SnapshotCreate(project NameOrId, j *SnapshotCreate) (*Snapshot, error) {
	// Create the url.
	path := "/v1/snapshots"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Snapshot
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SnapshotView: Fetch a snapshot
//
// Parameters
// - `project`
// - `snapshot`
func (c *Client) SnapshotView(snapshot NameOrId, project NameOrId) (*Snapshot, error) {
	// Create the url.
	path := "/v1/snapshots/{{.snapshot}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"snapshot": snapshot.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Snapshot
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SnapshotDelete: Delete a snapshot
//
// Parameters
// - `project`
// - `snapshot`
func (c *Client) SnapshotDelete(snapshot NameOrId, project NameOrId) error {
	// Create the url.
	path := "/v1/snapshots/{{.snapshot}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("DELETE", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"snapshot": snapshot.(string),
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// CertificateList: List system-wide certificates
// Returns a list of all the system-wide certificates. System-wide certificates are returned sorted by creation date, with the most recent certificates appearing first.
//
// To iterate over all pages, use the `CertificateListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sortBy`
func (c *Client) CertificateList(limit int, pageToken string, sortBy NameOrIdSortMode) (*CertificateResultsPage, error) {
	// Create the url.
	path := "/v1/system/certificates"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body CertificateResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// CertificateListAllPages: List system-wide certificates
// Returns a list of all the system-wide certificates. System-wide certificates are returned sorted by creation date, with the most recent certificates appearing first.
//
// This method is a wrapper around the `CertificateList` method.
// This method returns all the pages at once.
//
// Parameters
// - `sortBy`
func (c *Client) CertificateListAllPages(sortBy NameOrIdSortMode) (*[]Certificate, error) {
	var allPages []Certificate
	pageToken := ""
	limit := 100
	for {
		page, err := c.CertificateList(limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// CertificateCreate: Create a new system-wide x.509 certificate.
// This certificate is automatically used by the Oxide Control plane to serve external connections.
func (c *Client) CertificateCreate(j *CertificateCreate) (*Certificate, error) {
	// Create the url.
	path := "/v1/system/certificates"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Certificate
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// CertificateView: Fetch a certificate
// Returns the details of a specific certificate
//
// Parameters
// - `certificate`
func (c *Client) CertificateView(certificate NameOrId) (*Certificate, error) {
	// Create the url.
	path := "/v1/system/certificates/{{.certificate}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"certificate": certificate.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Certificate
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// CertificateDelete: Delete a certificate
// Permanently delete a certificate. This operation cannot be undone.
//
// Parameters
// - `certificate`
func (c *Client) CertificateDelete(certificate NameOrId) error {
	// Create the url.
	path := "/v1/system/certificates/{{.certificate}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("DELETE", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"certificate": certificate.(string),
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// PhysicalDiskListV1: List physical disks
//
// To iterate over all pages, use the `PhysicalDiskListV1AllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sortBy`
func (c *Client) PhysicalDiskListV1(limit int, pageToken string, sortBy IdSortMode) (*PhysicalDiskResultsPage, error) {
	// Create the url.
	path := "/v1/system/hardware/disks"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body PhysicalDiskResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// PhysicalDiskListV1AllPages: List physical disks
//
// This method is a wrapper around the `PhysicalDiskListV1` method.
// This method returns all the pages at once.
//
// Parameters
// - `sortBy`
func (c *Client) PhysicalDiskListV1AllPages(sortBy IdSortMode) (*[]PhysicalDisk, error) {
	var allPages []PhysicalDisk
	pageToken := ""
	limit := 100
	for {
		page, err := c.PhysicalDiskListV1(limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// RackListV1: List racks
//
// To iterate over all pages, use the `RackListV1AllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sortBy`
func (c *Client) RackListV1(limit int, pageToken string, sortBy IdSortMode) (*RackResultsPage, error) {
	// Create the url.
	path := "/v1/system/hardware/racks"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body RackResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// RackListV1AllPages: List racks
//
// This method is a wrapper around the `RackListV1` method.
// This method returns all the pages at once.
//
// Parameters
// - `sortBy`
func (c *Client) RackListV1AllPages(sortBy IdSortMode) (*[]Rack, error) {
	var allPages []Rack
	pageToken := ""
	limit := 100
	for {
		page, err := c.RackListV1(limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// RackViewV1: Fetch a rack
//
// Parameters
// - `rackId` The rack's unique ID.
func (c *Client) RackViewV1(rackId string) (*Rack, error) {
	// Create the url.
	path := "/v1/system/hardware/racks/{{.rack_id}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"rack_id": rackId,
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Rack
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SledListV1: List sleds
//
// To iterate over all pages, use the `SledListV1AllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sortBy`
func (c *Client) SledListV1(limit int, pageToken string, sortBy IdSortMode) (*SledResultsPage, error) {
	// Create the url.
	path := "/v1/system/hardware/sleds"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body SledResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SledListV1AllPages: List sleds
//
// This method is a wrapper around the `SledListV1` method.
// This method returns all the pages at once.
//
// Parameters
// - `sortBy`
func (c *Client) SledListV1AllPages(sortBy IdSortMode) (*[]Sled, error) {
	var allPages []Sled
	pageToken := ""
	limit := 100
	for {
		page, err := c.SledListV1(limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// SledViewV1: Fetch a sled
//
// Parameters
// - `sledId` The sled's unique ID.
func (c *Client) SledViewV1(sledId string) (*Sled, error) {
	// Create the url.
	path := "/v1/system/hardware/sleds/{{.sled_id}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"sled_id": sledId,
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Sled
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SledPhysicalDiskListV1: List physical disks attached to sleds
//
// To iterate over all pages, use the `SledPhysicalDiskListV1AllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sledId` The sled's unique ID.
// - `sortBy`
func (c *Client) SledPhysicalDiskListV1(sledId string, limit int, pageToken string, sortBy IdSortMode) (*PhysicalDiskResultsPage, error) {
	// Create the url.
	path := "/v1/system/hardware/sleds/{{.sled_id}}/disks"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"sled_id": sledId,
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body PhysicalDiskResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SledPhysicalDiskListV1AllPages: List physical disks attached to sleds
//
// This method is a wrapper around the `SledPhysicalDiskListV1` method.
// This method returns all the pages at once.
//
// Parameters
// - `sledId` The sled's unique ID.
// - `sortBy`
func (c *Client) SledPhysicalDiskListV1AllPages(sledId string, sortBy IdSortMode) (*[]PhysicalDisk, error) {
	var allPages []PhysicalDisk
	pageToken := ""
	limit := 100
	for {
		page, err := c.SledPhysicalDiskListV1(sledId, limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// SiloIdentityProviderList: List a silo's IDPs_name
//
// To iterate over all pages, use the `SiloIdentityProviderListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `silo`
// - `sortBy`
func (c *Client) SiloIdentityProviderList(limit int, pageToken string, silo NameOrId, sortBy NameOrIdSortMode) (*IdentityProviderResultsPage, error) {
	// Create the url.
	path := "/v1/system/identity-providers"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"silo":       silo.(string),
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body IdentityProviderResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SiloIdentityProviderListAllPages: List a silo's IDPs_name
//
// This method is a wrapper around the `SiloIdentityProviderList` method.
// This method returns all the pages at once.
//
// Parameters
// - `silo`
// - `sortBy`
func (c *Client) SiloIdentityProviderListAllPages(silo NameOrId, sortBy NameOrIdSortMode) (*[]IdentityProvider, error) {
	var allPages []IdentityProvider
	pageToken := ""
	limit := 100
	for {
		page, err := c.SiloIdentityProviderList(limit, pageToken, silo, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// LocalIdpUserCreate: Create a user
// Users can only be created in Silos with `provision_type` == `Fixed`. Otherwise, Silo users are just-in-time (JIT) provisioned when a user first logs in using an external Identity Provider. Use `POST /v1/system/identity-providers/local/users` instead
//
// Parameters
// - `silo`
func (c *Client) LocalIdpUserCreate(silo NameOrId, j *UserCreate) (*User, error) {
	// Create the url.
	path := "/v1/system/identity-providers/local/users"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"silo": silo.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body User
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// LocalIdpUserDelete: Delete a user
//
// Parameters
// - `silo`
// - `userId` The user's internal id
func (c *Client) LocalIdpUserDelete(userId string, silo NameOrId) error {
	// Create the url.
	path := "/v1/system/identity-providers/local/users/{{.user_id}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("DELETE", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"user_id": userId,
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"silo": silo.(string),
	}); err != nil {
		return fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// LocalIdpUserSetPassword: Set or invalidate a user's password
// Passwords can only be updated for users in Silos with identity mode `LocalOnly`.
//
// Parameters
// - `silo`
// - `userId` The user's internal id
func (c *Client) LocalIdpUserSetPassword(userId string, silo NameOrId, j *UserPassword) error {
	// Create the url.
	path := "/v1/system/identity-providers/local/users/{{.user_id}}/set-password"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"user_id": userId,
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"silo": silo.(string),
	}); err != nil {
		return fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// SamlIdentityProviderCreate: Create a SAML IDP
//
// Parameters
// - `silo`
func (c *Client) SamlIdentityProviderCreate(silo NameOrId, j *SamlIdentityProviderCreate) (*SamlIdentityProvider, error) {
	// Create the url.
	path := "/v1/system/identity-providers/saml"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"silo": silo.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body SamlIdentityProvider
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SamlIdentityProviderView: Fetch a SAML IDP
//
// Parameters
// - `provider`
// - `silo`
func (c *Client) SamlIdentityProviderView(provider NameOrId, silo NameOrId) (*SamlIdentityProvider, error) {
	// Create the url.
	path := "/v1/system/identity-providers/saml/{{.provider}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"provider": provider.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"silo": silo.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body SamlIdentityProvider
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// IpPoolList: List IP pools
//
// To iterate over all pages, use the `IpPoolListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sortBy`
func (c *Client) IpPoolList(limit int, pageToken string, sortBy NameOrIdSortMode) (*IpPoolResultsPage, error) {
	// Create the url.
	path := "/v1/system/ip-pools"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body IpPoolResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// IpPoolListAllPages: List IP pools
//
// This method is a wrapper around the `IpPoolList` method.
// This method returns all the pages at once.
//
// Parameters
// - `sortBy`
func (c *Client) IpPoolListAllPages(sortBy NameOrIdSortMode) (*[]IpPool, error) {
	var allPages []IpPool
	pageToken := ""
	limit := 100
	for {
		page, err := c.IpPoolList(limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// IpPoolCreate: Create an IP pool
func (c *Client) IpPoolCreate(j *IpPoolCreate) (*IpPool, error) {
	// Create the url.
	path := "/v1/system/ip-pools"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body IpPool
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// IpPoolServiceView: Fetch the IP pool used for Oxide services.
func (c *Client) IpPoolServiceView() (*IpPool, error) {
	// Create the url.
	path := "/v1/system/ip-pools-service"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body IpPool
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// IpPoolServiceRangeList: List ranges for the IP pool used for Oxide services.
// Ranges are ordered by their first address.
//
// To iterate over all pages, use the `IpPoolServiceRangeListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
func (c *Client) IpPoolServiceRangeList(limit int, pageToken string) (*IpPoolRangeResultsPage, error) {
	// Create the url.
	path := "/v1/system/ip-pools-service/ranges"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body IpPoolRangeResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// IpPoolServiceRangeListAllPages: List ranges for the IP pool used for Oxide services.
// Ranges are ordered by their first address.
//
// This method is a wrapper around the `IpPoolServiceRangeList` method.
// This method returns all the pages at once.
func (c *Client) IpPoolServiceRangeListAllPages() (*[]IpPoolRange, error) {
	var allPages []IpPoolRange
	pageToken := ""
	limit := 100
	for {
		page, err := c.IpPoolServiceRangeList(limit, pageToken)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// IpPoolServiceRangeAdd: Add a range to an IP pool used for Oxide services.
func (c *Client) IpPoolServiceRangeAdd(j *IpRange) (*IpPoolRange, error) {
	// Create the url.
	path := "/v1/system/ip-pools-service/ranges/add"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body IpPoolRange
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// IpPoolServiceRangeRemove: Remove a range from an IP pool used for Oxide services.
func (c *Client) IpPoolServiceRangeRemove(j *IpRange) error {
	// Create the url.
	path := "/v1/system/ip-pools-service/ranges/remove"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// IpPoolView: Fetch an IP pool
//
// Parameters
// - `pool`
func (c *Client) IpPoolView(pool NameOrId) (*IpPool, error) {
	// Create the url.
	path := "/v1/system/ip-pools/{{.pool}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"pool": pool.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body IpPool
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// IpPoolUpdate: Update an IP Pool
//
// Parameters
// - `pool`
func (c *Client) IpPoolUpdate(pool NameOrId, j *IpPoolUpdate) (*IpPool, error) {
	// Create the url.
	path := "/v1/system/ip-pools/{{.pool}}"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("PUT", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"pool": pool.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body IpPool
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// IpPoolDelete: Delete an IP Pool
//
// Parameters
// - `pool`
func (c *Client) IpPoolDelete(pool NameOrId) error {
	// Create the url.
	path := "/v1/system/ip-pools/{{.pool}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("DELETE", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"pool": pool.(string),
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// IpPoolRangeList: List ranges for an IP pool
// Ranges are ordered by their first address.
//
// To iterate over all pages, use the `IpPoolRangeListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `pool`
func (c *Client) IpPoolRangeList(pool NameOrId, limit int, pageToken string) (*IpPoolRangeResultsPage, error) {
	// Create the url.
	path := "/v1/system/ip-pools/{{.pool}}/ranges"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"pool": pool.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body IpPoolRangeResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// IpPoolRangeListAllPages: List ranges for an IP pool
// Ranges are ordered by their first address.
//
// This method is a wrapper around the `IpPoolRangeList` method.
// This method returns all the pages at once.
//
// Parameters
// - `pool`
func (c *Client) IpPoolRangeListAllPages(pool NameOrId) (*[]IpPoolRange, error) {
	var allPages []IpPoolRange
	pageToken := ""
	limit := 100
	for {
		page, err := c.IpPoolRangeList(pool, limit, pageToken)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// IpPoolRangeAdd: Add a range to an IP pool
//
// Parameters
// - `pool`
func (c *Client) IpPoolRangeAdd(pool NameOrId, j *IpRange) (*IpPoolRange, error) {
	// Create the url.
	path := "/v1/system/ip-pools/{{.pool}}/ranges/add"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"pool": pool.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body IpPoolRange
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// IpPoolRangeRemove: Remove a range from an IP pool
//
// Parameters
// - `pool`
func (c *Client) IpPoolRangeRemove(pool NameOrId, j *IpRange) error {
	// Create the url.
	path := "/v1/system/ip-pools/{{.pool}}/ranges/remove"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"pool": pool.(string),
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// SystemMetric: Access metrics data
//
// To iterate over all pages, use the `SystemMetricAllPages` method, instead.
//
// Parameters
// - `endTime` An exclusive end time of metrics.
// - `id` The UUID of the container being queried
// - `limit` Maximum number of items returned by a single call
// - `metricName`
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `startTime` An inclusive start time of metrics.
func (c *Client) SystemMetric(metricName SystemMetricName, endTime *time.Time, id string, limit int, pageToken string, startTime *time.Time) (*MeasurementResultsPage, error) {
	// Create the url.
	path := "/v1/system/metrics/{{.metric_name}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"metric_name": string(metricName),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"end_time":   endTime.String(),
		"id":         id,
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"start_time": startTime.String(),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body MeasurementResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SystemMetricAllPages: Access metrics data
//
// This method is a wrapper around the `SystemMetric` method.
// This method returns all the pages at once.
//
// Parameters
// - `endTime` An exclusive end time of metrics.
// - `id` The UUID of the container being queried
// - `metricName`
// - `startTime` An inclusive start time of metrics.
func (c *Client) SystemMetricAllPages(metricName SystemMetricName, endTime *time.Time, id string, startTime *time.Time) (*[]Measurement, error) {
	var allPages []Measurement
	pageToken := ""
	limit := 100
	for {
		page, err := c.SystemMetric(metricName, endTime, id, limit, pageToken, startTime)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// SystemPolicyView: Fetch the top-level IAM policy
func (c *Client) SystemPolicyView() (*FleetRolePolicy, error) {
	// Create the url.
	path := "/v1/system/policy"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body FleetRolePolicy
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SystemPolicyUpdate: Update the top-level IAM policy
func (c *Client) SystemPolicyUpdate(j *FleetRolePolicy) (*FleetRolePolicy, error) {
	// Create the url.
	path := "/v1/system/policy"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("PUT", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body FleetRolePolicy
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// RoleList: List built-in roles
//
// To iterate over all pages, use the `RoleListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
func (c *Client) RoleList(limit int, pageToken string) (*RoleResultsPage, error) {
	// Create the url.
	path := "/v1/system/roles"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body RoleResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// RoleListAllPages: List built-in roles
//
// This method is a wrapper around the `RoleList` method.
// This method returns all the pages at once.
func (c *Client) RoleListAllPages() (*[]Role, error) {
	var allPages []Role
	pageToken := ""
	limit := 100
	for {
		page, err := c.RoleList(limit, pageToken)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// RoleView: Fetch a built-in role
//
// Parameters
// - `roleName` The built-in role's unique name.
func (c *Client) RoleView(roleName string) (*Role, error) {
	// Create the url.
	path := "/v1/system/roles/{{.role_name}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"role_name": roleName,
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Role
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SagaListV1: List sagas
//
// To iterate over all pages, use the `SagaListV1AllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sortBy`
func (c *Client) SagaListV1(limit int, pageToken string, sortBy IdSortMode) (*SagaResultsPage, error) {
	// Create the url.
	path := "/v1/system/sagas"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body SagaResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SagaListV1AllPages: List sagas
//
// This method is a wrapper around the `SagaListV1` method.
// This method returns all the pages at once.
//
// Parameters
// - `sortBy`
func (c *Client) SagaListV1AllPages(sortBy IdSortMode) (*[]Saga, error) {
	var allPages []Saga
	pageToken := ""
	limit := 100
	for {
		page, err := c.SagaListV1(limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// SagaViewV1: Fetch a saga
//
// Parameters
// - `sagaId`
func (c *Client) SagaViewV1(sagaId string) (*Saga, error) {
	// Create the url.
	path := "/v1/system/sagas/{{.saga_id}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"saga_id": sagaId,
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Saga
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SiloListV1: List silos
// Lists silos that are discoverable based on the current permissions.
//
// To iterate over all pages, use the `SiloListV1AllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sortBy`
func (c *Client) SiloListV1(limit int, pageToken string, sortBy NameOrIdSortMode) (*SiloResultsPage, error) {
	// Create the url.
	path := "/v1/system/silos"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body SiloResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SiloListV1AllPages: List silos
// Lists silos that are discoverable based on the current permissions.
//
// This method is a wrapper around the `SiloListV1` method.
// This method returns all the pages at once.
//
// Parameters
// - `sortBy`
func (c *Client) SiloListV1AllPages(sortBy NameOrIdSortMode) (*[]Silo, error) {
	var allPages []Silo
	pageToken := ""
	limit := 100
	for {
		page, err := c.SiloListV1(limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// SiloCreateV1: Create a silo
func (c *Client) SiloCreateV1(j *SiloCreate) (*Silo, error) {
	// Create the url.
	path := "/v1/system/silos"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Silo
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SiloViewV1: Fetch a silo
// Fetch a silo by name.
//
// Parameters
// - `silo`
func (c *Client) SiloViewV1(silo NameOrId) (*Silo, error) {
	// Create the url.
	path := "/v1/system/silos/{{.silo}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"silo": silo.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Silo
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SiloDeleteV1: Delete a silo
// Delete a silo by name.
//
// Parameters
// - `silo`
func (c *Client) SiloDeleteV1(silo NameOrId) error {
	// Create the url.
	path := "/v1/system/silos/{{.silo}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("DELETE", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"silo": silo.(string),
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// SiloPolicyViewV1: Fetch a silo's IAM policy
//
// Parameters
// - `silo`
func (c *Client) SiloPolicyViewV1(silo NameOrId) (*SiloRolePolicy, error) {
	// Create the url.
	path := "/v1/system/silos/{{.silo}}/policy"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"silo": silo.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body SiloRolePolicy
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SiloPolicyUpdateV1: Update a silo's IAM policy
//
// Parameters
// - `silo`
func (c *Client) SiloPolicyUpdateV1(silo NameOrId, j *SiloRolePolicy) (*SiloRolePolicy, error) {
	// Create the url.
	path := "/v1/system/silos/{{.silo}}/policy"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("PUT", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"silo": silo.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body SiloRolePolicy
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SystemComponentVersionList: View version and update status of component tree
//
// To iterate over all pages, use the `SystemComponentVersionListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sortBy`
func (c *Client) SystemComponentVersionList(limit int, pageToken string, sortBy IdSortMode) (*UpdateableComponentResultsPage, error) {
	// Create the url.
	path := "/v1/system/update/components"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body UpdateableComponentResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SystemComponentVersionListAllPages: View version and update status of component tree
//
// This method is a wrapper around the `SystemComponentVersionList` method.
// This method returns all the pages at once.
//
// Parameters
// - `sortBy`
func (c *Client) SystemComponentVersionListAllPages(sortBy IdSortMode) (*[]UpdateableComponent, error) {
	var allPages []UpdateableComponent
	pageToken := ""
	limit := 100
	for {
		page, err := c.SystemComponentVersionList(limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// UpdateDeploymentsList: List all update deployments
//
// To iterate over all pages, use the `UpdateDeploymentsListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sortBy`
func (c *Client) UpdateDeploymentsList(limit int, pageToken string, sortBy IdSortMode) (*UpdateDeploymentResultsPage, error) {
	// Create the url.
	path := "/v1/system/update/deployments"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body UpdateDeploymentResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// UpdateDeploymentsListAllPages: List all update deployments
//
// This method is a wrapper around the `UpdateDeploymentsList` method.
// This method returns all the pages at once.
//
// Parameters
// - `sortBy`
func (c *Client) UpdateDeploymentsListAllPages(sortBy IdSortMode) (*[]UpdateDeployment, error) {
	var allPages []UpdateDeployment
	pageToken := ""
	limit := 100
	for {
		page, err := c.UpdateDeploymentsList(limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// UpdateDeploymentView: Fetch a system update deployment
//
// Parameters
// - `id`
func (c *Client) UpdateDeploymentView(id string) (*UpdateDeployment, error) {
	// Create the url.
	path := "/v1/system/update/deployments/{{.id}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"id": id,
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body UpdateDeployment
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SystemUpdateRefresh: Refresh update data
func (c *Client) SystemUpdateRefresh() error {
	// Create the url.
	path := "/v1/system/update/refresh"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("POST", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// SystemUpdateStart: Start system update
func (c *Client) SystemUpdateStart(j *SystemUpdateStart) (*UpdateDeployment, error) {
	// Create the url.
	path := "/v1/system/update/start"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body UpdateDeployment
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SystemUpdateStop: Stop system update
// If there is no update in progress, do nothing.
func (c *Client) SystemUpdateStop() error {
	// Create the url.
	path := "/v1/system/update/stop"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("POST", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// SystemUpdateList: List all updates
//
// To iterate over all pages, use the `SystemUpdateListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sortBy`
func (c *Client) SystemUpdateList(limit int, pageToken string, sortBy IdSortMode) (*SystemUpdateResultsPage, error) {
	// Create the url.
	path := "/v1/system/update/updates"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body SystemUpdateResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SystemUpdateListAllPages: List all updates
//
// This method is a wrapper around the `SystemUpdateList` method.
// This method returns all the pages at once.
//
// Parameters
// - `sortBy`
func (c *Client) SystemUpdateListAllPages(sortBy IdSortMode) (*[]SystemUpdate, error) {
	var allPages []SystemUpdate
	pageToken := ""
	limit := 100
	for {
		page, err := c.SystemUpdateList(limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// SystemUpdateView: View system update
//
// Parameters
// - `version`
func (c *Client) SystemUpdateView(version SemverVersion) (*SystemUpdate, error) {
	// Create the url.
	path := "/v1/system/update/updates/{{.version}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"version": string(version),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body SystemUpdate
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SystemUpdateComponentsList: View system update component tree
//
// Parameters
// - `version`
func (c *Client) SystemUpdateComponentsList(version SemverVersion) (*ComponentUpdateResultsPage, error) {
	// Create the url.
	path := "/v1/system/update/updates/{{.version}}/components"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"version": string(version),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body ComponentUpdateResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SystemVersion: View system version and update status
func (c *Client) SystemVersion() (*SystemVersion, error) {
	// Create the url.
	path := "/v1/system/update/version"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body SystemVersion
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SiloUserListV1: List users in a silo
//
// To iterate over all pages, use the `SiloUserListV1AllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `silo`
// - `sortBy`
func (c *Client) SiloUserListV1(limit int, pageToken string, silo NameOrId, sortBy IdSortMode) (*UserResultsPage, error) {
	// Create the url.
	path := "/v1/system/users"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"silo":       silo.(string),
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body UserResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SiloUserListV1AllPages: List users in a silo
//
// This method is a wrapper around the `SiloUserListV1` method.
// This method returns all the pages at once.
//
// Parameters
// - `silo`
// - `sortBy`
func (c *Client) SiloUserListV1AllPages(silo NameOrId, sortBy IdSortMode) (*[]User, error) {
	var allPages []User
	pageToken := ""
	limit := 100
	for {
		page, err := c.SiloUserListV1(limit, pageToken, silo, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// UserBuiltinList: List built-in users
//
// To iterate over all pages, use the `UserBuiltinListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sortBy`
func (c *Client) UserBuiltinList(limit int, pageToken string, sortBy NameSortMode) (*UserBuiltinResultsPage, error) {
	// Create the url.
	path := "/v1/system/users-builtin"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body UserBuiltinResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// UserBuiltinListAllPages: List built-in users
//
// This method is a wrapper around the `UserBuiltinList` method.
// This method returns all the pages at once.
//
// Parameters
// - `sortBy`
func (c *Client) UserBuiltinListAllPages(sortBy NameSortMode) (*[]UserBuiltin, error) {
	var allPages []UserBuiltin
	pageToken := ""
	limit := 100
	for {
		page, err := c.UserBuiltinList(limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// UserBuiltinView: Fetch a built-in user
//
// Parameters
// - `user`
func (c *Client) UserBuiltinView(user NameOrId) (*UserBuiltin, error) {
	// Create the url.
	path := "/v1/system/users-builtin/{{.user}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"user": user.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body UserBuiltin
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// SiloUserViewV1: Fetch a user
//
// Parameters
// - `silo`
// - `userId` The user's internal id
func (c *Client) SiloUserViewV1(userId string, silo NameOrId) (*User, error) {
	// Create the url.
	path := "/v1/system/users/{{.user_id}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"user_id": userId,
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"silo": silo.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body User
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// UserListV1: List users
//
// To iterate over all pages, use the `UserListV1AllPages` method, instead.
//
// Parameters
// - `group`
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `sortBy`
func (c *Client) UserListV1(group string, limit int, pageToken string, sortBy IdSortMode) (*UserResultsPage, error) {
	// Create the url.
	path := "/v1/users"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"group":      group,
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body UserResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// UserListV1AllPages: List users
//
// This method is a wrapper around the `UserListV1` method.
// This method returns all the pages at once.
//
// Parameters
// - `group`
// - `sortBy`
func (c *Client) UserListV1AllPages(group string, sortBy IdSortMode) (*[]User, error) {
	var allPages []User
	pageToken := ""
	limit := 100
	for {
		page, err := c.UserListV1(group, limit, pageToken, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// VpcFirewallRulesView: List firewall rules
//
// Parameters
// - `project`
// - `vpc`
func (c *Client) VpcFirewallRulesView(project NameOrId, vpc NameOrId) (*VpcFirewallRules, error) {
	// Create the url.
	path := "/v1/vpc-firewall-rules"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
		"vpc":     vpc.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body VpcFirewallRules
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// VpcFirewallRulesUpdate: Replace firewall rules
//
// Parameters
// - `project`
// - `vpc`
func (c *Client) VpcFirewallRulesUpdate(project NameOrId, vpc NameOrId, j *VpcFirewallRuleUpdateParams) (*VpcFirewallRules, error) {
	// Create the url.
	path := "/v1/vpc-firewall-rules"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("PUT", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
		"vpc":     vpc.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body VpcFirewallRules
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// VpcRouterRouteList: List routes
// List the routes associated with a router in a particular VPC.
//
// To iterate over all pages, use the `VpcRouterRouteListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `project`
// - `router`
// - `sortBy`
// - `vpc`
func (c *Client) VpcRouterRouteList(limit int, pageToken string, project NameOrId, router NameOrId, sortBy NameOrIdSortMode, vpc NameOrId) (*RouterRouteResultsPage, error) {
	// Create the url.
	path := "/v1/vpc-router-routes"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"project":    project.(string),
		"router":     router.(string),
		"sort_by":    string(sortBy),
		"vpc":        vpc.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body RouterRouteResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// VpcRouterRouteListAllPages: List routes
// List the routes associated with a router in a particular VPC.
//
// This method is a wrapper around the `VpcRouterRouteList` method.
// This method returns all the pages at once.
//
// Parameters
// - `project`
// - `router`
// - `sortBy`
// - `vpc`
func (c *Client) VpcRouterRouteListAllPages(project NameOrId, router NameOrId, sortBy NameOrIdSortMode, vpc NameOrId) (*[]RouterRoute, error) {
	var allPages []RouterRoute
	pageToken := ""
	limit := 100
	for {
		page, err := c.VpcRouterRouteList(limit, pageToken, project, router, sortBy, vpc)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// VpcRouterRouteCreate: Create a router
//
// Parameters
// - `project`
// - `router`
// - `vpc`
func (c *Client) VpcRouterRouteCreate(project NameOrId, router NameOrId, vpc NameOrId, j *RouterRouteCreate) (*RouterRoute, error) {
	// Create the url.
	path := "/v1/vpc-router-routes"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
		"router":  router.(string),
		"vpc":     vpc.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body RouterRoute
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// VpcRouterRouteView: Fetch a route
//
// Parameters
// - `project`
// - `route`
// - `router`
// - `vpc`
func (c *Client) VpcRouterRouteView(route NameOrId, project NameOrId, router NameOrId, vpc NameOrId) (*RouterRoute, error) {
	// Create the url.
	path := "/v1/vpc-router-routes/{{.route}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"route": route.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
		"router":  router.(string),
		"vpc":     vpc.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body RouterRoute
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// VpcRouterRouteUpdate: Update a route
//
// Parameters
// - `project`
// - `route`
// - `router`
// - `vpc`
func (c *Client) VpcRouterRouteUpdate(route NameOrId, project NameOrId, router NameOrId, vpc NameOrId, j *RouterRouteUpdate) (*RouterRoute, error) {
	// Create the url.
	path := "/v1/vpc-router-routes/{{.route}}"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("PUT", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"route": route.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
		"router":  router.(string),
		"vpc":     vpc.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body RouterRoute
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// VpcRouterRouteDelete: Delete a route
//
// Parameters
// - `project`
// - `route`
// - `router`
// - `vpc`
func (c *Client) VpcRouterRouteDelete(route NameOrId, project NameOrId, router NameOrId, vpc NameOrId) error {
	// Create the url.
	path := "/v1/vpc-router-routes/{{.route}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("DELETE", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"route": route.(string),
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
		"router":  router.(string),
		"vpc":     vpc.(string),
	}); err != nil {
		return fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// VpcRouterList: List routers
//
// To iterate over all pages, use the `VpcRouterListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `project`
// - `sortBy`
// - `vpc`
func (c *Client) VpcRouterList(limit int, pageToken string, project NameOrId, sortBy NameOrIdSortMode, vpc NameOrId) (*VpcRouterResultsPage, error) {
	// Create the url.
	path := "/v1/vpc-routers"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"project":    project.(string),
		"sort_by":    string(sortBy),
		"vpc":        vpc.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body VpcRouterResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// VpcRouterListAllPages: List routers
//
// This method is a wrapper around the `VpcRouterList` method.
// This method returns all the pages at once.
//
// Parameters
// - `project`
// - `sortBy`
// - `vpc`
func (c *Client) VpcRouterListAllPages(project NameOrId, sortBy NameOrIdSortMode, vpc NameOrId) (*[]VpcRouter, error) {
	var allPages []VpcRouter
	pageToken := ""
	limit := 100
	for {
		page, err := c.VpcRouterList(limit, pageToken, project, sortBy, vpc)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// VpcRouterCreate: Create a VPC router
//
// Parameters
// - `project`
// - `vpc`
func (c *Client) VpcRouterCreate(project NameOrId, vpc NameOrId, j *VpcRouterCreate) (*VpcRouter, error) {
	// Create the url.
	path := "/v1/vpc-routers"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
		"vpc":     vpc.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body VpcRouter
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// VpcRouterView: Get a router
//
// Parameters
// - `project`
// - `router`
// - `vpc`
func (c *Client) VpcRouterView(router NameOrId, project NameOrId, vpc NameOrId) (*VpcRouter, error) {
	// Create the url.
	path := "/v1/vpc-routers/{{.router}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"router": router.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
		"vpc":     vpc.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body VpcRouter
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// VpcRouterUpdate: Update a router
//
// Parameters
// - `project`
// - `router`
// - `vpc`
func (c *Client) VpcRouterUpdate(router NameOrId, project NameOrId, vpc NameOrId, j *VpcRouterUpdate) (*VpcRouter, error) {
	// Create the url.
	path := "/v1/vpc-routers/{{.router}}"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("PUT", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"router": router.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
		"vpc":     vpc.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body VpcRouter
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// VpcRouterDelete: Delete a router
//
// Parameters
// - `project`
// - `router`
// - `vpc`
func (c *Client) VpcRouterDelete(router NameOrId, project NameOrId, vpc NameOrId) error {
	// Create the url.
	path := "/v1/vpc-routers/{{.router}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("DELETE", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"router": router.(string),
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
		"vpc":     vpc.(string),
	}); err != nil {
		return fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// VpcSubnetList: Fetch a subnet
//
// To iterate over all pages, use the `VpcSubnetListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `project`
// - `sortBy`
// - `vpc`
func (c *Client) VpcSubnetList(limit int, pageToken string, project NameOrId, sortBy NameOrIdSortMode, vpc NameOrId) (*VpcSubnetResultsPage, error) {
	// Create the url.
	path := "/v1/vpc-subnets"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"project":    project.(string),
		"sort_by":    string(sortBy),
		"vpc":        vpc.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body VpcSubnetResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// VpcSubnetListAllPages: Fetch a subnet
//
// This method is a wrapper around the `VpcSubnetList` method.
// This method returns all the pages at once.
//
// Parameters
// - `project`
// - `sortBy`
// - `vpc`
func (c *Client) VpcSubnetListAllPages(project NameOrId, sortBy NameOrIdSortMode, vpc NameOrId) (*[]VpcSubnet, error) {
	var allPages []VpcSubnet
	pageToken := ""
	limit := 100
	for {
		page, err := c.VpcSubnetList(limit, pageToken, project, sortBy, vpc)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// VpcSubnetCreate: Create a subnet
//
// Parameters
// - `project`
// - `vpc`
func (c *Client) VpcSubnetCreate(project NameOrId, vpc NameOrId, j *VpcSubnetCreate) (*VpcSubnet, error) {
	// Create the url.
	path := "/v1/vpc-subnets"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
		"vpc":     vpc.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body VpcSubnet
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// VpcSubnetView: Fetch a subnet
//
// Parameters
// - `project`
// - `subnet`
// - `vpc`
func (c *Client) VpcSubnetView(subnet NameOrId, project NameOrId, vpc NameOrId) (*VpcSubnet, error) {
	// Create the url.
	path := "/v1/vpc-subnets/{{.subnet}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"subnet": subnet.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
		"vpc":     vpc.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body VpcSubnet
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// VpcSubnetUpdate: Update a subnet
//
// Parameters
// - `project`
// - `subnet`
// - `vpc`
func (c *Client) VpcSubnetUpdate(subnet NameOrId, project NameOrId, vpc NameOrId, j *VpcSubnetUpdate) (*VpcSubnet, error) {
	// Create the url.
	path := "/v1/vpc-subnets/{{.subnet}}"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("PUT", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"subnet": subnet.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
		"vpc":     vpc.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body VpcSubnet
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// VpcSubnetDelete: Delete a subnet
//
// Parameters
// - `project`
// - `subnet`
// - `vpc`
func (c *Client) VpcSubnetDelete(subnet NameOrId, project NameOrId, vpc NameOrId) error {
	// Create the url.
	path := "/v1/vpc-subnets/{{.subnet}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("DELETE", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"subnet": subnet.(string),
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
		"vpc":     vpc.(string),
	}); err != nil {
		return fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}

// VpcSubnetListNetworkInterfaces: List network interfaces
//
// To iterate over all pages, use the `VpcSubnetListNetworkInterfacesAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `project`
// - `sortBy`
// - `subnet`
// - `vpc`
func (c *Client) VpcSubnetListNetworkInterfaces(subnet NameOrId, limit int, pageToken string, project NameOrId, sortBy NameOrIdSortMode, vpc NameOrId) (*NetworkInterfaceResultsPage, error) {
	// Create the url.
	path := "/v1/vpc-subnets/{{.subnet}}/network-interfaces"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"subnet": subnet.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"project":    project.(string),
		"sort_by":    string(sortBy),
		"vpc":        vpc.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body NetworkInterfaceResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// VpcSubnetListNetworkInterfacesAllPages: List network interfaces
//
// This method is a wrapper around the `VpcSubnetListNetworkInterfaces` method.
// This method returns all the pages at once.
//
// Parameters
// - `project`
// - `sortBy`
// - `subnet`
// - `vpc`
func (c *Client) VpcSubnetListNetworkInterfacesAllPages(subnet NameOrId, project NameOrId, sortBy NameOrIdSortMode, vpc NameOrId) (*[]NetworkInterface, error) {
	var allPages []NetworkInterface
	pageToken := ""
	limit := 100
	for {
		page, err := c.VpcSubnetListNetworkInterfaces(subnet, limit, pageToken, project, sortBy, vpc)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// VpcList: List VPCs
//
// To iterate over all pages, use the `VpcListAllPages` method, instead.
//
// Parameters
// - `limit` Maximum number of items returned by a single call
// - `pageToken` Token returned by previous call to retrieve the subsequent page
// - `project`
// - `sortBy`
func (c *Client) VpcList(limit int, pageToken string, project NameOrId, sortBy NameOrIdSortMode) (*VpcResultsPage, error) {
	// Create the url.
	path := "/v1/vpcs"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"project":    project.(string),
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body VpcResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// VpcListAllPages: List VPCs
//
// This method is a wrapper around the `VpcList` method.
// This method returns all the pages at once.
//
// Parameters
// - `project`
// - `sortBy`
func (c *Client) VpcListAllPages(project NameOrId, sortBy NameOrIdSortMode) (*[]Vpc, error) {
	var allPages []Vpc
	pageToken := ""
	limit := 100
	for {
		page, err := c.VpcList(limit, pageToken, project, sortBy)
		if err != nil {
			return nil, err
		}
		allPages = append(allPages, page.Items...)
		if page.NextPage == "" || page.NextPage == pageToken {
			break
		}
		pageToken = page.NextPage
	}

	return &allPages, nil
}

// VpcCreate: Create a VPC
//
// Parameters
// - `project`
func (c *Client) VpcCreate(project NameOrId, j *VpcCreate) (*Vpc, error) {
	// Create the url.
	path := "/v1/vpcs"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Vpc
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// VpcView: Fetch a VPC
//
// Parameters
// - `project`
// - `vpc`
func (c *Client) VpcView(vpc NameOrId, project NameOrId) (*Vpc, error) {
	// Create the url.
	path := "/v1/vpcs/{{.vpc}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"vpc": vpc.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Vpc
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// VpcUpdate: Update a VPC
//
// Parameters
// - `project`
// - `vpc`
func (c *Client) VpcUpdate(vpc NameOrId, project NameOrId, j *VpcUpdate) (*Vpc, error) {
	// Create the url.
	path := "/v1/vpcs/{{.vpc}}"
	uri := resolveRelative(c.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(j); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("PUT", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"vpc": vpc.(string),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return nil, fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}

	var body Vpc
	if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &body, nil
}

// VpcDelete: Delete a VPC
//
// Parameters
// - `project`
// - `vpc`
func (c *Client) VpcDelete(vpc NameOrId, project NameOrId) error {
	// Create the url.
	path := "/v1/vpcs/{{.vpc}}"
	uri := resolveRelative(c.server, path)

	// Create the request.
	req, err := http.NewRequest("DELETE", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"vpc": vpc.(string),
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Add query if any
	if err := addQueries(req.URL, map[string]string{
		"project": project.(string),
	}); err != nil {
		return fmt.Errorf("adding queries to URL failed: %v", err)
	}

	// Send the request.
	resp, err := c.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	return nil
}
