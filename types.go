// Code generated by `generate`. DO NOT EDIT.

package oxide

import "time"

// ByteCount is a count of bytes, typically used either for memory or storage capacity
//
// The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.
type ByteCount int

// DatumType is the type of an individual datum of a metric.
type DatumType string

const (
	// DatumTypeBool represents the DatumType `"Bool"`.
	DatumTypeBool DatumType = "Bool"
	// DatumTypeI64 represents the DatumType `"I64"`.
	DatumTypeI64 DatumType = "I64"
	// DatumTypeF64 represents the DatumType `"F64"`.
	DatumTypeF64 DatumType = "F64"
	// DatumTypeString represents the DatumType `"String"`.
	DatumTypeString DatumType = "String"
	// DatumTypeBytes represents the DatumType `"Bytes"`.
	DatumTypeBytes DatumType = "Bytes"
	// DatumTypeCumulativeI64 represents the DatumType `"CumulativeI64"`.
	DatumTypeCumulativeI64 DatumType = "CumulativeI64"
	// DatumTypeCumulativeF64 represents the DatumType `"CumulativeF64"`.
	DatumTypeCumulativeF64 DatumType = "CumulativeF64"
	// DatumTypeHistogramI64 represents the DatumType `"HistogramI64"`.
	DatumTypeHistogramI64 DatumType = "HistogramI64"
	// DatumTypeHistogramF64 represents the DatumType `"HistogramF64"`.
	DatumTypeHistogramF64 DatumType = "HistogramF64"
)

// Disk is client view of an [`Disk`]
type Disk struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	DevicePath  string `json:"device_path,omitempty" yaml:"device_path,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name      Name   `json:"name,omitempty" yaml:"name,omitempty"`
	ProjectID string `json:"project_id,omitempty" yaml:"project_id,omitempty"`
	// Size is a count of bytes, typically used either for memory or storage capacity
	//
	// The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.
	Size       ByteCount `json:"size,omitempty" yaml:"size,omitempty"`
	SnapshotID string    `json:"snapshot_id,omitempty" yaml:"snapshot_id,omitempty"`
	// State is state of a Disk (primarily: attached or not)
	State DiskState `json:"state,omitempty" yaml:"state,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// DiskCreate is create-time parameters for a [`Disk`]
type DiskCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Size is size of the Disk
	Size ByteCount `json:"size,omitempty" yaml:"size,omitempty"`
	// SnapshotID is id for snapshot from which the Disk should be created, if any
	SnapshotID string `json:"snapshot_id,omitempty" yaml:"snapshot_id,omitempty"`
}

// DiskIdentifier is parameters for the [`Disk`] to be attached or detached to an instance
type DiskIdentifier struct {
	// Disk is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Disk Name `json:"disk,omitempty" yaml:"disk,omitempty"`
}

// DiskResultsPage is a single page of results
type DiskResultsPage struct {
	// Items is list of items on this page of results
	Items []Disk `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// DiskStateCreating is disk is being initialized
type DiskStateCreating struct {
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// DiskStateState is the type definition for a DiskStateState.
type DiskStateState string

const (
	// DiskStateStateCreating represents the DiskStateState `"creating"`.
	DiskStateStateCreating DiskStateState = "creating"
)

// DiskStateDetached is disk is ready but detached from any Instance
type DiskStateDetached struct {
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

const (
	// DiskStateStateDetached represents the DiskStateState `"detached"`.
	DiskStateStateDetached DiskStateState = "detached"
)

// DiskStateAttaching is disk is being attached to the given Instance
type DiskStateAttaching struct {
	Instance string         `json:"instance,omitempty" yaml:"instance,omitempty"`
	State    DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

const (
	// DiskStateStateAttaching represents the DiskStateState `"attaching"`.
	DiskStateStateAttaching DiskStateState = "attaching"
)

// DiskStateAttached is disk is attached to the given Instance
type DiskStateAttached struct {
	Instance string         `json:"instance,omitempty" yaml:"instance,omitempty"`
	State    DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

const (
	// DiskStateStateAttached represents the DiskStateState `"attached"`.
	DiskStateStateAttached DiskStateState = "attached"
)

// DiskStateDetaching is disk is being detached from the given Instance
type DiskStateDetaching struct {
	Instance string         `json:"instance,omitempty" yaml:"instance,omitempty"`
	State    DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

const (
	// DiskStateStateDetaching represents the DiskStateState `"detaching"`.
	DiskStateStateDetaching DiskStateState = "detaching"
)

// DiskStateDestroyed is disk has been destroyed
type DiskStateDestroyed struct {
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

const (
	// DiskStateStateDestroyed represents the DiskStateState `"destroyed"`.
	DiskStateStateDestroyed DiskStateState = "destroyed"
)

// DiskStateFaulted is disk is unavailable
type DiskStateFaulted struct {
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

const (
	// DiskStateStateFaulted represents the DiskStateState `"faulted"`.
	DiskStateStateFaulted DiskStateState = "faulted"
)

// DiskState is state of a Disk (primarily: attached or not)
type DiskState struct {
	State    string `json:"state,omitempty" yaml:"state,omitempty"`
	Instance string `json:"instance,omitempty" yaml:"instance,omitempty"`
}

// FieldSchema is the name and type information for a field of a timeseries schema.
type FieldSchema struct {
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// Source is the source from which a field is derived, the target or metric.
	Source FieldSource `json:"source,omitempty" yaml:"source,omitempty"`
	// Ty is the `FieldType` identifies the data type of a target or metric field.
	Ty FieldType `json:"ty,omitempty" yaml:"ty,omitempty"`
}

// FieldSource is the source from which a field is derived, the target or metric.
type FieldSource string

const (
	// FieldSourceTarget represents the FieldSource `"Target"`.
	FieldSourceTarget FieldSource = "Target"
	// FieldSourceMetric represents the FieldSource `"Metric"`.
	FieldSourceMetric FieldSource = "Metric"
)

// FieldType is the `FieldType` identifies the data type of a target or metric field.
type FieldType string

const (
	// FieldTypeString represents the FieldType `"String"`.
	FieldTypeString FieldType = "String"
	// FieldTypeI64 represents the FieldType `"I64"`.
	FieldTypeI64 FieldType = "I64"
	// FieldTypeIpAddr represents the FieldType `"IpAddr"`.
	FieldTypeIpAddr FieldType = "IpAddr"
	// FieldTypeUuid represents the FieldType `"Uuid"`.
	FieldTypeUuid FieldType = "Uuid"
	// FieldTypeBool represents the FieldType `"Bool"`.
	FieldTypeBool FieldType = "Bool"
)

// IdSortMode is supported set of sort modes for scanning by id only.
//
// Currently, we only support scanning in ascending order.
type IdSortMode string

const (
	// IdSortModeIdAscending represents the IdSortMode `"id-ascending"`.
	IdSortModeIdAscending IdSortMode = "id-ascending"
)

// Instance is client view of an [`Instance`]
type Instance struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Hostname is rFC1035-compliant hostname for the Instance.
	Hostname string `json:"hostname,omitempty" yaml:"hostname,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Memory is memory allocated for this Instance
	Memory ByteCount `json:"memory,omitempty" yaml:"memory,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// NCPUs is number of CPUs allocated for this Instance
	NCPUs InstanceCPUCount `json:"ncpus,omitempty" yaml:"ncpus,omitempty"`
	// ProjectID is id for the project containing this Instance
	ProjectID string `json:"project_id,omitempty" yaml:"project_id,omitempty"`
	// RunState is running state of an Instance (primarily: booted or stopped)
	//
	// This typically reflects whether it's starting, running, stopping, or stopped, but also includes states related to the Instance's lifecycle
	RunState InstanceState `json:"run_state,omitempty" yaml:"run_state,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified        *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	TimeRunStateUpdated *time.Time `json:"time_run_state_updated,omitempty" yaml:"time_run_state_updated,omitempty"`
}

// InstanceCPUCount is the number of CPUs in an Instance
type InstanceCPUCount int

// InstanceCreate is create-time parameters for an [`Instance`]
type InstanceCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	Hostname    string `json:"hostname,omitempty" yaml:"hostname,omitempty"`
	// Memory is a count of bytes, typically used either for memory or storage capacity
	//
	// The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.
	Memory ByteCount `json:"memory,omitempty" yaml:"memory,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// NCPUs is the number of CPUs in an Instance
	NCPUs InstanceCPUCount `json:"ncpus,omitempty" yaml:"ncpus,omitempty"`
}

// InstanceMigrate is migration parameters for an [`Instance`]
type InstanceMigrate struct {
	DstSledUuid string `json:"dst_sled_uuid,omitempty" yaml:"dst_sled_uuid,omitempty"`
}

// InstanceResultsPage is a single page of results
type InstanceResultsPage struct {
	// Items is list of items on this page of results
	Items []Instance `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// InstanceState is running state of an Instance (primarily: booted or stopped)
//
// This typically reflects whether it's starting, running, stopping, or stopped, but also includes states related to the Instance's lifecycle
type InstanceState string

const (
	// InstanceStateCreating represents the InstanceState `"creating"`.
	InstanceStateCreating InstanceState = "creating"
	// InstanceStateStarting represents the InstanceState `"starting"`.
	InstanceStateStarting InstanceState = "starting"
	// InstanceStateRunning represents the InstanceState `"running"`.
	InstanceStateRunning InstanceState = "running"
	// InstanceStateStopping represents the InstanceState `"stopping"`.
	InstanceStateStopping InstanceState = "stopping"
	// InstanceStateStopped represents the InstanceState `"stopped"`.
	InstanceStateStopped InstanceState = "stopped"
	// InstanceStateRebooting represents the InstanceState `"rebooting"`.
	InstanceStateRebooting InstanceState = "rebooting"
	// InstanceStateMigrating represents the InstanceState `"migrating"`.
	InstanceStateMigrating InstanceState = "migrating"
	// InstanceStateRepairing represents the InstanceState `"repairing"`.
	InstanceStateRepairing InstanceState = "repairing"
	// InstanceStateFailed represents the InstanceState `"failed"`.
	InstanceStateFailed InstanceState = "failed"
	// InstanceStateDestroyed represents the InstanceState `"destroyed"`.
	InstanceStateDestroyed InstanceState = "destroyed"
)

// IPv4Net is an IPv4 subnet, including prefix and subnet mask
type IPv4Net string

// IPv6Net is an IPv6 subnet, including prefix and subnet mask
type IPv6Net string

// L4PortRange is an inclusive-inclusive range of IP ports. The second port may be omitted to represent a single port
type L4PortRange string

// LoginParams is the type definition for a LoginParams.
type LoginParams struct {
	Username string `json:"username,omitempty" yaml:"username,omitempty"`
}

// MacAddr is a Media Access Control address, in EUI-48 format
type MacAddr string

// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
type Name string

// NameOrIdSortMode is supported set of sort modes for scanning by name or id
type NameOrIdSortMode string

const (
	// NameOrIdSortModeNameAscending represents the NameOrIdSortMode `"name-ascending"`.
	NameOrIdSortModeNameAscending NameOrIdSortMode = "name-ascending"
	// NameOrIdSortModeNameDescending represents the NameOrIdSortMode `"name-descending"`.
	NameOrIdSortModeNameDescending NameOrIdSortMode = "name-descending"
	// NameOrIdSortModeIdAscending represents the NameOrIdSortMode `"id-ascending"`.
	NameOrIdSortModeIdAscending NameOrIdSortMode = "id-ascending"
)

// NameSortMode is supported set of sort modes for scanning by name only
//
// Currently, we only support scanning in ascending order.
type NameSortMode string

const (
	// NameSortModeNameAscending represents the NameSortMode `"name-ascending"`.
	NameSortModeNameAscending NameSortMode = "name-ascending"
)

// NetworkInterface is a `NetworkInterface` represents a virtual network interface device.
type NetworkInterface struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// InstanceID is the Instance to which the interface belongs.
	InstanceID string `json:"instance_id,omitempty" yaml:"instance_id,omitempty"`
	// Ip is the IP address assigned to this interface.
	Ip string `json:"ip,omitempty" yaml:"ip,omitempty"`
	// Mac is the MAC address assigned to this interface.
	Mac MacAddr `json:"mac,omitempty" yaml:"mac,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// SubnetID is the subnet to which the interface belongs.
	SubnetID string `json:"subnet_id,omitempty" yaml:"subnet_id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// VPCId is the VPC to which the interface belongs.
	VPCId string `json:"vpc_id,omitempty" yaml:"vpc_id,omitempty"`
}

// NetworkInterfaceResultsPage is a single page of results
type NetworkInterfaceResultsPage struct {
	// Items is list of items on this page of results
	Items []NetworkInterface `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Organization is client view of an [`Organization`]
type Organization struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// OrganizationCreate is create-time parameters for an [`Organization`]
type OrganizationCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// OrganizationResultsPage is a single page of results
type OrganizationResultsPage struct {
	// Items is list of items on this page of results
	Items []Organization `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// OrganizationUpdate is updateable properties of an [`Organization`]
type OrganizationUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	Name        Name   `json:"name,omitempty" yaml:"name,omitempty"`
}

// Project is client view of a [`Project`]
type Project struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name           Name   `json:"name,omitempty" yaml:"name,omitempty"`
	OrganizationID string `json:"organization_id,omitempty" yaml:"organization_id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// ProjectCreate is create-time parameters for a [`Project`]
type ProjectCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// ProjectResultsPage is a single page of results
type ProjectResultsPage struct {
	// Items is list of items on this page of results
	Items []Project `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// ProjectUpdate is updateable properties of a [`Project`]
type ProjectUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	Name        Name   `json:"name,omitempty" yaml:"name,omitempty"`
}

// Rack is client view of an [`Rack`]
type Rack struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// RackResultsPage is a single page of results
type RackResultsPage struct {
	// Items is list of items on this page of results
	Items []Rack `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Role is client view of a [`Role`]
type Role struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is role names consist of two string components separated by dot (".").
	Name RoleName `json:"name,omitempty" yaml:"name,omitempty"`
}

// RoleName is role names consist of two string components separated by dot (".").
type RoleName string

// RoleResultsPage is a single page of results
type RoleResultsPage struct {
	// Items is list of items on this page of results
	Items []Role `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// RouteDestinationIp is the type definition for a RouteDestinationIp.
type RouteDestinationIp struct {
	Type  RouteDestinationType `json:"type,omitempty" yaml:"type,omitempty"`
	Value string               `json:"value,omitempty" yaml:"value,omitempty"`
}

// RouteDestinationType is the type definition for a RouteDestinationType.
type RouteDestinationType string

const (
	// RouteDestinationTypeIp represents the RouteDestinationType `"ip"`.
	RouteDestinationTypeIp RouteDestinationType = "ip"
)

// RouteDestinationVPC is the type definition for a RouteDestinationVPC.
type RouteDestinationVPC struct {
	Type RouteDestinationType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// RouteDestinationTypeVpc represents the RouteDestinationType `"vpc"`.
	RouteDestinationTypeVpc RouteDestinationType = "vpc"
)

// RouteDestinationSubnet is the type definition for a RouteDestinationSubnet.
type RouteDestinationSubnet struct {
	Type RouteDestinationType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// RouteDestinationTypeSubnet represents the RouteDestinationType `"subnet"`.
	RouteDestinationTypeSubnet RouteDestinationType = "subnet"
)

// RouteDestination is a subset of [`NetworkTarget`], `RouteDestination` specifies the kind of network traffic that will be matched to be forwarded to the [`RouteTarget`].
type RouteDestination struct {
	Type  string `json:"type,omitempty" yaml:"type,omitempty"`
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

// RouteTargetIp is the type definition for a RouteTargetIp.
type RouteTargetIp struct {
	Type  RouteTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	Value string          `json:"value,omitempty" yaml:"value,omitempty"`
}

// RouteTargetType is the type definition for a RouteTargetType.
type RouteTargetType string

const (
	// RouteTargetTypeIp represents the RouteTargetType `"ip"`.
	RouteTargetTypeIp RouteTargetType = "ip"
)

// RouteTargetVPC is the type definition for a RouteTargetVPC.
type RouteTargetVPC struct {
	Type RouteTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// RouteTargetTypeVpc represents the RouteTargetType `"vpc"`.
	RouteTargetTypeVpc RouteTargetType = "vpc"
)

// RouteTargetSubnet is the type definition for a RouteTargetSubnet.
type RouteTargetSubnet struct {
	Type RouteTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// RouteTargetTypeSubnet represents the RouteTargetType `"subnet"`.
	RouteTargetTypeSubnet RouteTargetType = "subnet"
)

// RouteTargetInstance is the type definition for a RouteTargetInstance.
type RouteTargetInstance struct {
	Type RouteTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// RouteTargetTypeInstance represents the RouteTargetType `"instance"`.
	RouteTargetTypeInstance RouteTargetType = "instance"
)

// RouteTargetInternetGateway is the type definition for a RouteTargetInternetGateway.
type RouteTargetInternetGateway struct {
	Type RouteTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// RouteTargetTypeInternetGateway represents the RouteTargetType `"internet_gateway"`.
	RouteTargetTypeInternetGateway RouteTargetType = "internet_gateway"
)

// RouteTarget is a subset of [`NetworkTarget`], `RouteTarget` specifies all possible targets that a route can forward to.
type RouteTarget struct {
	Type  string `json:"type,omitempty" yaml:"type,omitempty"`
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

// RouterRoute is a route defines a rule that governs where traffic should be sent based on its destination.
type RouterRoute struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Destination is a subset of [`NetworkTarget`], `RouteDestination` specifies the kind of network traffic that will be matched to be forwarded to the [`RouteTarget`].
	Destination RouteDestination `json:"destination,omitempty" yaml:"destination,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Kind is describes the kind of router. Set at creation. `read-only`
	Kind RouterRouteKind `json:"kind,omitempty" yaml:"kind,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// RouterID is the VPC Router to which the route belongs.
	RouterID string `json:"router_id,omitempty" yaml:"router_id,omitempty"`
	// Target is a subset of [`NetworkTarget`], `RouteTarget` specifies all possible targets that a route can forward to.
	Target RouteTarget `json:"target,omitempty" yaml:"target,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// RouterRouteCreateParams is create-time parameters for a [`RouterRoute`]
type RouterRouteCreateParams struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Destination is a subset of [`NetworkTarget`], `RouteDestination` specifies the kind of network traffic that will be matched to be forwarded to the [`RouteTarget`].
	Destination RouteDestination `json:"destination,omitempty" yaml:"destination,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Target is a subset of [`NetworkTarget`], `RouteTarget` specifies all possible targets that a route can forward to.
	Target RouteTarget `json:"target,omitempty" yaml:"target,omitempty"`
}

// RouterRouteKind is the classification of a [`RouterRoute`] as defined by the system. The kind determines certain attributes such as if the route is modifiable and describes how or where the route was created.
//
// See [RFD-21](https://rfd.shared.oxide.computer/rfd/0021#concept-router) for more context
type RouterRouteKind string

const (
	// RouterRouteKindDefault represents the RouterRouteKind `"default"`.
	RouterRouteKindDefault RouterRouteKind = "default"
	// RouterRouteKindVpcSubnet represents the RouterRouteKind `"vpc_subnet"`.
	RouterRouteKindVpcSubnet RouterRouteKind = "vpc_subnet"
	// RouterRouteKindVpcPeering represents the RouterRouteKind `"vpc_peering"`.
	RouterRouteKindVpcPeering RouterRouteKind = "vpc_peering"
	// RouterRouteKindCustom represents the RouterRouteKind `"custom"`.
	RouterRouteKindCustom RouterRouteKind = "custom"
)

// RouterRouteResultsPage is a single page of results
type RouterRouteResultsPage struct {
	// Items is list of items on this page of results
	Items []RouterRoute `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// RouterRouteUpdateParams is updateable properties of a [`RouterRoute`]
type RouterRouteUpdateParams struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Destination is a subset of [`NetworkTarget`], `RouteDestination` specifies the kind of network traffic that will be matched to be forwarded to the [`RouteTarget`].
	Destination RouteDestination `json:"destination,omitempty" yaml:"destination,omitempty"`
	Name        Name             `json:"name,omitempty" yaml:"name,omitempty"`
	// Target is a subset of [`NetworkTarget`], `RouteTarget` specifies all possible targets that a route can forward to.
	Target RouteTarget `json:"target,omitempty" yaml:"target,omitempty"`
}

// Saga is the type definition for a Saga.
type Saga struct {
	ID    string    `json:"id,omitempty" yaml:"id,omitempty"`
	State SagaState `json:"state,omitempty" yaml:"state,omitempty"`
}

// SagaErrorInfoActionFailed is the type definition for a SagaErrorInfoActionFailed.
type SagaErrorInfoActionFailed struct {
	Error       SagaErrorInfoError `json:"error,omitempty" yaml:"error,omitempty"`
	SourceError interface{}        `json:"source_error,omitempty" yaml:"source_error,omitempty"`
}

// SagaErrorInfoError is the type definition for a SagaErrorInfoError.
type SagaErrorInfoError string

const (
	// SagaErrorInfoErrorActionFailed represents the SagaErrorInfoError `"action_failed"`.
	SagaErrorInfoErrorActionFailed SagaErrorInfoError = "action_failed"
)

// SagaErrorInfoDeserializeFailed is the type definition for a SagaErrorInfoDeserializeFailed.
type SagaErrorInfoDeserializeFailed struct {
	Error   SagaErrorInfoError `json:"error,omitempty" yaml:"error,omitempty"`
	Message string             `json:"message,omitempty" yaml:"message,omitempty"`
}

const (
	// SagaErrorInfoErrorDeserializeFailed represents the SagaErrorInfoError `"deserialize_failed"`.
	SagaErrorInfoErrorDeserializeFailed SagaErrorInfoError = "deserialize_failed"
)

// SagaErrorInfoInjectedError is the type definition for a SagaErrorInfoInjectedError.
type SagaErrorInfoInjectedError struct {
	Error SagaErrorInfoError `json:"error,omitempty" yaml:"error,omitempty"`
}

const (
	// SagaErrorInfoErrorInjectedError represents the SagaErrorInfoError `"injected_error"`.
	SagaErrorInfoErrorInjectedError SagaErrorInfoError = "injected_error"
)

// SagaErrorInfoSerializeFailed is the type definition for a SagaErrorInfoSerializeFailed.
type SagaErrorInfoSerializeFailed struct {
	Error   SagaErrorInfoError `json:"error,omitempty" yaml:"error,omitempty"`
	Message string             `json:"message,omitempty" yaml:"message,omitempty"`
}

const (
	// SagaErrorInfoErrorSerializeFailed represents the SagaErrorInfoError `"serialize_failed"`.
	SagaErrorInfoErrorSerializeFailed SagaErrorInfoError = "serialize_failed"
)

// SagaErrorInfoSubsagaCreateFailed is the type definition for a SagaErrorInfoSubsagaCreateFailed.
type SagaErrorInfoSubsagaCreateFailed struct {
	Error   SagaErrorInfoError `json:"error,omitempty" yaml:"error,omitempty"`
	Message string             `json:"message,omitempty" yaml:"message,omitempty"`
}

const (
	// SagaErrorInfoErrorSubsagaCreateFailed represents the SagaErrorInfoError `"subsaga_create_failed"`.
	SagaErrorInfoErrorSubsagaCreateFailed SagaErrorInfoError = "subsaga_create_failed"
)

// SagaErrorInfo is the type definition for a SagaErrorInfo.
type SagaErrorInfo struct {
	Error       string      `json:"error,omitempty" yaml:"error,omitempty"`
	SourceError interface{} `json:"source_error,omitempty" yaml:"source_error,omitempty"`
	Message     string      `json:"message,omitempty" yaml:"message,omitempty"`
}

// SagaResultsPage is a single page of results
type SagaResultsPage struct {
	// Items is list of items on this page of results
	Items []Saga `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// SagaStateRunning is the type definition for a SagaStateRunning.
type SagaStateRunning struct {
	State SagaStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// SagaStateState is the type definition for a SagaStateState.
type SagaStateState string

const (
	// SagaStateStateRunning represents the SagaStateState `"running"`.
	SagaStateStateRunning SagaStateState = "running"
)

// SagaStateSucceeded is the type definition for a SagaStateSucceeded.
type SagaStateSucceeded struct {
	State SagaStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

const (
	// SagaStateStateSucceeded represents the SagaStateState `"succeeded"`.
	SagaStateStateSucceeded SagaStateState = "succeeded"
)

// SagaStateFailed is the type definition for a SagaStateFailed.
type SagaStateFailed struct {
	ErrorInfo     SagaErrorInfo  `json:"error_info,omitempty" yaml:"error_info,omitempty"`
	ErrorNodeName string         `json:"error_node_name,omitempty" yaml:"error_node_name,omitempty"`
	State         SagaStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

const (
	// SagaStateStateFailed represents the SagaStateState `"failed"`.
	SagaStateStateFailed SagaStateState = "failed"
)

// SagaState is the type definition for a SagaState.
type SagaState struct {
	State         string        `json:"state,omitempty" yaml:"state,omitempty"`
	ErrorInfo     SagaErrorInfo `json:"error_info,omitempty" yaml:"error_info,omitempty"`
	ErrorNodeName string        `json:"error_node_name,omitempty" yaml:"error_node_name,omitempty"`
}

// SessionUser is client view of currently authed user.
type SessionUser struct {
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
}

// Sled is client view of an [`Sled`]
type Sled struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name           Name   `json:"name,omitempty" yaml:"name,omitempty"`
	ServiceAddress string `json:"service_address,omitempty" yaml:"service_address,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// SledResultsPage is a single page of results
type SledResultsPage struct {
	// Items is list of items on this page of results
	Items []Sled `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// TimeseriesName is names are constructed by concatenating the target and metric names with ':'. Target and metric names must be lowercase alphanumeric characters with '_' separating words.
type TimeseriesName string

// TimeseriesSchema is the schema for a timeseries.
//
// This includes the name of the timeseries, as well as the datum type of its metric and the schema for each field.
type TimeseriesSchema struct {
	Created *time.Time `json:"created,omitempty" yaml:"created,omitempty"`
	// DatumType is the type of an individual datum of a metric.
	DatumType   DatumType     `json:"datum_type,omitempty" yaml:"datum_type,omitempty"`
	FieldSchema []FieldSchema `json:"field_schema,omitempty" yaml:"field_schema,omitempty"`
	// TimeseriesName is names are constructed by concatenating the target and metric names with ':'. Target and metric names must be lowercase alphanumeric characters with '_' separating words.
	TimeseriesName TimeseriesName `json:"timeseries_name,omitempty" yaml:"timeseries_name,omitempty"`
}

// TimeseriesSchemaResultsPage is a single page of results
type TimeseriesSchemaResultsPage struct {
	// Items is list of items on this page of results
	Items []TimeseriesSchema `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// User is client view of a [`User`]
type User struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// UserResultsPage is a single page of results
type UserResultsPage struct {
	// Items is list of items on this page of results
	Items []User `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// VPC is client view of a [`Vpc`]
type VPC struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// DnsName is the name used for the VPC in DNS.
	DnsName Name `json:"dns_name,omitempty" yaml:"dns_name,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// ProjectID is id for the project containing this VPC
	ProjectID string `json:"project_id,omitempty" yaml:"project_id,omitempty"`
	// SystemRouterID is id for the system router where subnet default routes are registered
	SystemRouterID string `json:"system_router_id,omitempty" yaml:"system_router_id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// VPCCreate is create-time parameters for a [`Vpc`]
type VPCCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// DnsName is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	DnsName Name `json:"dns_name,omitempty" yaml:"dns_name,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// FirewallRule is a single rule in a VPC firewall
type FirewallRule struct {
	// Action is whether traffic matching the rule should be allowed or dropped
	Action FirewallRuleAction `json:"action,omitempty" yaml:"action,omitempty"`
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Direction is whether this rule is for incoming or outgoing traffic
	Direction FirewallRuleDirection `json:"direction,omitempty" yaml:"direction,omitempty"`
	// Filters is reductions on the scope of the rule
	Filters FirewallRuleFilter `json:"filters,omitempty" yaml:"filters,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Priority is the relative priority of this rule
	Priority int `json:"priority,omitempty" yaml:"priority,omitempty"`
	// Status is whether this rule is in effect
	Status FirewallRuleStatus `json:"status,omitempty" yaml:"status,omitempty"`
	// Targets is list of sets of instances that the rule applies to
	Targets []FirewallRuleTarget `json:"targets,omitempty" yaml:"targets,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// FirewallRuleAction is the type definition for a FirewallRuleAction.
type FirewallRuleAction string

const (
	// FirewallRuleActionAllow represents the FirewallRuleAction `"allow"`.
	FirewallRuleActionAllow FirewallRuleAction = "allow"
	// FirewallRuleActionDeny represents the FirewallRuleAction `"deny"`.
	FirewallRuleActionDeny FirewallRuleAction = "deny"
)

// FirewallRuleDirection is the type definition for a FirewallRuleDirection.
type FirewallRuleDirection string

const (
	// FirewallRuleDirectionInbound represents the FirewallRuleDirection `"inbound"`.
	FirewallRuleDirectionInbound FirewallRuleDirection = "inbound"
	// FirewallRuleDirectionOutbound represents the FirewallRuleDirection `"outbound"`.
	FirewallRuleDirectionOutbound FirewallRuleDirection = "outbound"
)

// FirewallRuleFilter is filter for a firewall rule. A given packet must match every field that is present for the rule to apply to it. A packet matches a field if any entry in that field matches the packet.
type FirewallRuleFilter struct {
	// Hosts is if present, the sources (if incoming) or destinations (if outgoing) this rule applies to.
	Hosts []FirewallRuleHostFilter `json:"hosts,omitempty" yaml:"hosts,omitempty"`
	// Ports is if present, the destination ports this rule applies to.
	Ports []L4PortRange `json:"ports,omitempty" yaml:"ports,omitempty"`
	// Protocols is if present, the networking protocols this rule applies to.
	Protocols []FirewallRuleProtocol `json:"protocols,omitempty" yaml:"protocols,omitempty"`
}

// FirewallRuleHostFilterVPC is the type definition for a FirewallRuleHostFilterVPC.
type FirewallRuleHostFilterVPC struct {
	Type FirewallRuleHostFilterType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// FirewallRuleHostFilterType is the type definition for a FirewallRuleHostFilterType.
type FirewallRuleHostFilterType string

const (
	// FirewallRuleHostFilterTypeVpc represents the FirewallRuleHostFilterType `"vpc"`.
	FirewallRuleHostFilterTypeVpc FirewallRuleHostFilterType = "vpc"
)

// FirewallRuleHostFilterSubnet is the type definition for a FirewallRuleHostFilterSubnet.
type FirewallRuleHostFilterSubnet struct {
	Type FirewallRuleHostFilterType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// FirewallRuleHostFilterTypeSubnet represents the FirewallRuleHostFilterType `"subnet"`.
	FirewallRuleHostFilterTypeSubnet FirewallRuleHostFilterType = "subnet"
)

// FirewallRuleHostFilterInstance is the type definition for a FirewallRuleHostFilterInstance.
type FirewallRuleHostFilterInstance struct {
	Type FirewallRuleHostFilterType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// FirewallRuleHostFilterTypeInstance represents the FirewallRuleHostFilterType `"instance"`.
	FirewallRuleHostFilterTypeInstance FirewallRuleHostFilterType = "instance"
)

// FirewallRuleHostFilterIp is the type definition for a FirewallRuleHostFilterIp.
type FirewallRuleHostFilterIp struct {
	Type  FirewallRuleHostFilterType `json:"type,omitempty" yaml:"type,omitempty"`
	Value string                     `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// FirewallRuleHostFilterTypeIp represents the FirewallRuleHostFilterType `"ip"`.
	FirewallRuleHostFilterTypeIp FirewallRuleHostFilterType = "ip"
)

// FirewallRuleHostFilterInternetGateway is the type definition for a FirewallRuleHostFilterInternetGateway.
type FirewallRuleHostFilterInternetGateway struct {
	Type FirewallRuleHostFilterType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// FirewallRuleHostFilterTypeInternetGateway represents the FirewallRuleHostFilterType `"internet_gateway"`.
	FirewallRuleHostFilterTypeInternetGateway FirewallRuleHostFilterType = "internet_gateway"
)

// FirewallRuleHostFilter is a subset of [`NetworkTarget`], `VpcFirewallRuleHostFilter` specifies all possible targets that a route can forward to.
type FirewallRuleHostFilter struct {
	Type  string `json:"type,omitempty" yaml:"type,omitempty"`
	Value Name   `json:"value,omitempty" yaml:"value,omitempty"`
}

// FirewallRuleProtocol is the protocols that may be specified in a firewall rule's filter
type FirewallRuleProtocol string

const (
	// FirewallRuleProtocolTCP represents the FirewallRuleProtocol `"TCP"`.
	FirewallRuleProtocolTCP FirewallRuleProtocol = "TCP"
	// FirewallRuleProtocolUDP represents the FirewallRuleProtocol `"UDP"`.
	FirewallRuleProtocolUDP FirewallRuleProtocol = "UDP"
	// FirewallRuleProtocolICMP represents the FirewallRuleProtocol `"ICMP"`.
	FirewallRuleProtocolICMP FirewallRuleProtocol = "ICMP"
)

// FirewallRuleResultsPage is a single page of results
type FirewallRuleResultsPage struct {
	// Items is list of items on this page of results
	Items []FirewallRule `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// FirewallRuleStatus is the type definition for a FirewallRuleStatus.
type FirewallRuleStatus string

const (
	// FirewallRuleStatusDisabled represents the FirewallRuleStatus `"disabled"`.
	FirewallRuleStatusDisabled FirewallRuleStatus = "disabled"
	// FirewallRuleStatusEnabled represents the FirewallRuleStatus `"enabled"`.
	FirewallRuleStatusEnabled FirewallRuleStatus = "enabled"
)

// FirewallRuleTargetVPC is the type definition for a FirewallRuleTargetVPC.
type FirewallRuleTargetVPC struct {
	Type FirewallRuleTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// FirewallRuleTargetType is the type definition for a FirewallRuleTargetType.
type FirewallRuleTargetType string

const (
	// FirewallRuleTargetTypeVpc represents the FirewallRuleTargetType `"vpc"`.
	FirewallRuleTargetTypeVpc FirewallRuleTargetType = "vpc"
)

// FirewallRuleTargetSubnet is the type definition for a FirewallRuleTargetSubnet.
type FirewallRuleTargetSubnet struct {
	Type FirewallRuleTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// FirewallRuleTargetTypeSubnet represents the FirewallRuleTargetType `"subnet"`.
	FirewallRuleTargetTypeSubnet FirewallRuleTargetType = "subnet"
)

// FirewallRuleTargetInstance is the type definition for a FirewallRuleTargetInstance.
type FirewallRuleTargetInstance struct {
	Type FirewallRuleTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// FirewallRuleTargetTypeInstance represents the FirewallRuleTargetType `"instance"`.
	FirewallRuleTargetTypeInstance FirewallRuleTargetType = "instance"
)

// FirewallRuleTarget is a subset of [`NetworkTarget`], `VpcFirewallRuleTarget` specifies all possible targets that a firewall rule can be attached to.
type FirewallRuleTarget struct {
	Type  string `json:"type,omitempty" yaml:"type,omitempty"`
	Value Name   `json:"value,omitempty" yaml:"value,omitempty"`
}

// FirewallRuleUpdate is a single rule in a VPC firewall
type FirewallRuleUpdate struct {
	// Action is whether traffic matching the rule should be allowed or dropped
	Action FirewallRuleAction `json:"action,omitempty" yaml:"action,omitempty"`
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Direction is whether this rule is for incoming or outgoing traffic
	Direction FirewallRuleDirection `json:"direction,omitempty" yaml:"direction,omitempty"`
	// Filters is reductions on the scope of the rule
	Filters FirewallRuleFilter `json:"filters,omitempty" yaml:"filters,omitempty"`
	// Priority is the relative priority of this rule
	Priority int `json:"priority,omitempty" yaml:"priority,omitempty"`
	// Status is whether this rule is in effect
	Status FirewallRuleStatus `json:"status,omitempty" yaml:"status,omitempty"`
	// Targets is list of sets of instances that the rule applies to
	Targets []FirewallRuleTarget `json:"targets,omitempty" yaml:"targets,omitempty"`
}

// FirewallRuleUpdateParams is updateable properties of a [`Vpc`]'s firewall Note that VpcFirewallRules are implicitly created along with a Vpc, so there is no explicit creation.
type FirewallRuleUpdateParams struct {
}

// FirewallRuleUpdateResult is response to an update replacing [`Vpc`]'s firewall
type FirewallRuleUpdateResult struct {
}

// VPCResultsPage is a single page of results
type VPCResultsPage struct {
	// Items is list of items on this page of results
	Items []VPC `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Router is a VPC router defines a series of rules that indicate where traffic should be sent depending on its destination.
type Router struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID   string     `json:"id,omitempty" yaml:"id,omitempty"`
	Kind RouterKind `json:"kind,omitempty" yaml:"kind,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// VPCId is the VPC to which the router belongs.
	VPCId string `json:"vpc_id,omitempty" yaml:"vpc_id,omitempty"`
}

// RouterCreate is create-time parameters for a [`VpcRouter`]
type RouterCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// RouterKind is the type definition for a RouterKind.
type RouterKind string

const (
	// RouterKindSystem represents the RouterKind `"system"`.
	RouterKindSystem RouterKind = "system"
	// RouterKindCustom represents the RouterKind `"custom"`.
	RouterKindCustom RouterKind = "custom"
)

// RouterResultsPage is a single page of results
type RouterResultsPage struct {
	// Items is list of items on this page of results
	Items []Router `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// RouterUpdate is updateable properties of a [`VpcRouter`]
type RouterUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	Name        Name   `json:"name,omitempty" yaml:"name,omitempty"`
}

// Subnet is a VPC subnet represents a logical grouping for instances that allows network traffic between them, within a IPv4 subnetwork or optionall an IPv6 subnetwork.
type Subnet struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// IPv4Block is the IPv4 subnet CIDR block.
	IPv4Block IPv4Net `json:"ipv4_block,omitempty" yaml:"ipv4_block,omitempty"`
	// IPv6Block is the IPv6 subnet CIDR block.
	IPv6Block IPv6Net `json:"ipv6_block,omitempty" yaml:"ipv6_block,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// VPCId is the VPC to which the subnet belongs.
	VPCId string `json:"vpc_id,omitempty" yaml:"vpc_id,omitempty"`
}

// SubnetCreate is create-time parameters for a [`VpcSubnet`]
type SubnetCreate struct {
	Description string  `json:"description,omitempty" yaml:"description,omitempty"`
	IPv4Block   IPv4Net `json:"ipv4_block,omitempty" yaml:"ipv4_block,omitempty"`
	IPv6Block   IPv6Net `json:"ipv6_block,omitempty" yaml:"ipv6_block,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// SubnetResultsPage is a single page of results
type SubnetResultsPage struct {
	// Items is list of items on this page of results
	Items []Subnet `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// SubnetUpdate is updateable properties of a [`VpcSubnet`]
type SubnetUpdate struct {
	Description string  `json:"description,omitempty" yaml:"description,omitempty"`
	IPv4Block   IPv4Net `json:"ipv4_block,omitempty" yaml:"ipv4_block,omitempty"`
	IPv6Block   IPv6Net `json:"ipv6_block,omitempty" yaml:"ipv6_block,omitempty"`
	Name        Name    `json:"name,omitempty" yaml:"name,omitempty"`
}

// VPCUpdate is updateable properties of a [`Vpc`]
type VPCUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	DnsName     Name   `json:"dns_name,omitempty" yaml:"dns_name,omitempty"`
	Name        Name   `json:"name,omitempty" yaml:"name,omitempty"`
}

// DatumTypes is the collection of all DatumType values.
var DatumTypes = []DatumType{
	DatumTypeBool,
	DatumTypeBytes,
	DatumTypeCumulativeF64,
	DatumTypeCumulativeI64,
	DatumTypeF64,
	DatumTypeHistogramF64,
	DatumTypeHistogramI64,
	DatumTypeI64,
	DatumTypeString,
}

// DiskStateStates is the collection of all DiskStateState values.
var DiskStateStates = []DiskStateState{
	DiskStateStateAttached,
	DiskStateStateAttaching,
	DiskStateStateCreating,
	DiskStateStateDestroyed,
	DiskStateStateDetached,
	DiskStateStateDetaching,
	DiskStateStateFaulted,
}

// FieldSources is the collection of all FieldSource values.
var FieldSources = []FieldSource{
	FieldSourceMetric,
	FieldSourceTarget,
}

// FieldTypes is the collection of all FieldType values.
var FieldTypes = []FieldType{
	FieldTypeBool,
	FieldTypeI64,
	FieldTypeIpAddr,
	FieldTypeString,
	FieldTypeUuid,
}

// FirewallRuleActions is the collection of all FirewallRuleAction values.
var FirewallRuleActions = []FirewallRuleAction{
	FirewallRuleActionAllow,
	FirewallRuleActionDeny,
}

// FirewallRuleDirections is the collection of all FirewallRuleDirection values.
var FirewallRuleDirections = []FirewallRuleDirection{
	FirewallRuleDirectionInbound,
	FirewallRuleDirectionOutbound,
}

// FirewallRuleHostFilterTypes is the collection of all FirewallRuleHostFilterType values.
var FirewallRuleHostFilterTypes = []FirewallRuleHostFilterType{
	FirewallRuleHostFilterTypeInstance,
	FirewallRuleHostFilterTypeInternetGateway,
	FirewallRuleHostFilterTypeIp,
	FirewallRuleHostFilterTypeSubnet,
	FirewallRuleHostFilterTypeVpc,
}

// FirewallRuleProtocols is the collection of all FirewallRuleProtocol values.
var FirewallRuleProtocols = []FirewallRuleProtocol{
	FirewallRuleProtocolICMP,
	FirewallRuleProtocolTCP,
	FirewallRuleProtocolUDP,
}

// FirewallRuleStatuses is the collection of all FirewallRuleStatus values.
var FirewallRuleStatuses = []FirewallRuleStatus{
	FirewallRuleStatusDisabled,
	FirewallRuleStatusEnabled,
}

// FirewallRuleTargetTypes is the collection of all FirewallRuleTargetType values.
var FirewallRuleTargetTypes = []FirewallRuleTargetType{
	FirewallRuleTargetTypeInstance,
	FirewallRuleTargetTypeSubnet,
	FirewallRuleTargetTypeVpc,
}

// IdSortModes is the collection of all IdSortMode values.
var IdSortModes = []IdSortMode{
	IdSortModeIdAscending,
}

// InstanceStates is the collection of all InstanceState values.
var InstanceStates = []InstanceState{
	InstanceStateCreating,
	InstanceStateDestroyed,
	InstanceStateFailed,
	InstanceStateMigrating,
	InstanceStateRebooting,
	InstanceStateRepairing,
	InstanceStateRunning,
	InstanceStateStarting,
	InstanceStateStopped,
	InstanceStateStopping,
}

// NameOrIdSortModes is the collection of all NameOrIdSortMode values.
var NameOrIdSortModes = []NameOrIdSortMode{
	NameOrIdSortModeIdAscending,
	NameOrIdSortModeNameAscending,
	NameOrIdSortModeNameDescending,
}

// NameSortModes is the collection of all NameSortMode values.
var NameSortModes = []NameSortMode{
	NameSortModeNameAscending,
}

// RouteDestinationTypes is the collection of all RouteDestinationType values.
var RouteDestinationTypes = []RouteDestinationType{
	RouteDestinationTypeIp,
	RouteDestinationTypeSubnet,
	RouteDestinationTypeVpc,
}

// RouteTargetTypes is the collection of all RouteTargetType values.
var RouteTargetTypes = []RouteTargetType{
	RouteTargetTypeInstance,
	RouteTargetTypeInternetGateway,
	RouteTargetTypeIp,
	RouteTargetTypeSubnet,
	RouteTargetTypeVpc,
}

// RouterKinds is the collection of all RouterKind values.
var RouterKinds = []RouterKind{
	RouterKindCustom,
	RouterKindSystem,
}

// RouterRouteKinds is the collection of all RouterRouteKind values.
var RouterRouteKinds = []RouterRouteKind{
	RouterRouteKindCustom,
	RouterRouteKindDefault,
	RouterRouteKindVpcPeering,
	RouterRouteKindVpcSubnet,
}

// SagaErrorInfoErrors is the collection of all SagaErrorInfoError values.
var SagaErrorInfoErrors = []SagaErrorInfoError{
	SagaErrorInfoErrorActionFailed,
	SagaErrorInfoErrorDeserializeFailed,
	SagaErrorInfoErrorInjectedError,
	SagaErrorInfoErrorSerializeFailed,
	SagaErrorInfoErrorSubsagaCreateFailed,
}

// SagaStateStates is the collection of all SagaStateState values.
var SagaStateStates = []SagaStateState{
	SagaStateStateFailed,
	SagaStateStateRunning,
	SagaStateStateSucceeded,
}
