// Code generated by `generate`. DO NOT EDIT.

package oxide

import "time"

type BlockSize int64

// ByteCount is a count of bytes, typically used either for memory or storage capacity
//
// The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.
type ByteCount int64

// DatumType is the type of an individual datum of a metric.
type DatumType string

const (
	// DatumTypeBool represents the DatumType `"bool"`.
	DatumTypeBool DatumType = "bool"
	// DatumTypeI64 represents the DatumType `"i64"`.
	DatumTypeI64 DatumType = "i64"
	// DatumTypeF64 represents the DatumType `"f64"`.
	DatumTypeF64 DatumType = "f64"
	// DatumTypeString represents the DatumType `"string"`.
	DatumTypeString DatumType = "string"
	// DatumTypeBytes represents the DatumType `"bytes"`.
	DatumTypeBytes DatumType = "bytes"
	// DatumTypeCumulativeI64 represents the DatumType `"cumulative_i64"`.
	DatumTypeCumulativeI64 DatumType = "cumulative_i64"
	// DatumTypeCumulativeF64 represents the DatumType `"cumulative_f64"`.
	DatumTypeCumulativeF64 DatumType = "cumulative_f64"
	// DatumTypeHistogramI64 represents the DatumType `"histogram_i64"`.
	DatumTypeHistogramI64 DatumType = "histogram_i64"
	// DatumTypeHistogramF64 represents the DatumType `"histogram_f64"`.
	DatumTypeHistogramF64 DatumType = "histogram_f64"
)

// DerEncodedKeyPair is the type definition for a DerEncodedKeyPair.
type DerEncodedKeyPair struct {
	// PrivateKey is request signing private key (base64 encoded der file)
	PrivateKey string `json:"private_key,omitempty" yaml:"private_key,omitempty"`
	// PublicCert is request signing public certificate (base64 encoded der file)
	PublicCert string `json:"public_cert,omitempty" yaml:"public_cert,omitempty"`
}

// DigestSha256 is the type definition for a DigestSha256.
type DigestSha256 struct {
	Type  DigestType `json:"type,omitempty" yaml:"type,omitempty"`
	Value string     `json:"value,omitempty" yaml:"value,omitempty"`
}

// DigestType is the type definition for a DigestType.
type DigestType string

const (
	// DigestTypeSha256 represents the DigestType `"sha256"`.
	DigestTypeSha256 DigestType = "sha256"
)

// Digest is the type definition for a Digest.
type Digest struct {
	Type  string `json:"type,omitempty" yaml:"type,omitempty"`
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

// Disk is client view of a [`Disk`]
type Disk struct {
	// BlockSize is a count of bytes, typically used either for memory or storage capacity
	//
	// The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.
	BlockSize ByteCount `json:"block_size,omitempty" yaml:"block_size,omitempty"`
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	DevicePath  string `json:"device_path,omitempty" yaml:"device_path,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID      string `json:"id,omitempty" yaml:"id,omitempty"`
	ImageID string `json:"image_id,omitempty" yaml:"image_id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name      string `json:"name,omitempty" yaml:"name,omitempty"`
	ProjectID string `json:"project_id,omitempty" yaml:"project_id,omitempty"`
	// Size is a count of bytes, typically used either for memory or storage capacity
	//
	// The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.
	Size       ByteCount `json:"size,omitempty" yaml:"size,omitempty"`
	SnapshotID string    `json:"snapshot_id,omitempty" yaml:"snapshot_id,omitempty"`
	// State is state of a Disk (primarily: attached or not)
	State DiskState `json:"state,omitempty" yaml:"state,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// DiskCreate is create-time parameters for a [`Disk`](omicron_common::api::external::Disk)
type DiskCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// DiskSource is initial source for this disk
	DiskSource DiskSource `json:"disk_source,omitempty" yaml:"disk_source,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// Size is total size of the Disk in bytes
	Size ByteCount `json:"size,omitempty" yaml:"size,omitempty"`
}

// DiskIdentifier is parameters for the [`Disk`](omicron_common::api::external::Disk) to be attached or detached to an instance
type DiskIdentifier struct {
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
}

// DiskResultsPage is a single page of results
type DiskResultsPage struct {
	// Items is list of items on this page of results
	Items []Disk `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// DiskSourceBlank is create a blank disk
type DiskSourceBlank struct {
	// BlockSize is size of blocks for this Disk. valid values are: 512, 2048, or 4096
	BlockSize BlockSize      `json:"block_size,omitempty" yaml:"block_size,omitempty"`
	Type      DiskSourceType `json:"type,omitempty" yaml:"type,omitempty"`
}

// DiskSourceType is the type definition for a DiskSourceType.
type DiskSourceType string

const (
	// DiskSourceTypeBlank represents the DiskSourceType `"blank"`.
	DiskSourceTypeBlank DiskSourceType = "blank"
)

// DiskSourceSnapshot is create a disk from a disk snapshot
type DiskSourceSnapshot struct {
	SnapshotID string         `json:"snapshot_id,omitempty" yaml:"snapshot_id,omitempty"`
	Type       DiskSourceType `json:"type,omitempty" yaml:"type,omitempty"`
}

const (
	// DiskSourceTypeSnapshot represents the DiskSourceType `"snapshot"`.
	DiskSourceTypeSnapshot DiskSourceType = "snapshot"
)

// DiskSourceImage is create a disk from a project image
type DiskSourceImage struct {
	ImageID string         `json:"image_id,omitempty" yaml:"image_id,omitempty"`
	Type    DiskSourceType `json:"type,omitempty" yaml:"type,omitempty"`
}

const (
	// DiskSourceTypeImage represents the DiskSourceType `"image"`.
	DiskSourceTypeImage DiskSourceType = "image"
)

// DiskSourceGlobalImage is create a disk from a global image
type DiskSourceGlobalImage struct {
	ImageID string         `json:"image_id,omitempty" yaml:"image_id,omitempty"`
	Type    DiskSourceType `json:"type,omitempty" yaml:"type,omitempty"`
}

const (
	// DiskSourceTypeGlobalImage represents the DiskSourceType `"global_image"`.
	DiskSourceTypeGlobalImage DiskSourceType = "global_image"
)

// DiskSource is different sources for a disk
type DiskSource struct {
	BlockSize  BlockSize `json:"block_size,omitempty" yaml:"block_size,omitempty"`
	Type       string    `json:"type,omitempty" yaml:"type,omitempty"`
	SnapshotID string    `json:"snapshot_id,omitempty" yaml:"snapshot_id,omitempty"`
	ImageID    string    `json:"image_id,omitempty" yaml:"image_id,omitempty"`
}

// DiskStateCreating is disk is being initialized
type DiskStateCreating struct {
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// DiskStateState is the type definition for a DiskStateState.
type DiskStateState string

const (
	// DiskStateStateCreating represents the DiskStateState `"creating"`.
	DiskStateStateCreating DiskStateState = "creating"
)

// DiskStateDetached is disk is ready but detached from any Instance
type DiskStateDetached struct {
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

const (
	// DiskStateStateDetached represents the DiskStateState `"detached"`.
	DiskStateStateDetached DiskStateState = "detached"
)

// DiskStateAttaching is disk is being attached to the given Instance
type DiskStateAttaching struct {
	Instance string         `json:"instance,omitempty" yaml:"instance,omitempty"`
	State    DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

const (
	// DiskStateStateAttaching represents the DiskStateState `"attaching"`.
	DiskStateStateAttaching DiskStateState = "attaching"
)

// DiskStateAttached is disk is attached to the given Instance
type DiskStateAttached struct {
	Instance string         `json:"instance,omitempty" yaml:"instance,omitempty"`
	State    DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

const (
	// DiskStateStateAttached represents the DiskStateState `"attached"`.
	DiskStateStateAttached DiskStateState = "attached"
)

// DiskStateDetaching is disk is being detached from the given Instance
type DiskStateDetaching struct {
	Instance string         `json:"instance,omitempty" yaml:"instance,omitempty"`
	State    DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

const (
	// DiskStateStateDetaching represents the DiskStateState `"detaching"`.
	DiskStateStateDetaching DiskStateState = "detaching"
)

// DiskStateDestroyed is disk has been destroyed
type DiskStateDestroyed struct {
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

const (
	// DiskStateStateDestroyed represents the DiskStateState `"destroyed"`.
	DiskStateStateDestroyed DiskStateState = "destroyed"
)

// DiskStateFaulted is disk is unavailable
type DiskStateFaulted struct {
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

const (
	// DiskStateStateFaulted represents the DiskStateState `"faulted"`.
	DiskStateStateFaulted DiskStateState = "faulted"
)

// DiskState is state of a Disk (primarily: attached or not)
type DiskState struct {
	State    string `json:"state,omitempty" yaml:"state,omitempty"`
	Instance string `json:"instance,omitempty" yaml:"instance,omitempty"`
}

// Distribution is oS image distribution
type Distribution struct {
	// Name is the name of the distribution (e.g. "alpine" or "ubuntu")
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// Version is the version of the distribution (e.g. "3.10" or "18.04")
	Version string `json:"version,omitempty" yaml:"version,omitempty"`
}

// Error is error information from a response.
type Error struct {
	ErrorCode string `json:"error_code,omitempty" yaml:"error_code,omitempty"`
	Message   string `json:"message,omitempty" yaml:"message,omitempty"`
	RequestID string `json:"request_id,omitempty" yaml:"request_id,omitempty"`
}

// FieldSchema is the name and type information for a field of a timeseries schema.
type FieldSchema struct {
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// Source is the source from which a field is derived, the target or metric.
	Source FieldSource `json:"source,omitempty" yaml:"source,omitempty"`
	// Ty is the `FieldType` identifies the data type of a target or metric field.
	Ty FieldType `json:"ty,omitempty" yaml:"ty,omitempty"`
}

// FieldSource is the source from which a field is derived, the target or metric.
type FieldSource string

const (
	// FieldSourceTarget represents the FieldSource `"target"`.
	FieldSourceTarget FieldSource = "target"
	// FieldSourceMetric represents the FieldSource `"metric"`.
	FieldSourceMetric FieldSource = "metric"
)

// FieldType is the `FieldType` identifies the data type of a target or metric field.
type FieldType string

const (
	// FieldTypeString represents the FieldType `"string"`.
	FieldTypeString FieldType = "string"
	// FieldTypeI64 represents the FieldType `"i64"`.
	FieldTypeI64 FieldType = "i64"
	// FieldTypeIpAddr represents the FieldType `"ip_addr"`.
	FieldTypeIpAddr FieldType = "ip_addr"
	// FieldTypeUuid represents the FieldType `"uuid"`.
	FieldTypeUuid FieldType = "uuid"
	// FieldTypeBool represents the FieldType `"bool"`.
	FieldTypeBool FieldType = "bool"
)

// FleetRole is the type definition for a FleetRole.
type FleetRole string

const (
	// FleetRoleAdmin represents the FleetRole `"admin"`.
	FleetRoleAdmin FleetRole = "admin"
	// FleetRoleCollaborator represents the FleetRole `"collaborator"`.
	FleetRoleCollaborator FleetRole = "collaborator"
	// FleetRoleViewer represents the FleetRole `"viewer"`.
	FleetRoleViewer FleetRole = "viewer"
)

// FleetRolePolicy is client view of a [`Policy`], which describes how this resource may be accessed
//
// Note that the Policy only describes access granted explicitly for this resource.  The policies of parent resources can also cause a user to have access to this resource.
type FleetRolePolicy struct {
	// RoleAssignments is roles directly assigned on this resource
	RoleAssignments []FleetRoleRoleAssignment `json:"role_assignments,omitempty" yaml:"role_assignments,omitempty"`
}

// FleetRoleRoleAssignment is describes the assignment of a particular role on a particular resource to a particular identity (user, group, etc.)
//
// The resource is not part of this structure.  Rather, [`RoleAssignment`]s are put into a [`Policy`] and that Policy is applied to a particular resource.
type FleetRoleRoleAssignment struct {
	IdentityID string `json:"identity_id,omitempty" yaml:"identity_id,omitempty"`
	// IdentityType is describes what kind of identity is described by an id
	IdentityType IdentityType `json:"identity_type,omitempty" yaml:"identity_type,omitempty"`
	RoleName     FleetRole    `json:"role_name,omitempty" yaml:"role_name,omitempty"`
}

// GlobalImage is client view of global Images
type GlobalImage struct {
	// BlockSize is size of blocks in bytes
	BlockSize ByteCount `json:"block_size,omitempty" yaml:"block_size,omitempty"`
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Digest is hash of the image contents, if applicable
	Digest Digest `json:"digest,omitempty" yaml:"digest,omitempty"`
	// Distribution is image distribution
	Distribution string `json:"distribution,omitempty" yaml:"distribution,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// Size is total size in bytes
	Size ByteCount `json:"size,omitempty" yaml:"size,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// Url is uRL source of this image, if any
	Url string `json:"url,omitempty" yaml:"url,omitempty"`
	// Version is image version
	Version string `json:"version,omitempty" yaml:"version,omitempty"`
}

// GlobalImageCreate is create-time parameters for an [`GlobalImage`](omicron_common::api::external::GlobalImage)
type GlobalImageCreate struct {
	// BlockSize is block size in bytes
	BlockSize   BlockSize `json:"block_size,omitempty" yaml:"block_size,omitempty"`
	Description string    `json:"description,omitempty" yaml:"description,omitempty"`
	// Distribution is oS image distribution
	Distribution Distribution `json:"distribution,omitempty" yaml:"distribution,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// Source is the source of the image's contents.
	Source ImageSource `json:"source,omitempty" yaml:"source,omitempty"`
}

// GlobalImageResultsPage is a single page of results
type GlobalImageResultsPage struct {
	// Items is list of items on this page of results
	Items []GlobalImage `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// IdSortMode is supported set of sort modes for scanning by id only.
//
// Currently, we only support scanning in ascending order.
type IdSortMode string

const (
	// IdSortModeIdAscending represents the IdSortMode `"id_ascending"`.
	IdSortModeIdAscending IdSortMode = "id_ascending"
)

// IdentityProvider is client view of an [`IdentityProvider`]
type IdentityProvider struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// ProviderType is identity provider type
	ProviderType IdentityProviderType `json:"provider_type,omitempty" yaml:"provider_type,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// IdentityProviderResultsPage is a single page of results
type IdentityProviderResultsPage struct {
	// Items is list of items on this page of results
	Items []IdentityProvider `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// IdentityProviderType is the type definition for a IdentityProviderType.
type IdentityProviderType string

const (
	// IdentityProviderTypeSaml represents the IdentityProviderType `"saml"`.
	IdentityProviderTypeSaml IdentityProviderType = "saml"
)

// IdentityType is describes what kind of identity is described by an id
type IdentityType string

const (
	// IdentityTypeSiloUser represents the IdentityType `"silo_user"`.
	IdentityTypeSiloUser IdentityType = "silo_user"
)

// IdpMetadataSourceUrl is the type definition for a IdpMetadataSourceUrl.
type IdpMetadataSourceUrl struct {
	Type IdpMetadataSourceType `json:"type,omitempty" yaml:"type,omitempty"`
	Url  string                `json:"url,omitempty" yaml:"url,omitempty"`
}

// IdpMetadataSourceType is the type definition for a IdpMetadataSourceType.
type IdpMetadataSourceType string

const (
	// IdpMetadataSourceTypeUrl represents the IdpMetadataSourceType `"url"`.
	IdpMetadataSourceTypeUrl IdpMetadataSourceType = "url"
)

// IdpMetadataSourceBase64EncodedXml is the type definition for a IdpMetadataSourceBase64EncodedXml.
type IdpMetadataSourceBase64EncodedXml struct {
	Data string                `json:"data,omitempty" yaml:"data,omitempty"`
	Type IdpMetadataSourceType `json:"type,omitempty" yaml:"type,omitempty"`
}

const (
	// IdpMetadataSourceTypeBase64EncodedXml represents the IdpMetadataSourceType `"base64_encoded_xml"`.
	IdpMetadataSourceTypeBase64EncodedXml IdpMetadataSourceType = "base64_encoded_xml"
)

// IdpMetadataSource is the type definition for a IdpMetadataSource.
type IdpMetadataSource struct {
	Type string `json:"type,omitempty" yaml:"type,omitempty"`
	Url  string `json:"url,omitempty" yaml:"url,omitempty"`
	Data string `json:"data,omitempty" yaml:"data,omitempty"`
}

// Image is client view of project Images
type Image struct {
	// BlockSize is size of blocks in bytes
	BlockSize ByteCount `json:"block_size,omitempty" yaml:"block_size,omitempty"`
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Digest is hash of the image contents, if applicable
	Digest Digest `json:"digest,omitempty" yaml:"digest,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// ProjectID is the project the disk belongs to
	ProjectID string `json:"project_id,omitempty" yaml:"project_id,omitempty"`
	// Size is total size in bytes
	Size ByteCount `json:"size,omitempty" yaml:"size,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// Url is uRL source of this image, if any
	Url string `json:"url,omitempty" yaml:"url,omitempty"`
	// Version is version of this, if any
	Version string `json:"version,omitempty" yaml:"version,omitempty"`
}

// ImageCreate is create-time parameters for an [`Image`](omicron_common::api::external::Image)
type ImageCreate struct {
	// BlockSize is block size in bytes
	BlockSize   BlockSize `json:"block_size,omitempty" yaml:"block_size,omitempty"`
	Description string    `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// Source is the source of the image's contents.
	Source ImageSource `json:"source,omitempty" yaml:"source,omitempty"`
}

// ImageResultsPage is a single page of results
type ImageResultsPage struct {
	// Items is list of items on this page of results
	Items []Image `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// ImageSourceUrl is the type definition for a ImageSourceUrl.
type ImageSourceUrl struct {
	Type ImageSourceType `json:"type,omitempty" yaml:"type,omitempty"`
	Url  string          `json:"url,omitempty" yaml:"url,omitempty"`
}

// ImageSourceType is the type definition for a ImageSourceType.
type ImageSourceType string

const (
	// ImageSourceTypeUrl represents the ImageSourceType `"url"`.
	ImageSourceTypeUrl ImageSourceType = "url"
)

// ImageSourceSnapshot is the type definition for a ImageSourceSnapshot.
type ImageSourceSnapshot struct {
	ID   string          `json:"id,omitempty" yaml:"id,omitempty"`
	Type ImageSourceType `json:"type,omitempty" yaml:"type,omitempty"`
}

const (
	// ImageSourceTypeSnapshot represents the ImageSourceType `"snapshot"`.
	ImageSourceTypeSnapshot ImageSourceType = "snapshot"
)

// ImageSourceYouCanBootAnythingAsLongAsItsAlpine is boot the Alpine ISO that ships with the Propolis zone. Intended for development purposes only.
type ImageSourceYouCanBootAnythingAsLongAsItsAlpine struct {
	Type ImageSourceType `json:"type,omitempty" yaml:"type,omitempty"`
}

const (
	// ImageSourceTypeYouCanBootAnythingAsLongAsItsAlpine represents the ImageSourceType `"you_can_boot_anything_as_long_as_its_alpine"`.
	ImageSourceTypeYouCanBootAnythingAsLongAsItsAlpine ImageSourceType = "you_can_boot_anything_as_long_as_its_alpine"
)

// ImageSource is the source of the underlying image.
type ImageSource struct {
	Type string `json:"type,omitempty" yaml:"type,omitempty"`
	Url  string `json:"url,omitempty" yaml:"url,omitempty"`
	ID   string `json:"id,omitempty" yaml:"id,omitempty"`
}

// Instance is client view of an [`Instance`]
type Instance struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Hostname is rFC1035-compliant hostname for the Instance.
	Hostname string `json:"hostname,omitempty" yaml:"hostname,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Memory is memory allocated for this Instance
	Memory ByteCount `json:"memory,omitempty" yaml:"memory,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// NCPUs is number of CPUs allocated for this Instance
	NCPUs InstanceCPUCount `json:"ncpus,omitempty" yaml:"ncpus,omitempty"`
	// ProjectID is id for the project containing this Instance
	ProjectID string `json:"project_id,omitempty" yaml:"project_id,omitempty"`
	// RunState is running state of an Instance (primarily: booted or stopped)
	//
	// This typically reflects whether it's starting, running, stopping, or stopped, but also includes states related to the Instance's lifecycle
	RunState InstanceState `json:"run_state,omitempty" yaml:"run_state,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified        *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	TimeRunStateUpdated *time.Time `json:"time_run_state_updated,omitempty" yaml:"time_run_state_updated,omitempty"`
}

// InstanceCPUCount is the number of CPUs in an Instance
type InstanceCPUCount int64

// InstanceCreate is create-time parameters for an [`Instance`](omicron_common::api::external::Instance)
type InstanceCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Disks is the disks to be created or attached for this instance.
	Disks    []InstanceDiskAttachment `json:"disks,omitempty" yaml:"disks,omitempty"`
	Hostname string                   `json:"hostname,omitempty" yaml:"hostname,omitempty"`
	// Memory is a count of bytes, typically used either for memory or storage capacity
	//
	// The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.
	Memory ByteCount `json:"memory,omitempty" yaml:"memory,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// NCPUs is the number of CPUs in an Instance
	NCPUs InstanceCPUCount `json:"ncpus,omitempty" yaml:"ncpus,omitempty"`
	// NetworkInterfaces is the network interfaces to be created for this instance.
	NetworkInterfaces InstanceNetworkInterfaceAttachment `json:"network_interfaces,omitempty" yaml:"network_interfaces,omitempty"`
	// UserData is user data for instance initialization systems (such as cloud-init). Must be a Base64-encoded string, as specified in RFC 4648 § 4 (+ and / characters with padding). Maximum 32 KiB unencoded data.
	UserData string `json:"user_data,omitempty" yaml:"user_data,omitempty"`
}

// InstanceDiskAttachmentCreate is during instance creation, create and attach disks
type InstanceDiskAttachmentCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// DiskSource is initial source for this disk
	DiskSource DiskSource `json:"disk_source,omitempty" yaml:"disk_source,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// Size is total size of the Disk in bytes
	Size ByteCount                  `json:"size,omitempty" yaml:"size,omitempty"`
	Type InstanceDiskAttachmentType `json:"type,omitempty" yaml:"type,omitempty"`
}

// InstanceDiskAttachmentType is the type definition for a InstanceDiskAttachmentType.
type InstanceDiskAttachmentType string

const (
	// InstanceDiskAttachmentTypeCreate represents the InstanceDiskAttachmentType `"create"`.
	InstanceDiskAttachmentTypeCreate InstanceDiskAttachmentType = "create"
)

// InstanceDiskAttachmentAttach is during instance creation, attach this disk
type InstanceDiskAttachmentAttach struct {
	// Name is a disk name to attach
	Name string                     `json:"name,omitempty" yaml:"name,omitempty"`
	Type InstanceDiskAttachmentType `json:"type,omitempty" yaml:"type,omitempty"`
}

const (
	// InstanceDiskAttachmentTypeAttach represents the InstanceDiskAttachmentType `"attach"`.
	InstanceDiskAttachmentTypeAttach InstanceDiskAttachmentType = "attach"
)

// InstanceDiskAttachment is describe the instance's disks at creation time
type InstanceDiskAttachment struct {
	Description string     `json:"description,omitempty" yaml:"description,omitempty"`
	DiskSource  DiskSource `json:"disk_source,omitempty" yaml:"disk_source,omitempty"`
	Name        string     `json:"name,omitempty" yaml:"name,omitempty"`
	Size        ByteCount  `json:"size,omitempty" yaml:"size,omitempty"`
	Type        string     `json:"type,omitempty" yaml:"type,omitempty"`
}

// InstanceMigrate is migration parameters for an [`Instance`](omicron_common::api::external::Instance)
type InstanceMigrate struct {
	DstSledID string `json:"dst_sled_id,omitempty" yaml:"dst_sled_id,omitempty"`
}

// InstanceNetworkInterfaceAttachmentCreate is create one or more `NetworkInterface`s for the `Instance`.
//
// If more than one interface is provided, then the first will be designated the primary interface for the instance.
type InstanceNetworkInterfaceAttachmentCreate struct {
	Params []NetworkInterfaceCreate               `json:"params,omitempty" yaml:"params,omitempty"`
	Type   InstanceNetworkInterfaceAttachmentType `json:"type,omitempty" yaml:"type,omitempty"`
}

// InstanceNetworkInterfaceAttachmentType is the type definition for a InstanceNetworkInterfaceAttachmentType.
type InstanceNetworkInterfaceAttachmentType string

const (
	// InstanceNetworkInterfaceAttachmentTypeCreate represents the InstanceNetworkInterfaceAttachmentType `"create"`.
	InstanceNetworkInterfaceAttachmentTypeCreate InstanceNetworkInterfaceAttachmentType = "create"
)

// InstanceNetworkInterfaceAttachmentDefault is the default networking configuration for an instance is to create a single primary interface with an automatically-assigned IP address. The IP will be pulled from the Project's default VPC / VPC Subnet.
type InstanceNetworkInterfaceAttachmentDefault struct {
	Type InstanceNetworkInterfaceAttachmentType `json:"type,omitempty" yaml:"type,omitempty"`
}

const (
	// InstanceNetworkInterfaceAttachmentTypeDefault represents the InstanceNetworkInterfaceAttachmentType `"default"`.
	InstanceNetworkInterfaceAttachmentTypeDefault InstanceNetworkInterfaceAttachmentType = "default"
)

// InstanceNetworkInterfaceAttachmentNone is no network interfaces at all will be created for the instance.
type InstanceNetworkInterfaceAttachmentNone struct {
	Type InstanceNetworkInterfaceAttachmentType `json:"type,omitempty" yaml:"type,omitempty"`
}

const (
	// InstanceNetworkInterfaceAttachmentTypeNone represents the InstanceNetworkInterfaceAttachmentType `"none"`.
	InstanceNetworkInterfaceAttachmentTypeNone InstanceNetworkInterfaceAttachmentType = "none"
)

// InstanceNetworkInterfaceAttachment is describes an attachment of a `NetworkInterface` to an `Instance`, at the time the instance is created.
type InstanceNetworkInterfaceAttachment struct {
	Params []NetworkInterfaceCreate `json:"params,omitempty" yaml:"params,omitempty"`
	Type   string                   `json:"type,omitempty" yaml:"type,omitempty"`
}

// InstanceResultsPage is a single page of results
type InstanceResultsPage struct {
	// Items is list of items on this page of results
	Items []Instance `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// InstanceSerialConsoleData is contents of an Instance's serial console buffer.
type InstanceSerialConsoleData struct {
	// Data is the bytes starting from the requested offset up to either the end of the buffer or the request's `max_bytes`. Provided as a u8 array rather than a string, as it may not be UTF-8.
	Data []string `json:"data,omitempty" yaml:"data,omitempty"`
	// LastByteOffset is the absolute offset since boot (suitable for use as `byte_offset` in a subsequent request) of the last byte returned in `data`.
	LastByteOffset int `json:"last_byte_offset,omitempty" yaml:"last_byte_offset,omitempty"`
}

// InstanceState is running state of an Instance (primarily: booted or stopped)
//
// This typically reflects whether it's starting, running, stopping, or stopped, but also includes states related to the Instance's lifecycle
type InstanceState string

const (
	// InstanceStateCreating represents the InstanceState `"creating"`.
	InstanceStateCreating InstanceState = "creating"
	// InstanceStateStarting represents the InstanceState `"starting"`.
	InstanceStateStarting InstanceState = "starting"
	// InstanceStateRunning represents the InstanceState `"running"`.
	InstanceStateRunning InstanceState = "running"
	// InstanceStateStopping represents the InstanceState `"stopping"`.
	InstanceStateStopping InstanceState = "stopping"
	// InstanceStateStopped represents the InstanceState `"stopped"`.
	InstanceStateStopped InstanceState = "stopped"
	// InstanceStateRebooting represents the InstanceState `"rebooting"`.
	InstanceStateRebooting InstanceState = "rebooting"
	// InstanceStateMigrating represents the InstanceState `"migrating"`.
	InstanceStateMigrating InstanceState = "migrating"
	// InstanceStateRepairing represents the InstanceState `"repairing"`.
	InstanceStateRepairing InstanceState = "repairing"
	// InstanceStateFailed represents the InstanceState `"failed"`.
	InstanceStateFailed InstanceState = "failed"
	// InstanceStateDestroyed represents the InstanceState `"destroyed"`.
	InstanceStateDestroyed InstanceState = "destroyed"
)

// IpNet is the type definition for a IpNet.

// IpNet is the type definition for a IpNet.

// IpNet is the type definition for a IpNet.
type IpNet struct {
}

// IpPool is identity-related metadata that's included in nearly all public API objects
type IpPool struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// IpPoolCreate is create-time parameters for an IP Pool.
//
// See [`IpPool`](omicron_nexus::external_api::views::IpPool)
type IpPoolCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
}

// IpPoolRange is the type definition for a IpPoolRange.
type IpPoolRange struct {
	ID          string     `json:"id,omitempty" yaml:"id,omitempty"`
	Range       IpRange    `json:"range,omitempty" yaml:"range,omitempty"`
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
}

// IpPoolRangeResultsPage is a single page of results
type IpPoolRangeResultsPage struct {
	// Items is list of items on this page of results
	Items []IpPoolRange `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// IpPoolResultsPage is a single page of results
type IpPoolResultsPage struct {
	// Items is list of items on this page of results
	Items []IpPool `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// IpPoolUpdate is parameters for updating an IP Pool
type IpPoolUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	Name        string `json:"name,omitempty" yaml:"name,omitempty"`
}

// IpRange is the type definition for a IpRange.

// IpRange is the type definition for a IpRange.

// IpRange is the type definition for a IpRange.
type IpRange struct {
}

// IPv4Net is an IPv4 subnet, including prefix and subnet mask
type IPv4Net string

// IPv4Range is a non-decreasing IPv4 address range, inclusive of both ends.
//
// The first address must be less than or equal to the last address.
type IPv4Range struct {
	First string `json:"first,omitempty" yaml:"first,omitempty"`
	Last  string `json:"last,omitempty" yaml:"last,omitempty"`
}

// IPv6Net is an IPv6 subnet, including prefix and subnet mask
type IPv6Net string

// IPv6Range is a non-decreasing IPv6 address range, inclusive of both ends.
//
// The first address must be less than or equal to the last address.
type IPv6Range struct {
	First string `json:"first,omitempty" yaml:"first,omitempty"`
	Last  string `json:"last,omitempty" yaml:"last,omitempty"`
}

// L4PortRange is an inclusive-inclusive range of IP ports. The second port may be omitted to represent a single port
type L4PortRange string

// MacAddr is a Media Access Control address, in EUI-48 format
type MacAddr string

// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
type Name string

// NameOrIdSortMode is supported set of sort modes for scanning by name or id
type NameOrIdSortMode string

const (
	// NameOrIdSortModeNameAscending represents the NameOrIdSortMode `"name_ascending"`.
	NameOrIdSortModeNameAscending NameOrIdSortMode = "name_ascending"
	// NameOrIdSortModeNameDescending represents the NameOrIdSortMode `"name_descending"`.
	NameOrIdSortModeNameDescending NameOrIdSortMode = "name_descending"
	// NameOrIdSortModeIdAscending represents the NameOrIdSortMode `"id_ascending"`.
	NameOrIdSortModeIdAscending NameOrIdSortMode = "id_ascending"
)

// NameSortMode is supported set of sort modes for scanning by name only
//
// Currently, we only support scanning in ascending order.
type NameSortMode string

const (
	// NameSortModeNameAscending represents the NameSortMode `"name_ascending"`.
	NameSortModeNameAscending NameSortMode = "name_ascending"
)

// NetworkInterface is a `NetworkInterface` represents a virtual network interface device.
type NetworkInterface struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// InstanceID is the Instance to which the interface belongs.
	InstanceID string `json:"instance_id,omitempty" yaml:"instance_id,omitempty"`
	// Ip is the IP address assigned to this interface.
	Ip string `json:"ip,omitempty" yaml:"ip,omitempty"`
	// Mac is the MAC address assigned to this interface.
	Mac MacAddr `json:"mac,omitempty" yaml:"mac,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// Primary is true if this interface is the primary for the instance to which it's attached.
	Primary bool `json:"primary,omitempty" yaml:"primary,omitempty"`
	// SubnetID is the subnet to which the interface belongs.
	SubnetID string `json:"subnet_id,omitempty" yaml:"subnet_id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// VPCId is the VPC to which the interface belongs.
	VPCId string `json:"vpc_id,omitempty" yaml:"vpc_id,omitempty"`
}

// NetworkInterfaceCreate is create-time parameters for a [`NetworkInterface`](omicron_common::api::external::NetworkInterface)
type NetworkInterfaceCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Ip is the IP address for the interface. One will be auto-assigned if not provided.
	Ip string `json:"ip,omitempty" yaml:"ip,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// SubnetName is the VPC Subnet in which to create the interface.
	SubnetName string `json:"subnet_name,omitempty" yaml:"subnet_name,omitempty"`
	// VPCName is the VPC in which to create the interface.
	VPCName string `json:"vpc_name,omitempty" yaml:"vpc_name,omitempty"`
}

// NetworkInterfaceResultsPage is a single page of results
type NetworkInterfaceResultsPage struct {
	// Items is list of items on this page of results
	Items []NetworkInterface `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// NetworkInterfaceUpdate is parameters for updating a [`NetworkInterface`](omicron_common::api::external::NetworkInterface).
//
// Note that modifying IP addresses for an interface is not yet supported, a new interface must be created instead.
type NetworkInterfaceUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// MakePrimary is make a secondary interface the instance's primary interface.
	//
	// If applied to a secondary interface, that interface will become the primary on the next reboot of the instance. Note that this may have implications for routing between instances, as the new primary interface will be on a distinct subnet from the previous primary interface.
	//
	// Note that this can only be used to select a new primary interface for an instance. Requests to change the primary interface into a secondary will return an error.
	MakePrimary bool   `json:"make_primary,omitempty" yaml:"make_primary,omitempty"`
	Name        string `json:"name,omitempty" yaml:"name,omitempty"`
}

// Organization is client view of an [`Organization`]
type Organization struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// OrganizationCreate is create-time parameters for an [`Organization`](crate::external_api::views::Organization)
type OrganizationCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
}

// OrganizationResultsPage is a single page of results
type OrganizationResultsPage struct {
	// Items is list of items on this page of results
	Items []Organization `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// OrganizationRole is the type definition for a OrganizationRole.
type OrganizationRole string

const (
	// OrganizationRoleAdmin represents the OrganizationRole `"admin"`.
	OrganizationRoleAdmin OrganizationRole = "admin"
	// OrganizationRoleCollaborator represents the OrganizationRole `"collaborator"`.
	OrganizationRoleCollaborator OrganizationRole = "collaborator"
	// OrganizationRoleViewer represents the OrganizationRole `"viewer"`.
	OrganizationRoleViewer OrganizationRole = "viewer"
)

// OrganizationRolePolicy is client view of a [`Policy`], which describes how this resource may be accessed
//
// Note that the Policy only describes access granted explicitly for this resource.  The policies of parent resources can also cause a user to have access to this resource.
type OrganizationRolePolicy struct {
	// RoleAssignments is roles directly assigned on this resource
	RoleAssignments []OrganizationRoleRoleAssignment `json:"role_assignments,omitempty" yaml:"role_assignments,omitempty"`
}

// OrganizationRoleRoleAssignment is describes the assignment of a particular role on a particular resource to a particular identity (user, group, etc.)
//
// The resource is not part of this structure.  Rather, [`RoleAssignment`]s are put into a [`Policy`] and that Policy is applied to a particular resource.
type OrganizationRoleRoleAssignment struct {
	IdentityID string `json:"identity_id,omitempty" yaml:"identity_id,omitempty"`
	// IdentityType is describes what kind of identity is described by an id
	IdentityType IdentityType     `json:"identity_type,omitempty" yaml:"identity_type,omitempty"`
	RoleName     OrganizationRole `json:"role_name,omitempty" yaml:"role_name,omitempty"`
}

// OrganizationUpdate is updateable properties of an [`Organization`](crate::external_api::views::Organization)
type OrganizationUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	Name        string `json:"name,omitempty" yaml:"name,omitempty"`
}

// Project is client view of a [`Project`]
type Project struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name           string `json:"name,omitempty" yaml:"name,omitempty"`
	OrganizationID string `json:"organization_id,omitempty" yaml:"organization_id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// ProjectCreate is create-time parameters for a [`Project`](crate::external_api::views::Project)
type ProjectCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
}

// ProjectResultsPage is a single page of results
type ProjectResultsPage struct {
	// Items is list of items on this page of results
	Items []Project `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// ProjectRole is the type definition for a ProjectRole.
type ProjectRole string

const (
	// ProjectRoleAdmin represents the ProjectRole `"admin"`.
	ProjectRoleAdmin ProjectRole = "admin"
	// ProjectRoleCollaborator represents the ProjectRole `"collaborator"`.
	ProjectRoleCollaborator ProjectRole = "collaborator"
	// ProjectRoleViewer represents the ProjectRole `"viewer"`.
	ProjectRoleViewer ProjectRole = "viewer"
)

// ProjectRolePolicy is client view of a [`Policy`], which describes how this resource may be accessed
//
// Note that the Policy only describes access granted explicitly for this resource.  The policies of parent resources can also cause a user to have access to this resource.
type ProjectRolePolicy struct {
	// RoleAssignments is roles directly assigned on this resource
	RoleAssignments []ProjectRoleRoleAssignment `json:"role_assignments,omitempty" yaml:"role_assignments,omitempty"`
}

// ProjectRoleRoleAssignment is describes the assignment of a particular role on a particular resource to a particular identity (user, group, etc.)
//
// The resource is not part of this structure.  Rather, [`RoleAssignment`]s are put into a [`Policy`] and that Policy is applied to a particular resource.
type ProjectRoleRoleAssignment struct {
	IdentityID string `json:"identity_id,omitempty" yaml:"identity_id,omitempty"`
	// IdentityType is describes what kind of identity is described by an id
	IdentityType IdentityType `json:"identity_type,omitempty" yaml:"identity_type,omitempty"`
	RoleName     ProjectRole  `json:"role_name,omitempty" yaml:"role_name,omitempty"`
}

// ProjectUpdate is updateable properties of a [`Project`](crate::external_api::views::Project)
type ProjectUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	Name        string `json:"name,omitempty" yaml:"name,omitempty"`
}

// Rack is client view of an [`Rack`]
type Rack struct {
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// RackResultsPage is a single page of results
type RackResultsPage struct {
	// Items is list of items on this page of results
	Items []Rack `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Role is client view of a [`Role`]
type Role struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is role names consist of two string components separated by dot (".").
	Name RoleName `json:"name,omitempty" yaml:"name,omitempty"`
}

// RoleName is role names consist of two string components separated by dot (".").
type RoleName string

// RoleResultsPage is a single page of results
type RoleResultsPage struct {
	// Items is list of items on this page of results
	Items []Role `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// RouteDestinationIp is route applies to traffic destined for a specific IP address
type RouteDestinationIp struct {
	Type  RouteDestinationType `json:"type,omitempty" yaml:"type,omitempty"`
	Value string               `json:"value,omitempty" yaml:"value,omitempty"`
}

// RouteDestinationType is the type definition for a RouteDestinationType.
type RouteDestinationType string

const (
	// RouteDestinationTypeIp represents the RouteDestinationType `"ip"`.
	RouteDestinationTypeIp RouteDestinationType = "ip"
)

// RouteDestinationIpNet is route applies to traffic destined for a specific IP subnet
type RouteDestinationIpNet struct {
	Type  RouteDestinationType `json:"type,omitempty" yaml:"type,omitempty"`
	Value IpNet                `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// RouteDestinationTypeIpNet represents the RouteDestinationType `"ip_net"`.
	RouteDestinationTypeIpNet RouteDestinationType = "ip_net"
)

// RouteDestinationVPC is route applies to traffic destined for the given VPC.
type RouteDestinationVPC struct {
	Type RouteDestinationType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// RouteDestinationTypeVpc represents the RouteDestinationType `"vpc"`.
	RouteDestinationTypeVpc RouteDestinationType = "vpc"
)

// RouteDestinationSubnet is route applies to traffic
type RouteDestinationSubnet struct {
	Type RouteDestinationType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// RouteDestinationTypeSubnet represents the RouteDestinationType `"subnet"`.
	RouteDestinationTypeSubnet RouteDestinationType = "subnet"
)

// RouteDestination is a `RouteDestination` is used to match traffic with a routing rule, on the destination of that traffic.
//
// When traffic is to be sent to a destination that is within a given `RouteDestination`, the corresponding [`RouterRoute`] applies, and traffic will be forward to the [`RouteTarget`] for that rule.
type RouteDestination struct {
	Type  string `json:"type,omitempty" yaml:"type,omitempty"`
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

// RouteTargetIp is forward traffic to a particular IP address.
type RouteTargetIp struct {
	Type  RouteTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	Value string          `json:"value,omitempty" yaml:"value,omitempty"`
}

// RouteTargetType is the type definition for a RouteTargetType.
type RouteTargetType string

const (
	// RouteTargetTypeIp represents the RouteTargetType `"ip"`.
	RouteTargetTypeIp RouteTargetType = "ip"
)

// RouteTargetVPC is forward traffic to a VPC
type RouteTargetVPC struct {
	Type RouteTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// RouteTargetTypeVpc represents the RouteTargetType `"vpc"`.
	RouteTargetTypeVpc RouteTargetType = "vpc"
)

// RouteTargetSubnet is forward traffic to a VPC Subnet
type RouteTargetSubnet struct {
	Type RouteTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// RouteTargetTypeSubnet represents the RouteTargetType `"subnet"`.
	RouteTargetTypeSubnet RouteTargetType = "subnet"
)

// RouteTargetInstance is forward traffic to a specific instance
type RouteTargetInstance struct {
	Type RouteTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// RouteTargetTypeInstance represents the RouteTargetType `"instance"`.
	RouteTargetTypeInstance RouteTargetType = "instance"
)

// RouteTargetInternetGateway is forward traffic to an internet gateway
type RouteTargetInternetGateway struct {
	Type RouteTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// RouteTargetTypeInternetGateway represents the RouteTargetType `"internet_gateway"`.
	RouteTargetTypeInternetGateway RouteTargetType = "internet_gateway"
)

// RouteTarget is a `RouteTarget` describes the possible locations that traffic matching a route destination can be sent.
type RouteTarget struct {
	Type  string `json:"type,omitempty" yaml:"type,omitempty"`
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

// Route is a route defines a rule that governs where traffic should be sent based on its destination.
type Route struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Destination is a `RouteDestination` is used to match traffic with a routing rule, on the destination of that traffic.
	//
	// When traffic is to be sent to a destination that is within a given `RouteDestination`, the corresponding [`RouterRoute`] applies, and traffic will be forward to the [`RouteTarget`] for that rule.
	Destination RouteDestination `json:"destination,omitempty" yaml:"destination,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Kind is describes the kind of router. Set at creation. `read-only`
	Kind RouteKind `json:"kind,omitempty" yaml:"kind,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// Target is a `RouteTarget` describes the possible locations that traffic matching a route destination can be sent.
	Target RouteTarget `json:"target,omitempty" yaml:"target,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// RouterId is the VPC Router to which the route belongs.
	RouterId string `json:"vpc_router_id,omitempty" yaml:"vpc_router_id,omitempty"`
}

// RouteCreate is create-time parameters for a [`RouterRoute`]
type RouteCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Destination is a `RouteDestination` is used to match traffic with a routing rule, on the destination of that traffic.
	//
	// When traffic is to be sent to a destination that is within a given `RouteDestination`, the corresponding [`RouterRoute`] applies, and traffic will be forward to the [`RouteTarget`] for that rule.
	Destination RouteDestination `json:"destination,omitempty" yaml:"destination,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// Target is a `RouteTarget` describes the possible locations that traffic matching a route destination can be sent.
	Target RouteTarget `json:"target,omitempty" yaml:"target,omitempty"`
}

// RouteKind is the classification of a [`RouterRoute`] as defined by the system. The kind determines certain attributes such as if the route is modifiable and describes how or where the route was created.
//
// See [RFD-21](https://rfd.shared.oxide.computer/rfd/0021#concept-router) for more context
type RouteKind string

const (
	// RouteKindDefault represents the RouteKind `"default"`.
	RouteKindDefault RouteKind = "default"
	// RouteKindVpcSubnet represents the RouteKind `"vpc_subnet"`.
	RouteKindVpcSubnet RouteKind = "vpc_subnet"
	// RouteKindVpcPeering represents the RouteKind `"vpc_peering"`.
	RouteKindVpcPeering RouteKind = "vpc_peering"
	// RouteKindCustom represents the RouteKind `"custom"`.
	RouteKindCustom RouteKind = "custom"
)

// RouteResultsPage is a single page of results
type RouteResultsPage struct {
	// Items is list of items on this page of results
	Items []Route `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// RouteUpdate is updateable properties of a [`RouterRoute`]
type RouteUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Destination is a `RouteDestination` is used to match traffic with a routing rule, on the destination of that traffic.
	//
	// When traffic is to be sent to a destination that is within a given `RouteDestination`, the corresponding [`RouterRoute`] applies, and traffic will be forward to the [`RouteTarget`] for that rule.
	Destination RouteDestination `json:"destination,omitempty" yaml:"destination,omitempty"`
	Name        string           `json:"name,omitempty" yaml:"name,omitempty"`
	// Target is a `RouteTarget` describes the possible locations that traffic matching a route destination can be sent.
	Target RouteTarget `json:"target,omitempty" yaml:"target,omitempty"`
}

// Saga is the type definition for a Saga.
type Saga struct {
	ID    string    `json:"id,omitempty" yaml:"id,omitempty"`
	State SagaState `json:"state,omitempty" yaml:"state,omitempty"`
}

// SagaErrorInfoActionFailed is the type definition for a SagaErrorInfoActionFailed.
type SagaErrorInfoActionFailed struct {
	Error       SagaErrorInfoError `json:"error,omitempty" yaml:"error,omitempty"`
	SourceError interface{}        `json:"source_error,omitempty" yaml:"source_error,omitempty"`
}

// SagaErrorInfoError is the type definition for a SagaErrorInfoError.
type SagaErrorInfoError string

const (
	// SagaErrorInfoErrorActionFailed represents the SagaErrorInfoError `"action_failed"`.
	SagaErrorInfoErrorActionFailed SagaErrorInfoError = "action_failed"
)

// SagaErrorInfoDeserializeFailed is the type definition for a SagaErrorInfoDeserializeFailed.
type SagaErrorInfoDeserializeFailed struct {
	Error   SagaErrorInfoError `json:"error,omitempty" yaml:"error,omitempty"`
	Message string             `json:"message,omitempty" yaml:"message,omitempty"`
}

const (
	// SagaErrorInfoErrorDeserializeFailed represents the SagaErrorInfoError `"deserialize_failed"`.
	SagaErrorInfoErrorDeserializeFailed SagaErrorInfoError = "deserialize_failed"
)

// SagaErrorInfoInjectedError is the type definition for a SagaErrorInfoInjectedError.
type SagaErrorInfoInjectedError struct {
	Error SagaErrorInfoError `json:"error,omitempty" yaml:"error,omitempty"`
}

const (
	// SagaErrorInfoErrorInjectedError represents the SagaErrorInfoError `"injected_error"`.
	SagaErrorInfoErrorInjectedError SagaErrorInfoError = "injected_error"
)

// SagaErrorInfoSerializeFailed is the type definition for a SagaErrorInfoSerializeFailed.
type SagaErrorInfoSerializeFailed struct {
	Error   SagaErrorInfoError `json:"error,omitempty" yaml:"error,omitempty"`
	Message string             `json:"message,omitempty" yaml:"message,omitempty"`
}

const (
	// SagaErrorInfoErrorSerializeFailed represents the SagaErrorInfoError `"serialize_failed"`.
	SagaErrorInfoErrorSerializeFailed SagaErrorInfoError = "serialize_failed"
)

// SagaErrorInfoSubsagaCreateFailed is the type definition for a SagaErrorInfoSubsagaCreateFailed.
type SagaErrorInfoSubsagaCreateFailed struct {
	Error   SagaErrorInfoError `json:"error,omitempty" yaml:"error,omitempty"`
	Message string             `json:"message,omitempty" yaml:"message,omitempty"`
}

const (
	// SagaErrorInfoErrorSubsagaCreateFailed represents the SagaErrorInfoError `"subsaga_create_failed"`.
	SagaErrorInfoErrorSubsagaCreateFailed SagaErrorInfoError = "subsaga_create_failed"
)

// SagaErrorInfo is the type definition for a SagaErrorInfo.
type SagaErrorInfo struct {
	Error       string      `json:"error,omitempty" yaml:"error,omitempty"`
	SourceError interface{} `json:"source_error,omitempty" yaml:"source_error,omitempty"`
	Message     string      `json:"message,omitempty" yaml:"message,omitempty"`
}

// SagaResultsPage is a single page of results
type SagaResultsPage struct {
	// Items is list of items on this page of results
	Items []Saga `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// SagaStateRunning is the type definition for a SagaStateRunning.
type SagaStateRunning struct {
	State SagaStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// SagaStateState is the type definition for a SagaStateState.
type SagaStateState string

const (
	// SagaStateStateRunning represents the SagaStateState `"running"`.
	SagaStateStateRunning SagaStateState = "running"
)

// SagaStateSucceeded is the type definition for a SagaStateSucceeded.
type SagaStateSucceeded struct {
	State SagaStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

const (
	// SagaStateStateSucceeded represents the SagaStateState `"succeeded"`.
	SagaStateStateSucceeded SagaStateState = "succeeded"
)

// SagaStateFailed is the type definition for a SagaStateFailed.
type SagaStateFailed struct {
	ErrorInfo     SagaErrorInfo  `json:"error_info,omitempty" yaml:"error_info,omitempty"`
	ErrorNodeName string         `json:"error_node_name,omitempty" yaml:"error_node_name,omitempty"`
	State         SagaStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

const (
	// SagaStateStateFailed represents the SagaStateState `"failed"`.
	SagaStateStateFailed SagaStateState = "failed"
)

// SagaState is the type definition for a SagaState.
type SagaState struct {
	State         string        `json:"state,omitempty" yaml:"state,omitempty"`
	ErrorInfo     SagaErrorInfo `json:"error_info,omitempty" yaml:"error_info,omitempty"`
	ErrorNodeName string        `json:"error_node_name,omitempty" yaml:"error_node_name,omitempty"`
}

// SamlIdentityProvider is identity-related metadata that's included in nearly all public API objects
type SamlIdentityProvider struct {
	// AcsUrl is service provider endpoint where the response will be sent
	AcsUrl string `json:"acs_url,omitempty" yaml:"acs_url,omitempty"`
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// IdpEntityID is idp's entity id
	IdpEntityID string `json:"idp_entity_id,omitempty" yaml:"idp_entity_id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// PublicCert is optional request signing public certificate (base64 encoded der file)
	PublicCert string `json:"public_cert,omitempty" yaml:"public_cert,omitempty"`
	// SloUrl is service provider endpoint where the idp should send log out requests
	SloUrl string `json:"slo_url,omitempty" yaml:"slo_url,omitempty"`
	// SpClientID is sp's client id
	SpClientID string `json:"sp_client_id,omitempty" yaml:"sp_client_id,omitempty"`
	// TechnicalContactEmail is customer's technical contact for saml configuration
	TechnicalContactEmail string `json:"technical_contact_email,omitempty" yaml:"technical_contact_email,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// SamlIdentityProviderCreate is create-time identity-related parameters
type SamlIdentityProviderCreate struct {
	// AcsUrl is service provider endpoint where the response will be sent
	AcsUrl      string `json:"acs_url,omitempty" yaml:"acs_url,omitempty"`
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// IdpEntityID is idp's entity id
	IdpEntityID string `json:"idp_entity_id,omitempty" yaml:"idp_entity_id,omitempty"`
	// IdpMetadataSource is the source of an identity provider metadata descriptor
	IdpMetadataSource IdpMetadataSource `json:"idp_metadata_source,omitempty" yaml:"idp_metadata_source,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// SigningKeypair is optional request signing key pair
	SigningKeypair DerEncodedKeyPair `json:"signing_keypair,omitempty" yaml:"signing_keypair,omitempty"`
	// SloUrl is service provider endpoint where the idp should send log out requests
	SloUrl string `json:"slo_url,omitempty" yaml:"slo_url,omitempty"`
	// SpClientID is sp's client id
	SpClientID string `json:"sp_client_id,omitempty" yaml:"sp_client_id,omitempty"`
	// TechnicalContactEmail is customer's technical contact for saml configuration
	TechnicalContactEmail string `json:"technical_contact_email,omitempty" yaml:"technical_contact_email,omitempty"`
}

// SessionUser is client view of currently authed user.
type SessionUser struct {
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
}

// Silo is client view of a ['Silo']
type Silo struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Discoverable is a silo where discoverable is false can be retrieved only by its id - it will not be part of the "list all silos" output.
	Discoverable bool `json:"discoverable,omitempty" yaml:"discoverable,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// SiloCreate is create-time parameters for a [`Silo`](crate::external_api::views::Silo)
type SiloCreate struct {
	Description  string `json:"description,omitempty" yaml:"description,omitempty"`
	Discoverable bool   `json:"discoverable,omitempty" yaml:"discoverable,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
}

// SiloResultsPage is a single page of results
type SiloResultsPage struct {
	// Items is list of items on this page of results
	Items []Silo `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// SiloRole is the type definition for a SiloRole.
type SiloRole string

const (
	// SiloRoleAdmin represents the SiloRole `"admin"`.
	SiloRoleAdmin SiloRole = "admin"
	// SiloRoleCollaborator represents the SiloRole `"collaborator"`.
	SiloRoleCollaborator SiloRole = "collaborator"
	// SiloRoleViewer represents the SiloRole `"viewer"`.
	SiloRoleViewer SiloRole = "viewer"
)

// SiloRolePolicy is client view of a [`Policy`], which describes how this resource may be accessed
//
// Note that the Policy only describes access granted explicitly for this resource.  The policies of parent resources can also cause a user to have access to this resource.
type SiloRolePolicy struct {
	// RoleAssignments is roles directly assigned on this resource
	RoleAssignments []SiloRoleRoleAssignment `json:"role_assignments,omitempty" yaml:"role_assignments,omitempty"`
}

// SiloRoleRoleAssignment is describes the assignment of a particular role on a particular resource to a particular identity (user, group, etc.)
//
// The resource is not part of this structure.  Rather, [`RoleAssignment`]s are put into a [`Policy`] and that Policy is applied to a particular resource.
type SiloRoleRoleAssignment struct {
	IdentityID string `json:"identity_id,omitempty" yaml:"identity_id,omitempty"`
	// IdentityType is describes what kind of identity is described by an id
	IdentityType IdentityType `json:"identity_type,omitempty" yaml:"identity_type,omitempty"`
	RoleName     SiloRole     `json:"role_name,omitempty" yaml:"role_name,omitempty"`
}

// Sled is client view of an [`Sled`]
type Sled struct {
	// ID is unique, immutable, system-controlled identifier for each resource
	ID             string `json:"id,omitempty" yaml:"id,omitempty"`
	ServiceAddress string `json:"service_address,omitempty" yaml:"service_address,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// SledResultsPage is a single page of results
type SledResultsPage struct {
	// Items is list of items on this page of results
	Items []Sled `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Snapshot is client view of a Snapshot
type Snapshot struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	DiskID      string `json:"disk_id,omitempty" yaml:"disk_id,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name      string `json:"name,omitempty" yaml:"name,omitempty"`
	ProjectID string `json:"project_id,omitempty" yaml:"project_id,omitempty"`
	// Size is a count of bytes, typically used either for memory or storage capacity
	//
	// The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.
	Size ByteCount `json:"size,omitempty" yaml:"size,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// SnapshotCreate is create-time parameters for a [`Snapshot`](omicron_common::api::external::Snapshot)
type SnapshotCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Disk is the name of the disk to be snapshotted
	Disk string `json:"disk,omitempty" yaml:"disk,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
}

// SnapshotResultsPage is a single page of results
type SnapshotResultsPage struct {
	// Items is list of items on this page of results
	Items []Snapshot `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// SpoofLoginBody is the type definition for a SpoofLoginBody.
type SpoofLoginBody struct {
	Username string `json:"username,omitempty" yaml:"username,omitempty"`
}

// SshKey is client view of a [`SshKey`]
type SshKey struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// PublicKey is sSH public key, e.g., `"ssh-ed25519 AAAAC3NzaC..."`
	PublicKey string `json:"public_key,omitempty" yaml:"public_key,omitempty"`
	// SiloUserID is the user to whom this key belongs
	SiloUserID string `json:"silo_user_id,omitempty" yaml:"silo_user_id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// SshKeyCreate is create-time parameters for an [`SshKey`](crate::external_api::views::SshKey)
type SshKeyCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// PublicKey is sSH public key, e.g., `"ssh-ed25519 AAAAC3NzaC..."`
	PublicKey string `json:"public_key,omitempty" yaml:"public_key,omitempty"`
}

// SshKeyResultsPage is a single page of results
type SshKeyResultsPage struct {
	// Items is list of items on this page of results
	Items []SshKey `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// TimeseriesName is names are constructed by concatenating the target and metric names with ':'. Target and metric names must be lowercase alphanumeric characters with '_' separating words.
type TimeseriesName string

// TimeseriesSchema is the schema for a timeseries.
//
// This includes the name of the timeseries, as well as the datum type of its metric and the schema for each field.
type TimeseriesSchema struct {
	Created *time.Time `json:"created,omitempty" yaml:"created,omitempty"`
	// DatumType is the type of an individual datum of a metric.
	DatumType   DatumType     `json:"datum_type,omitempty" yaml:"datum_type,omitempty"`
	FieldSchema []FieldSchema `json:"field_schema,omitempty" yaml:"field_schema,omitempty"`
	// TimeseriesName is names are constructed by concatenating the target and metric names with ':'. Target and metric names must be lowercase alphanumeric characters with '_' separating words.
	TimeseriesName TimeseriesName `json:"timeseries_name,omitempty" yaml:"timeseries_name,omitempty"`
}

// TimeseriesSchemaResultsPage is a single page of results
type TimeseriesSchemaResultsPage struct {
	// Items is list of items on this page of results
	Items []TimeseriesSchema `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// User is client view of a [`User`]
type User struct {
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
}

// UserBuiltin is client view of a [`UserBuiltin`]
type UserBuiltin struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// UserBuiltinResultsPage is a single page of results
type UserBuiltinResultsPage struct {
	// Items is list of items on this page of results
	Items []UserBuiltin `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// UserResultsPage is a single page of results
type UserResultsPage struct {
	// Items is list of items on this page of results
	Items []User `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// VPC is client view of a [`Vpc`]
type VPC struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// DnsName is the name used for the VPC in DNS.
	DnsName string `json:"dns_name,omitempty" yaml:"dns_name,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// IPv6Prefix is the unique local IPv6 address range for subnets in this VPC
	IPv6Prefix IPv6Net `json:"ipv6_prefix,omitempty" yaml:"ipv6_prefix,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// ProjectID is id for the project containing this VPC
	ProjectID string `json:"project_id,omitempty" yaml:"project_id,omitempty"`
	// SystemRouterID is id for the system router where subnet default routes are registered
	SystemRouterID string `json:"system_router_id,omitempty" yaml:"system_router_id,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
}

// VPCCreate is create-time parameters for a [`Vpc`](crate::external_api::views::Vpc)
type VPCCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// DnsName is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	DnsName string `json:"dns_name,omitempty" yaml:"dns_name,omitempty"`
	// IPv6Prefix is the IPv6 prefix for this VPC.
	//
	// All IPv6 subnets created from this VPC must be taken from this range, which sould be a Unique Local Address in the range `fd00::/48`. The default VPC Subnet will have the first `/64` range from this prefix.
	IPv6Prefix IPv6Net `json:"ipv6_prefix,omitempty" yaml:"ipv6_prefix,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
}

// FirewallRule is a single rule in a VPC firewall
type FirewallRule struct {
	// Action is whether traffic matching the rule should be allowed or dropped
	Action FirewallRuleAction `json:"action,omitempty" yaml:"action,omitempty"`
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Direction is whether this rule is for incoming or outgoing traffic
	Direction FirewallRuleDirection `json:"direction,omitempty" yaml:"direction,omitempty"`
	// Filters is reductions on the scope of the rule
	Filters FirewallRuleFilter `json:"filters,omitempty" yaml:"filters,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// Priority is the relative priority of this rule
	Priority int `json:"priority,omitempty" yaml:"priority,omitempty"`
	// Status is whether this rule is in effect
	Status FirewallRuleStatus `json:"status,omitempty" yaml:"status,omitempty"`
	// Targets is list of sets of instances that the rule applies to
	Targets []FirewallRuleTarget `json:"targets,omitempty" yaml:"targets,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// VPCId is the VPC to which this rule belongs
	VPCId string `json:"vpc_id,omitempty" yaml:"vpc_id,omitempty"`
}

// FirewallRuleAction is the type definition for a FirewallRuleAction.
type FirewallRuleAction string

const (
	// FirewallRuleActionAllow represents the FirewallRuleAction `"allow"`.
	FirewallRuleActionAllow FirewallRuleAction = "allow"
	// FirewallRuleActionDeny represents the FirewallRuleAction `"deny"`.
	FirewallRuleActionDeny FirewallRuleAction = "deny"
)

// FirewallRuleDirection is the type definition for a FirewallRuleDirection.
type FirewallRuleDirection string

const (
	// FirewallRuleDirectionInbound represents the FirewallRuleDirection `"inbound"`.
	FirewallRuleDirectionInbound FirewallRuleDirection = "inbound"
	// FirewallRuleDirectionOutbound represents the FirewallRuleDirection `"outbound"`.
	FirewallRuleDirectionOutbound FirewallRuleDirection = "outbound"
)

// FirewallRuleFilter is filter for a firewall rule. A given packet must match every field that is present for the rule to apply to it. A packet matches a field if any entry in that field matches the packet.
type FirewallRuleFilter struct {
	// Hosts is if present, the sources (if incoming) or destinations (if outgoing) this rule applies to.
	Hosts []FirewallRuleHostFilter `json:"hosts,omitempty" yaml:"hosts,omitempty"`
	// Ports is if present, the destination ports this rule applies to.
	Ports []L4PortRange `json:"ports,omitempty" yaml:"ports,omitempty"`
	// Protocols is if present, the networking protocols this rule applies to.
	Protocols []FirewallRuleProtocol `json:"protocols,omitempty" yaml:"protocols,omitempty"`
}

// FirewallRuleHostFilterVPC is the rule applies to traffic from/to all instances in the VPC
type FirewallRuleHostFilterVPC struct {
	Type FirewallRuleHostFilterType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

// FirewallRuleHostFilterType is the type definition for a FirewallRuleHostFilterType.
type FirewallRuleHostFilterType string

const (
	// FirewallRuleHostFilterTypeVpc represents the FirewallRuleHostFilterType `"vpc"`.
	FirewallRuleHostFilterTypeVpc FirewallRuleHostFilterType = "vpc"
)

// FirewallRuleHostFilterSubnet is the rule applies to traffic from/to all instances in the VPC Subnet
type FirewallRuleHostFilterSubnet struct {
	Type FirewallRuleHostFilterType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// FirewallRuleHostFilterTypeSubnet represents the FirewallRuleHostFilterType `"subnet"`.
	FirewallRuleHostFilterTypeSubnet FirewallRuleHostFilterType = "subnet"
)

// FirewallRuleHostFilterInstance is the rule applies to traffic from/to this specific instance
type FirewallRuleHostFilterInstance struct {
	Type FirewallRuleHostFilterType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// FirewallRuleHostFilterTypeInstance represents the FirewallRuleHostFilterType `"instance"`.
	FirewallRuleHostFilterTypeInstance FirewallRuleHostFilterType = "instance"
)

// FirewallRuleHostFilterIp is the rule applies to traffic from/to a specific IP address
type FirewallRuleHostFilterIp struct {
	Type  FirewallRuleHostFilterType `json:"type,omitempty" yaml:"type,omitempty"`
	Value string                     `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// FirewallRuleHostFilterTypeIp represents the FirewallRuleHostFilterType `"ip"`.
	FirewallRuleHostFilterTypeIp FirewallRuleHostFilterType = "ip"
)

// FirewallRuleHostFilterIpNet is the rule applies to traffic from/to a specific IP subnet
type FirewallRuleHostFilterIpNet struct {
	Type  FirewallRuleHostFilterType `json:"type,omitempty" yaml:"type,omitempty"`
	Value IpNet                      `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// FirewallRuleHostFilterTypeIpNet represents the FirewallRuleHostFilterType `"ip_net"`.
	FirewallRuleHostFilterTypeIpNet FirewallRuleHostFilterType = "ip_net"
)

// FirewallRuleHostFilter is the `VpcFirewallRuleHostFilter` is used to filter traffic on the basis of its source or destination host.
type FirewallRuleHostFilter struct {
	Type  string `json:"type,omitempty" yaml:"type,omitempty"`
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

// FirewallRuleProtocol is the protocols that may be specified in a firewall rule's filter
type FirewallRuleProtocol string

const (
	// FirewallRuleProtocolTCP represents the FirewallRuleProtocol `"TCP"`.
	FirewallRuleProtocolTCP FirewallRuleProtocol = "TCP"
	// FirewallRuleProtocolUDP represents the FirewallRuleProtocol `"UDP"`.
	FirewallRuleProtocolUDP FirewallRuleProtocol = "UDP"
	// FirewallRuleProtocolICMP represents the FirewallRuleProtocol `"ICMP"`.
	FirewallRuleProtocolICMP FirewallRuleProtocol = "ICMP"
)

// FirewallRuleStatus is the type definition for a FirewallRuleStatus.
type FirewallRuleStatus string

const (
	// FirewallRuleStatusDisabled represents the FirewallRuleStatus `"disabled"`.
	FirewallRuleStatusDisabled FirewallRuleStatus = "disabled"
	// FirewallRuleStatusEnabled represents the FirewallRuleStatus `"enabled"`.
	FirewallRuleStatusEnabled FirewallRuleStatus = "enabled"
)

// FirewallRuleTargetVPC is the rule applies to all instances in the VPC
type FirewallRuleTargetVPC struct {
	Type FirewallRuleTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

// FirewallRuleTargetType is the type definition for a FirewallRuleTargetType.
type FirewallRuleTargetType string

const (
	// FirewallRuleTargetTypeVpc represents the FirewallRuleTargetType `"vpc"`.
	FirewallRuleTargetTypeVpc FirewallRuleTargetType = "vpc"
)

// FirewallRuleTargetSubnet is the rule applies to all instances in the VPC Subnet
type FirewallRuleTargetSubnet struct {
	Type FirewallRuleTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// FirewallRuleTargetTypeSubnet represents the FirewallRuleTargetType `"subnet"`.
	FirewallRuleTargetTypeSubnet FirewallRuleTargetType = "subnet"
)

// FirewallRuleTargetInstance is the rule applies to this specific instance
type FirewallRuleTargetInstance struct {
	Type FirewallRuleTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// FirewallRuleTargetTypeInstance represents the FirewallRuleTargetType `"instance"`.
	FirewallRuleTargetTypeInstance FirewallRuleTargetType = "instance"
)

// FirewallRuleTargetIp is the rule applies to a specific IP address
type FirewallRuleTargetIp struct {
	Type  FirewallRuleTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	Value string                 `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// FirewallRuleTargetTypeIp represents the FirewallRuleTargetType `"ip"`.
	FirewallRuleTargetTypeIp FirewallRuleTargetType = "ip"
)

// FirewallRuleTargetIpNet is the rule applies to a specific IP subnet
type FirewallRuleTargetIpNet struct {
	Type  FirewallRuleTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	Value IpNet                  `json:"value,omitempty" yaml:"value,omitempty"`
}

const (
	// FirewallRuleTargetTypeIpNet represents the FirewallRuleTargetType `"ip_net"`.
	FirewallRuleTargetTypeIpNet FirewallRuleTargetType = "ip_net"
)

// FirewallRuleTarget is a `VpcFirewallRuleTarget` is used to specify the set of [`Instance`]s to which a firewall rule applies.
type FirewallRuleTarget struct {
	Type  string `json:"type,omitempty" yaml:"type,omitempty"`
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

// FirewallRuleUpdate is a single rule in a VPC firewall
type FirewallRuleUpdate struct {
	// Action is whether traffic matching the rule should be allowed or dropped
	Action FirewallRuleAction `json:"action,omitempty" yaml:"action,omitempty"`
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Direction is whether this rule is for incoming or outgoing traffic
	Direction FirewallRuleDirection `json:"direction,omitempty" yaml:"direction,omitempty"`
	// Filters is reductions on the scope of the rule
	Filters FirewallRuleFilter `json:"filters,omitempty" yaml:"filters,omitempty"`
	// Name is name of the rule, unique to this VPC
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// Priority is the relative priority of this rule
	Priority int `json:"priority,omitempty" yaml:"priority,omitempty"`
	// Status is whether this rule is in effect
	Status FirewallRuleStatus `json:"status,omitempty" yaml:"status,omitempty"`
	// Targets is list of sets of instances that the rule applies to
	Targets []FirewallRuleTarget `json:"targets,omitempty" yaml:"targets,omitempty"`
}

// FirewallRuleUpdateParams is updateable properties of a `Vpc`'s firewall Note that VpcFirewallRules are implicitly created along with a Vpc, so there is no explicit creation.
type FirewallRuleUpdateParams struct {
	Rules []FirewallRuleUpdate `json:"rules,omitempty" yaml:"rules,omitempty"`
}

// FirewallRules is collection of a [`Vpc`]'s firewall rules
type FirewallRules struct {
	Rules []FirewallRule `json:"rules,omitempty" yaml:"rules,omitempty"`
}

// VPCResultsPage is a single page of results
type VPCResultsPage struct {
	// Items is list of items on this page of results
	Items []VPC `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Router is a VPC router defines a series of rules that indicate where traffic should be sent depending on its destination.
type Router struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID   string     `json:"id,omitempty" yaml:"id,omitempty"`
	Kind RouterKind `json:"kind,omitempty" yaml:"kind,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// VPCId is the VPC to which the router belongs.
	VPCId string `json:"vpc_id,omitempty" yaml:"vpc_id,omitempty"`
}

// RouterCreate is create-time parameters for a [`VpcRouter`](crate::external_api::views::VpcRouter)
type RouterCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
}

// RouterKind is the type definition for a RouterKind.
type RouterKind string

const (
	// RouterKindSystem represents the RouterKind `"system"`.
	RouterKindSystem RouterKind = "system"
	// RouterKindCustom represents the RouterKind `"custom"`.
	RouterKindCustom RouterKind = "custom"
)

// RouterResultsPage is a single page of results
type RouterResultsPage struct {
	// Items is list of items on this page of results
	Items []Router `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// RouterUpdate is updateable properties of a [`VpcRouter`](crate::external_api::views::VpcRouter)
type RouterUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	Name        string `json:"name,omitempty" yaml:"name,omitempty"`
}

// Subnet is a VPC subnet represents a logical grouping for instances that allows network traffic between them, within a IPv4 subnetwork or optionall an IPv6 subnetwork.
type Subnet struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// IPv4Block is the IPv4 subnet CIDR block.
	IPv4Block IPv4Net `json:"ipv4_block,omitempty" yaml:"ipv4_block,omitempty"`
	// IPv6Block is the IPv6 subnet CIDR block.
	IPv6Block IPv6Net `json:"ipv6_block,omitempty" yaml:"ipv6_block,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"time_created,omitempty" yaml:"time_created,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"time_modified,omitempty" yaml:"time_modified,omitempty"`
	// VPCId is the VPC to which the subnet belongs.
	VPCId string `json:"vpc_id,omitempty" yaml:"vpc_id,omitempty"`
}

// SubnetCreate is create-time parameters for a [`VpcSubnet`](crate::external_api::views::VpcSubnet)
type SubnetCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// IPv4Block is the IPv4 address range for this subnet.
	//
	// It must be allocated from an RFC 1918 private address range, and must not overlap with any other existing subnet in the VPC.
	IPv4Block IPv4Net `json:"ipv4_block,omitempty" yaml:"ipv4_block,omitempty"`
	// IPv6Block is the IPv6 address range for this subnet.
	//
	// It must be allocated from the RFC 4193 Unique Local Address range, with the prefix equal to the parent VPC's prefix. A random `/64` block will be assigned if one is not provided. It must not overlap with any existing subnet in the VPC.
	IPv6Block IPv6Net `json:"ipv6_block,omitempty" yaml:"ipv6_block,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
}

// SubnetResultsPage is a single page of results
type SubnetResultsPage struct {
	// Items is list of items on this page of results
	Items []Subnet `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// SubnetUpdate is updateable properties of a [`VpcSubnet`](crate::external_api::views::VpcSubnet)
type SubnetUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	Name        string `json:"name,omitempty" yaml:"name,omitempty"`
}

// VPCUpdate is updateable properties of a [`Vpc`](crate::external_api::views::Vpc)
type VPCUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	DnsName     string `json:"dns_name,omitempty" yaml:"dns_name,omitempty"`
	Name        string `json:"name,omitempty" yaml:"name,omitempty"`
}

// DatumTypes is the collection of all DatumType values.
var DatumTypes = []DatumType{
	DatumTypeBool,
	DatumTypeBytes,
	DatumTypeCumulativeF64,
	DatumTypeCumulativeI64,
	DatumTypeF64,
	DatumTypeHistogramF64,
	DatumTypeHistogramI64,
	DatumTypeI64,
	DatumTypeString,
}

// DigestTypes is the collection of all DigestType values.
var DigestTypes = []DigestType{
	DigestTypeSha256,
}

// DiskSourceTypes is the collection of all DiskSourceType values.
var DiskSourceTypes = []DiskSourceType{
	DiskSourceTypeBlank,
	DiskSourceTypeGlobalImage,
	DiskSourceTypeImage,
	DiskSourceTypeSnapshot,
}

// DiskStateStates is the collection of all DiskStateState values.
var DiskStateStates = []DiskStateState{
	DiskStateStateAttached,
	DiskStateStateAttaching,
	DiskStateStateCreating,
	DiskStateStateDestroyed,
	DiskStateStateDetached,
	DiskStateStateDetaching,
	DiskStateStateFaulted,
}

// FieldSources is the collection of all FieldSource values.
var FieldSources = []FieldSource{
	FieldSourceMetric,
	FieldSourceTarget,
}

// FieldTypes is the collection of all FieldType values.
var FieldTypes = []FieldType{
	FieldTypeBool,
	FieldTypeI64,
	FieldTypeIpAddr,
	FieldTypeString,
	FieldTypeUuid,
}

// FirewallRuleActions is the collection of all FirewallRuleAction values.
var FirewallRuleActions = []FirewallRuleAction{
	FirewallRuleActionAllow,
	FirewallRuleActionDeny,
}

// FirewallRuleDirections is the collection of all FirewallRuleDirection values.
var FirewallRuleDirections = []FirewallRuleDirection{
	FirewallRuleDirectionInbound,
	FirewallRuleDirectionOutbound,
}

// FirewallRuleHostFilterTypes is the collection of all FirewallRuleHostFilterType values.
var FirewallRuleHostFilterTypes = []FirewallRuleHostFilterType{
	FirewallRuleHostFilterTypeInstance,
	FirewallRuleHostFilterTypeIp,
	FirewallRuleHostFilterTypeIpNet,
	FirewallRuleHostFilterTypeSubnet,
	FirewallRuleHostFilterTypeVpc,
}

// FirewallRuleProtocols is the collection of all FirewallRuleProtocol values.
var FirewallRuleProtocols = []FirewallRuleProtocol{
	FirewallRuleProtocolICMP,
	FirewallRuleProtocolTCP,
	FirewallRuleProtocolUDP,
}

// FirewallRuleStatuses is the collection of all FirewallRuleStatus values.
var FirewallRuleStatuses = []FirewallRuleStatus{
	FirewallRuleStatusDisabled,
	FirewallRuleStatusEnabled,
}

// FirewallRuleTargetTypes is the collection of all FirewallRuleTargetType values.
var FirewallRuleTargetTypes = []FirewallRuleTargetType{
	FirewallRuleTargetTypeInstance,
	FirewallRuleTargetTypeIp,
	FirewallRuleTargetTypeIpNet,
	FirewallRuleTargetTypeSubnet,
	FirewallRuleTargetTypeVpc,
}

// FleetRoles is the collection of all FleetRole values.
var FleetRoles = []FleetRole{
	FleetRoleAdmin,
	FleetRoleCollaborator,
	FleetRoleViewer,
}

// IdSortModes is the collection of all IdSortMode values.
var IdSortModes = []IdSortMode{
	IdSortModeIdAscending,
}

// IdentityProviderTypes is the collection of all IdentityProviderType values.
var IdentityProviderTypes = []IdentityProviderType{
	IdentityProviderTypeSaml,
}

// IdentityTypes is the collection of all IdentityType values.
var IdentityTypes = []IdentityType{
	IdentityTypeSiloUser,
}

// IdpMetadataSourceTypes is the collection of all IdpMetadataSourceType values.
var IdpMetadataSourceTypes = []IdpMetadataSourceType{
	IdpMetadataSourceTypeBase64EncodedXml,
	IdpMetadataSourceTypeUrl,
}

// ImageSourceTypes is the collection of all ImageSourceType values.
var ImageSourceTypes = []ImageSourceType{
	ImageSourceTypeSnapshot,
	ImageSourceTypeUrl,
	ImageSourceTypeYouCanBootAnythingAsLongAsItsAlpine,
}

// InstanceDiskAttachmentTypes is the collection of all InstanceDiskAttachmentType values.
var InstanceDiskAttachmentTypes = []InstanceDiskAttachmentType{
	InstanceDiskAttachmentTypeAttach,
	InstanceDiskAttachmentTypeCreate,
}

// InstanceNetworkInterfaceAttachmentTypes is the collection of all InstanceNetworkInterfaceAttachmentType values.
var InstanceNetworkInterfaceAttachmentTypes = []InstanceNetworkInterfaceAttachmentType{
	InstanceNetworkInterfaceAttachmentTypeCreate,
	InstanceNetworkInterfaceAttachmentTypeDefault,
	InstanceNetworkInterfaceAttachmentTypeNone,
}

// InstanceStates is the collection of all InstanceState values.
var InstanceStates = []InstanceState{
	InstanceStateCreating,
	InstanceStateDestroyed,
	InstanceStateFailed,
	InstanceStateMigrating,
	InstanceStateRebooting,
	InstanceStateRepairing,
	InstanceStateRunning,
	InstanceStateStarting,
	InstanceStateStopped,
	InstanceStateStopping,
}

// NameOrIdSortModes is the collection of all NameOrIdSortMode values.
var NameOrIdSortModes = []NameOrIdSortMode{
	NameOrIdSortModeIdAscending,
	NameOrIdSortModeNameAscending,
	NameOrIdSortModeNameDescending,
}

// NameSortModes is the collection of all NameSortMode values.
var NameSortModes = []NameSortMode{
	NameSortModeNameAscending,
}

// OrganizationRoles is the collection of all OrganizationRole values.
var OrganizationRoles = []OrganizationRole{
	OrganizationRoleAdmin,
	OrganizationRoleCollaborator,
	OrganizationRoleViewer,
}

// ProjectRoles is the collection of all ProjectRole values.
var ProjectRoles = []ProjectRole{
	ProjectRoleAdmin,
	ProjectRoleCollaborator,
	ProjectRoleViewer,
}

// RouteDestinationTypes is the collection of all RouteDestinationType values.
var RouteDestinationTypes = []RouteDestinationType{
	RouteDestinationTypeIp,
	RouteDestinationTypeIpNet,
	RouteDestinationTypeSubnet,
	RouteDestinationTypeVpc,
}

// RouteKinds is the collection of all RouteKind values.
var RouteKinds = []RouteKind{
	RouteKindCustom,
	RouteKindDefault,
	RouteKindVpcPeering,
	RouteKindVpcSubnet,
}

// RouteTargetTypes is the collection of all RouteTargetType values.
var RouteTargetTypes = []RouteTargetType{
	RouteTargetTypeInstance,
	RouteTargetTypeInternetGateway,
	RouteTargetTypeIp,
	RouteTargetTypeSubnet,
	RouteTargetTypeVpc,
}

// RouterKinds is the collection of all RouterKind values.
var RouterKinds = []RouterKind{
	RouterKindCustom,
	RouterKindSystem,
}

// SagaErrorInfoErrors is the collection of all SagaErrorInfoError values.
var SagaErrorInfoErrors = []SagaErrorInfoError{
	SagaErrorInfoErrorActionFailed,
	SagaErrorInfoErrorDeserializeFailed,
	SagaErrorInfoErrorInjectedError,
	SagaErrorInfoErrorSerializeFailed,
	SagaErrorInfoErrorSubsagaCreateFailed,
}

// SagaStateStates is the collection of all SagaStateState values.
var SagaStateStates = []SagaStateState{
	SagaStateStateFailed,
	SagaStateStateRunning,
	SagaStateStateSucceeded,
}

// SiloRoles is the collection of all SiloRole values.
var SiloRoles = []SiloRole{
	SiloRoleAdmin,
	SiloRoleCollaborator,
	SiloRoleViewer,
}
